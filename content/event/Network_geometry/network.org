#+begin_src jupyter-python
import matplotlib.pyplot as plt, cmasher as cmr, pandas as pd
import numpy as np, os, sys, networkx as nx, warnings
warnings.simplefilter("ignore"); plt.style.use("fivethirtyeight spooky".split())
import nngt
from fa2 import *

fa2 = ForceAtlas2()

g = nx.duplication_divergence_graph(100, .3)
# g = nngt.generation.sparse_clustered(0.3, 180, avg_deg = 10, directed = 0).graph

#+end_src

#+RESULTS:
:RESULTS:
: 100% 10000/10000 [00:01<00:00, 5384.61it/s]
: BarnesHut Approximation  took  0.36  seconds
: Repulsion forces  took  1.01  seconds
: Gravitational forces  took  0.05  seconds
: Attraction forces  took  0.03  seconds
: AdjustSpeedAndApplyForces step  took  0.22  seconds
[[file:./.ob-jupyter/7e92dc904a1f170b3879b0962c2db97afb5ff966.png]]
:END:

#+begin_src jupyter-python
import mercator
nx.write_edgelist(g, "./featured.edge")
mercator.embed("./featured.edge")
#+end_src

#+RESULTS:


#+begin_src jupyter-python
pos = fa2.forceatlas2_networkx_layout(g, iterations = 10)

n = np.linspace(0, 1, 12, 0)
colors = cmr.chroma(n)

idx = np.random.choice(np.arange(0, len(colors)), size = len(g))
fig, ax = plt.subplots()
nx.draw(g, pos = pos,
        ax = ax, node_size = 80,
        node_color = colors[idx],
        edge_color = "lightgray")
ax.set_aspect('equal', 'box')
ax.margins(0)
fig.tight_layout()
fig.savefig("./featured.png", dpi = 300)
fig.show()
#+end_src

#+RESULTS:
:RESULTS:
: 100% 10/10 [00:00<00:00, 1023.23it/s]
: BarnesHut Approximation  took  0.00  seconds
: Repulsion forces  took  0.01  seconds
: Gravitational forces  took  0.00  seconds
: Attraction forces  took  0.00  seconds
: AdjustSpeedAndApplyForces step  took  0.00  seconds
[[file:./.ob-jupyter/14e49ced9d1ccf789b1bae17310d0cfc0e78d6a0.png]]
:END:

#+begin_src jupyter-python
d = {}
for idx, label in enumerate("name kappa theta rad".split()):
    d[label] = np.loadtxt("./featured.inf_coord", usecols = idx)
df = pd.DataFrame(d)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
from matplotlib.collections import LineCollection
lc = []
for i, j in g.edges():
    a = df[df.name == i]
    a = (a.theta, a.rad)
    b = df[df.name == j]
    b = (b.theta, b.rad)
    lc.append((a, b))

lc = np.array(lc).squeeze()
lc = LineCollection(lc, color = "white")
fig, ax = plt.subplots(subplot_kw = dict(projection = 'polar'))
print(colors[idx].shape)
ax.add_artist(lc)
ax.scatter(df.theta, df.rad, c = colors[idx], zorder = 100)
ax.grid(True, linestyle = '--')
fig.savefig("./featured.png", dpi = 300)
fig.show()

#+end_src

#+RESULTS:
:RESULTS:
: (100, 4)
[[file:./.ob-jupyter/d4b55621435b5087b1f694d3b883700d87d3b543.png]]
:END:
