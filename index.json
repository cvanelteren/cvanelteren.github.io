
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":" I offer a unique profile in artificial intelligence, physics, computer science and neuroscience to study non-linear dynamics in complex dynamical systems. I enjoy playing music, reading on tech, tinkering with electronics and being amazed by the wonders of the world. Interested? Shoot me an email!\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://cvanelteren.github.io/authors/casper-van-elteren/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/casper-van-elteren/","section":"authors","summary":"I offer a unique profile in artificial intelligence, physics, computer science and neuroscience to study non-linear dynamics in complex dynamical systems. I enjoy playing music, reading on tech, tinkering with electronics and being amazed by the wonders of the world.","tags":null,"title":"Casper van Elteren","type":"authors"},{"authors":null,"categories":null,"content":" I offer a unique profile in artificial intelligence, physics, computer science and neuroscience to study non-linear dynamics in complex dynamical systems. I enjoy playing music, reading on tech, tinkering with electronics and being amazed by the wonders of the world. Interested? Shoot me an email!\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"91c8ca0227365cfb3fa19fd4adc490cf","permalink":"https://cvanelteren.github.io/authors/casper-van-elteren/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/casper-van-elteren/","section":"authors","summary":"I offer a unique profile in artificial intelligence, physics, computer science and neuroscience to study non-linear dynamics in complex dynamical systems. I enjoy playing music, reading on tech, tinkering with electronics and being amazed by the wonders of the world.","tags":null,"title":"Casper van Elteren","type":"authors"},{"authors":["casper-van-elteren"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"39d7a19fd8ec3bbcbeb868222f161644","permalink":"https://cvanelteren.github.io/authors/casper-van-elteren/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/casper-van-elteren/","section":"authors","summary":"","tags":null,"title":"Casper Van Elteren","type":"authors"},{"authors":[],"categories":[],"content":"\u0026lt;!DOCTYPE html\u0026gt; TLDR Slime molds are amazing creatures that can solve complex problems without a central cognitive unit I build a simulation from scratch in Nim and visualize it with d3 The simulation runs and can be controlled directly from the browser Introduction Human are fascinating creatures. We like to think of ourselves as having an identity, a sense of “self” or ego. We like to think of ourselves having a career or skills and hardly express (at least in common speech) about interaction with our environment. But what if you can be both?\nslimeMoldSpores In nature, we often do not consider other forms of live as having an ego. A bird is considered a bird that interact purely with its environment because it cannot control to the same extent as we do. Some organism, however, exhibit a life that could be expressed as living on a spectrum between operating as an individual and as a singular organism. The slime mold is one such creature. The slime mold is a single celled eukaryotic (= having a nucleus) organism that can form spores. These spores are often produces when different slime molds group together to form a multi-cellular organism (1)\nmaze Slime molds are particularly interesting as scientists have studied them extensively for their computational ability. When slime molds search for food, they extend in space by producing spores. Initially, the search is randomly around them, but as soon as these spores find food, the slime mold increases the “traffic” to these spores. Scientists have studied this behavior and found that the slime mold is able to solve mazes (2), reproduce the tokyo metro network\nWhat is amazing about this organism is that it can do all of this without “knowing” the general surrounding. There is no generalized intelligence, or forward planning. Through interactions with its environment the organism can organize and solve complex problems.\nIn this post, I want to explore the properties of this organism by building a agent-based simulation from scratch. In addition, I want to explore visualizing the simulation on a web page directly without the use of videos.\nThe Plan The goal is to create a simulator that can be run directly from the browser (3). I will use Nim (4 to make the computational model, and create a visual application by using javascript and D3. The visual components will have a control box that can control various aspects of the simulation such as starting and stopping, controlling the number of agents, the decay rate of the resources and so on.\noutline Why Nim? Nim is a pretty nifty language that writes (and feels) similar to python, except that it is strongly typed. The strength of Nim is that it compiles to javascript, or c/cpp. It was created in 2005 and released to the public in 2008. Compared ot cpp or c it has more features that you would expect from a modern languages. For example, checking that am member is contained with in a list (or sequence in Nim) can be readily done with the `in` command or added with a `contains` function (called `proc`(ess) in Nim). In the past I have written some posts about Nim and its cool features of bridging between different languages http://cvanelteren.github.io/tags/nim), an decided to solve the advent of code challenges in Nim to explore the language and its capabilities.\nModeling a slime mold Describe the stages of the slime mold Describe the movement vector The computational properties of the slime mold have been studied extensively both from a biological perspective as well as computationally cite:@Jones2010,@Ito2003,Kessler1993. Arguebly, one of the simplest approach is done by cite:@Jones2010. He applies an agent-based approach to study the pattern formation that emerges through the interaction of slime mold agents.\nagent Each slimemold is modeled as an agent in 2D space possessing different sensors (4). Each agent drops food resources in the environment with activity $A_i$ that other agents can sense. The agents have $n$ sensors that can sense location at distance $R_i$ from the agent of width $W_i$. When a food source is sensed by the sensors, the agent orientates and moves towards the sensor with the largest concentration. If the propposed location is occupied by another object, the angle will pick a random angle. When an agent does not move, he does not drop resources in the environment. Over time, the dropped food source will decay from the environment with rate $\\delta$.\nFrom these simple dynamics, agents can form chains (5) and with enough agents will form networks (6). The emergence of networks, occurs through the fact that each agent\nchains networks minimum_resources The dropped resources emulate how a slime mold would communicate to other slime molds that there is some food source nearby. Jones ran computational simulations that emulated food sources in the environment. Remarkable, the agents will produce a minimum spanning tree (or network) between the food resources (7).\nCode layout cite:Jones2010 provides an …","date":1686843610,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1686843610,"objectID":"57ea3fdad23fa042b58b773fd9407824","permalink":"https://cvanelteren.github.io/post/slimemold/","publishdate":"2023-06-15T17:40:10+02:00","relpermalink":"/post/slimemold/","section":"post","summary":"I write a simulator from scratch in Nim and visualize on the web with D3!","tags":["coding","computuational modeling","nim","d3","scientific visualization"],"title":"How can slimemolds compute shortest paths?","type":"post"},{"authors":[],"categories":[],"content":"Table of Contents The setup Sensor data probing Prometheus Grafana The build During the COVID pandemic all of us had to work from home. The rapid change from work being at the office now being completely at home came with many challenges such as work-life balance, good ergonomics and ensuring enough exercise to keep your body (and mind) healthy. One thing that gets less attention is the quality of the air your breath. It is well known that increased levels of C02 can reduce cognitive functioning. Increase in fine and coarse dust particles can lead to pulmonary issues and so on. For some time I wanted to get some grip on my local air quality but wasn’t really happy with the options out there for several reasons. First, many sensors do not offer measuring different measures together, for example some sensors may measure temperature and humidity, but not fine dust particles or C02 (or take any combination of the 3). Second, I want to be in control of my own data; I don’t want an attached online service be it free or not, I want to own and export the data. Third, the air quality monitor needs to connect over WiFi for easy interfacing.\nFew weeks ago my interest sparked again after looking at some air filters that IKEA offers and I started exploring the world of air quality monitors. I ended on a DIY solution from a company called AirGradient. They offer a DIY solution that measures C02, temperature, humidity, fine and coarse dust particles. I decided to place an order for PCBs and sourced the parts (they also offer ready made units or kits).\nThe following will describe the build, WiFi connection and hooking it up to prometheus on my server to probe and store the data (similar to Jeff Geerling’s write-up).\nDealing with the different components in this setup was a bit overwhelming; it required combining different (very) mature programs. Although I am not the first to trot in the river of home monitoring, I hope this helps some future person (or me) navigate the space a bit better. It is by no means a complete guide. I will be setting this system up with my shiny new server running TrueNAS Scale (more on that at a different time).\nThe setup The system consists of three components (12):\nAirquality metrics are collected by the airgradient unit C02 Temperature \u0026amp; humidity PM02 and PM10 (dust particulates) The data is read from the airquality monitor and pushed to a data logger (prometheus) The data is visualized as a dashboard (grafana) Abstract layout of the different systems involved Sensor data probing Airgradient provides a github repo with code for reporting on the various air quality metrics. By default it can push to an external dashboard hosted by airgradient. However, since I want to self-host, we have to edit the code a bit. In order to expose the sensor data, we have to do two things:\nSetup a server Write handlers for: Payload Not handles requests To setup the server, we have to download and include the ESP8266 web server to serve the sensor data. Next, we advertise the data as a json file. The following edits are added to the code to achieve this.\n//... #include \u0026lt;ESP8266WebServer.h\u0026gt; // setup server const int port = 80; ESP8266WebServer server(port); String createPayload(){ // ignore data if it possess negative values return \u0026#34;{\\\u0026#34;wifi\\\u0026#34;:\u0026#34; + String(WiFi.RSSI()) + (Co2 \u0026lt; 0 ? \u0026#34;\u0026#34; : \u0026#34;, \\\u0026#34;rco2\\\u0026#34;:\u0026#34; + String(Co2)) + (pm25 \u0026lt; 0 ? \u0026#34;\u0026#34; : \u0026#34;, \\\u0026#34;pm02\\\u0026#34;:\u0026#34; + String(pm25)) + (TVOC \u0026lt; 0 ? \u0026#34;\u0026#34; : \u0026#34;, \\\u0026#34;tvoc_index\\\u0026#34;:\u0026#34; + String(TVOC)) + (NOX \u0026lt; 0 ? \u0026#34;\u0026#34; : \u0026#34;, \\\u0026#34;nox_index\\\u0026#34;:\u0026#34; + String(NOX)) + \u0026#34;, \\\u0026#34;atmp\\\u0026#34;:\u0026#34; + String(temp) + (hum \u0026lt; 0 ? \u0026#34;\u0026#34; : \u0026#34;, \\\u0026#34;rhum\\\u0026#34;:\u0026#34; + String(hum)) + \u0026#34;}\u0026#34;; } void sendPayload(){ String payload = createPayload(); server.send(200, \u0026#34;application/json\u0026#34;, payload); }; void handleNotFound(){ server.send(404, \u0026#34;text/plain\u0026#34;, \u0026#34;Not Found\u0026#34;); }; // setup server void setup(){ // ... other stuff // setup server server.on(\u0026#34;/metrics\u0026#34;, sendPayload); server.onNotFound(handleNotFound); server.begin(); } // edit loop to process events void loop { // ... server.handleClient(); // process on events } Prometheus For prometheus the airgradient unit has to expose a `/metrics` url. I modified the airgradient code to expose the sensor values which can then be read by prometheus. Getting prometheus installed was easily done through the TrueNAS interface, however, it was completely unclear how to load the metrics into the interface. When prometheus is booted up, you are greeted with a rather blank looking interface. There is a command-like prompt that you can probe. I assumed initially that the interface would allow me to point to a particular url to fetch the data. This wasn’t the case (or at least I was not able to figure it out).\nWith TrueNAS, you can smoothly install apps and quickly toggle some settings to configure a package. However, when things become more involved, I find the system a bit limiting. For example, the tutorials on Prometheus requires one to edit a config json file to setup where it can fetch data from. Inside the TrueNAS interface …","date":1686039208,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1686039208,"objectID":"8af3803b5ae70bab899e4fe22e3c47c4","permalink":"https://cvanelteren.github.io/post/air-quality-monitor/","publishdate":"2023-06-06T10:13:28+02:00","relpermalink":"/post/air-quality-monitor/","section":"post","summary":"Table of Contents The setup Sensor data probing Prometheus Grafana The build During the COVID pandemic all of us had to work from home. The rapid change from work being at the office now being completely at home came with many challenges such as work-life balance, good ergonomics and ensuring enough exercise to keep your body (and mind) healthy.","tags":[],"title":"Air Quality Monitor","type":"post"},{"authors":[],"categories":["Wowchemy"],"content":"Table of Contents Site 2.0 Goals Customizing a block Concluding statements Having a web-pressence is excellent for you to create a portfolio, for people to get in contact with your, or share some randoms thoughts on your favorite topic. Years ago I was on the journey to create a webpage, but was quickly sucked into the endless possibilities of web design. Should I go for Vue.js, REACT, or maybe a different web programming language such as svelte or supersets of javascript such as typescipt. Possibilities are endless, but for those starting out it is a daunting undertaking.\nEnter website generators that take away the initial pain of designing layouts for websites. These generators provide a batteries included approach to the web, offering you a landing page with some optional widgets that gets you started on creating a personalized corner of the web. I too started out in this manner. Years ago, I wanted a web page that would help reflect my academic endeavors. The portfolio would need to consist of talks, links to slides and or papers. Hugo academic was the generator I used for web design. For years Hugo academic work perfectly well. However, as time passed my page began to feel stale and I wanted to display something more exciting on my page. Websites become more capable of running full fledged apps and more and more standalone software was pushed to have a web component. I felt like I was left behind. You see, using a generator kicks off the process of getting a website. However, it did not gave me insights in how the website was generated. I still felt like I was stuck at square one. As such I slowly began to interface with the code that was generated. I started first with customization and later on created a site navigator with networks in javascript. I was starting to web design!\nAll things changed, however, when Hugo Academic was re-branded to Wowchemy. The change in name was reflected with a change in design. Every now and again when I wanted to write a new post, my website would be faced with upgrading issues. Especially since my code base originated from Hugo Academic. My need for customization grew and grew, but my frustration with the process of wowchemy did too. I am currently faced with a dilemma; I either decide to leave the framework behind, and create something from scratch or I figure out how to effectively interface with wowchemy such that I can work with it more pleasently.\nSite 2.0 Enter site 2.0; on the surface I does not look any different from my old website except some rounded corners here and there. Under the hood, however, I am able to more deeply change the feel of the webpages.\nGoals First, I wanted to change the look and feel of some widgets on the web page. Wowchemy calls these nowadays “blocks”. The process of changing these pages is a bit ill-documented so I am here to outline what my current understanding is of how wowchemy blocks can be modified to your hearts desire. I started out by just plain googling and found a post by A.J. Campell which was greatly helpful and I copied his landing design (here). But let’s first decide on some goals.\nI want to understand how I can modify the look and feel of my website I want to be able to control and extend the look and feel of my website Note 2 is implied by 1 but is not necessary a consequence of 1.\nCustomizing a block A web page consists of different elements that can be blocked by `divs`. Wowchemy organizes a webpage with widgets called blocks. The blocks are pre-defined views of content such as a portfolio, landing page, how posts are viewed (you get the drift). To customize a block we need to create a new directory from the root folder of our site as\nmkdir -p layouts/partials/blocks/v1 I don’t know why they called it v1, but it implies that they are going to change this in the future again (and I will probably write a post about it again). Now the reasoning is as follows, when you build your site, wowchemy pulls default templates from repos and puts them in the public folder which constitutes your website. If a local path if present, the local edit will take precedence over the default template. You will override the template. In past iterations of wowchemy this process was under `./layouts/partials/widgets/`, and the structure of the go code inside these folders was also different. At the time over writing for version v5.7, the blocks structure is what should be aimed for. One can take the default templates, and edit the html files to change the look and feel of the website, and one can also create new blocks to extend your website: mission accomplished.\nConcluding statements This is a pretty short post with a seemingly simple statement. However, from the user perspective it was a little tricky figuring this out. My website was working before with edits using and older version of wowchemy. Every X updates it seems like the updates break things that need not have fixing. It would be nice if their documentation is edited to walk …","date":1684506884,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1684506884,"objectID":"2bb97dcb192aaa7ddf2c9c87124341f5","permalink":"https://cvanelteren.github.io/post/customizing-wowchemy/","publishdate":"2023-05-19T16:34:44+02:00","relpermalink":"/post/customizing-wowchemy/","section":"post","summary":"Fixing some annoyances on my website","tags":[],"title":"Customizing Wowchemy","type":"post"},{"authors":[],"categories":null,"content":"A friend and I walked over 100 KM on arguably one of the prettiest walked so far. We walked the trail in reverse starting in La Roche-en-Ardenne (Belgium) moving towards Kautenbach Luxembourg in about 6 days.\n","date":1682924400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682924400,"objectID":"9c5ea4014aaa65a078adb74e5b41de32","permalink":"https://cvanelteren.github.io/talk/walking-the-eislek-trail/","publishdate":"2023-05-19T16:34:21+02:00","relpermalink":"/talk/walking-the-eislek-trail/","section":"event","summary":"A friend and I walked over 100 KM on arguably one of the prettiest walked so far. We walked the trail in reverse starting in La Roche-en-Ardenne (Belgium) moving towards Kautenbach Luxembourg in about 6 days.","tags":["Hiking"],"title":"Walking the Eislek Trail","type":"event"},{"authors":[],"categories":[],"content":"","date":1659103236,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659103236,"objectID":"08fa6b115558b1b8709939cbb10f74c8","permalink":"https://cvanelteren.github.io/publication/metastability2022/","publishdate":"2022-07-29T16:00:36+02:00","relpermalink":"/publication/metastability2022/","section":"publication","summary":"Abrupt, system-wide transitions can be endogenously generated by seemingly stable networks of interacting dynamical units, such as mode switching in neuronal networks or public opinion changes in social systems. However, it remains poorly understood how such `noise-induced transitions' are generated by the interplay of network structure and dynamics on the network. We identify two key roles for nodes on how tipping points can emerge in dynamical networks governed by the Boltzmann-Gibbs distribution. In the initial phase, initiator nodes absorb and transmit short-lived fluctuations to neighboring nodes, causing a domino-effect making neighboring nodes more dynamic. Conversely, towards the tipping point we identify stabilizer nodes whose state information becomes part of the long-term memory of the system. We validate these roles by targeted interventions that make tipping points more (less) likely to begin or lead to systemic change. This opens up possibilities for understanding and controlling endogenously generated metastable behavior.","tags":[],"title":"An information theory perspective on tipping points in dynamical networks","type":"publication"},{"authors":[],"categories":null,"content":"","date":1655305200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655305200,"objectID":"7050eb76334567d8dd0b6541b4b59d26","permalink":"https://cvanelteren.github.io/talk/an-introduction-to-complex-systems/","publishdate":"2022-06-12T09:44:16+02:00","relpermalink":"/talk/an-introduction-to-complex-systems/","section":"event","summary":"How can we view natural systems as a whole?","tags":[],"title":"An introduction to complex systems","type":"event"},{"authors":[],"categories":[],"content":"\u0026lt;!DOCTYPE html\u0026gt; Table of Contents Introduction The problem Step 1: Reaching the target area. Step 2: Determining the max height Finding the trajectory with the max height. Reflections and conclusions Introduction Over the years I have grown quite fond of solving riddles. There is something thrilling about reasoning through a problem and finding non-trivial properties about seemingly trivial things. To me programming gives a similar experience; by using the tools of a programming language words are strung together to provide sentences that can be used to solve a real-world problem like finding the most efficient route between A or B, find the minimum state of a system moving over an energy landscape, sort files in a folder using a particular regex and so on.\nWithout knowing it, my interest for riddles was hidden in programming. Programming to me was a tool to reason through complex logical problems. Programming allowed me to verbalize the complex logical problem. This verbalization is very important. A few years ago, I attended a book reading from an author who expressed that speaking a language also invokes a form of thinking, and by speaking a different language your thinking would also be bend and used in a different way. After programming many years in python, and matlab. I have gotten a little bored of the way python speaks. I wanted to think differently.\nThen last christmas, I read a blog that used the advent of code to learn a new programming language. The advent of code is an initiative that poses different programming exercises of increasing difficulty. The idea sparked interest in me and I set out some months ago to satisfy my need to learn a new language and attempt to solve some difficult riddles.\nThe advent code is an initiative that started in 2015. It starts 25 days before christmas with a new programming exercise every day leading up to christmas. The difficulty of the problem increases as the christmas approaches.\nIn this particular post, I will focus on day 17 of the advent of code 2021 as it beat my but and it need not have to!\nThe problem The theme of the advent of code 2021 is helping Santa’s elves finding a key that was dropped in the ocean. On day 17, you are trying to shoot a probe from you submarine such that it hits a particular area (see figure below). The probe is shot with a velocity in the x, and y-direction. Each simulation step, the x, and y-velocity decreased by 1 where the x-velocity has a minimum of 0 and y-velocity can grow to -infinity. The aim is to find a trajectory that hits the target and for which the y-position is maximized. Seems easy right?\nShooting a probe from the start to the target. Example trajectories are shown. In green the trajectory is maximizes the height, black minimizes the height, and orange maximizes the x-distance. What ended up being difficult is that it is not trivial to determine the final position of the probe given an initial velocity. Let’s say that the probe has velocity $V=(v_x^0, v_y^0)$. The position of the probe at time $t$ is determined as\n\\begin{equation} P(t) = \\left[ \\begin{aligned} x \\\\\\ y \\end{aligned} \\right] = \\left[\\begin{aligned} \u0026amp;\\begin{cases} \\sum_{t=1}^{v_x^0} v_x^0 - t \u0026amp; \\text{ if } t \u0026lt; v_x^0\\\\\\ \\sum_{t=1}^{v_x^0} t \u0026amp; \\text{otherwise} \\end{cases}\\\\\\ \u0026amp; \\sum_{t=1}^{t’} v_y^0 - t\\\\\\ \\end{aligned} \\right] \\end{equation}\nIn the continuous case, any trajectory which intersects with the target will be a valid trajectory. However, in the discrete scenario, the probe may overshoot the target. That is, there may be a gap which for which between $t$ and $t+1$ the probe misses the target. I decomposed the problem in two steps. First, we need to figure what properties the trajectories that hit the target have. Second, we focus on finding the trajectory that maximizes the height of the trajectory.\nStep 1: Reaching the target area. Initially I had the intuition of plotting the dynamics of the of the velocity over time. The distance traveled in the x-direction takes the form of a sum of integers. Luckily, for the sum of integers there is a nice expression: the Gauss sum which takes the form\n$$ \\sum_{i = 1}^n i = \\frac{1}{2} n (n + 1).$$\nTo see why this is, write down a sequence of positive integers, e.g. $1 + 2 + 3 + 4$. Next, take pairs form the outside in and notice how the sum of these pairs are equal $n+1$. For example, the sum of $(1,4) = n + 1$ is equal to the sum of $(2,3) = n - 1 + 2 = n + 1$ (by moving “inwards”). Since we have $\\frac{1}{2}n$ of these pairs Gauss deduced a nice closed-formed solution for the sum. This property is pretty nifty to use in the computation of the distance, as it prevents a possible large sum in determining the distant traveled. Our distance computation therefore becomes\n\\begin{equation} P(t) = \\left[\\begin{aligned} \u0026amp;\\begin{cases} \\frac{1}{2} ((v_x^0) (v_x^0 +1) - (v_x^0 - t)(v_x^0 - t + 1))\u0026amp; \\text{ if } t \u0026lt; v_x^0\\\\\\ \\frac{1}{2} v_x^0 (v_x^0 + 1) \u0026amp; \\text{otherwise} \\end{cases}\\\\\\ \u0026amp; …","date":1651345866,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651345866,"objectID":"c24549c815aee106c2b7884ce430cfd7","permalink":"https://cvanelteren.github.io/post/advent17/","publishdate":"2022-04-30T21:11:06+02:00","relpermalink":"/post/advent17/","section":"post","summary":"\u003c!DOCTYPE html\u003e Table of Contents Introduction The problem Step 1: Reaching the target area. Step 2: Determining the max height Finding the trajectory with the max height. Reflections and conclusions Introduction Over the years I have grown quite fond of solving riddles.","tags":[],"title":"Riddles \u0026 programming","type":"post"},{"authors":["Casper van Elteren"],"categories":[],"content":"\u0026lt;!DOCTYPE html\u0026gt; Table of Contents What are header files? Cython pure mode Benchmarks Summary In coding there is a trade-off between writing abstract code, and high performant code. This trade-off is often embodied in different languages. For example, python is considered to be an abstract language whereas C++/C is considered a low level language. Abstract languages allows for rapid prototyping while hiding away the implementation details in packages or modules. A key strategy for abstract languages is providing high level interfaces for low-level implementations allowing for a “best of both worlds” scenario, improving the performance of the abstract language. However, there are cases in which the code written is within the ecosystem of the abstract language, yet the performance needs to increase. For python there are ways to improve the performance of python code. For example, one could use Numba to utilize the Just-In-Time-Compiler (JIT) or use a specialized compiled version of python such as pyston. Cython offers yet another way by compiling special “pyx” files into a shared object that can then be interfaced with from python, creating a hybrid language between C/C++ and python (see my prior post on cython templates). Cython has the advantage of leveraging the existing python stack, and enhancing it with faster run time. It works specifically well if the original python code contains a lot of for loops that cannot be optimized away by other means. Although the cython ecosystem has matured quite a lot in recent years, it requires knowledge from other languages to implement algorithms efficiently. This creates a gap for python developers wanting to have a bit more performance.\nA more recent development is compiling existing python code in “pure” mode in cython. In pure mode, the original code is left untouched (i.e. the .py file) and the performance enhancing code is written in a special header file (.pxd). This has the advantage for increasing the performance of existing python code while retaining the compatibility with non-cython users. I recently implemented the forceatlas2 layout in cython’s pure mode to gain a 400 percent increase over the traditional python code.\nIn this post, I wish to introduce the reader to cython’s pure mode and test some simple benchmarks to see what kind of performance boosts we can have.\nWhat are header files? In traditional compiled languages such as C/C++ the source code is split into the implementation and header files. Header files can be thought of as the index of a book, whereas the source files can be thought of the actual content of a book’s chapter. The header file instructs the compiler (and the programmer) on what is present in the implementation and how external code can interface with it. In python, the concept of source and header file does not exist. The closest thing I can think of is showing what kind of class properties a class has. Something similar to,\nclass Chicken: mass = 0 height = 0 def __init__(self, name): self.name = name Karl = Chicken(\u0026#34;Karl\u0026#34;) print(f\u0026#34;My name is {Karl.name} and I weight {Karl.mass} kg\u0026#34;)\nMy name is Karl and I weight 0 kg Here, the variables mass and height are defined before the class is inititalized. It tells the programmer that the class Chicken has two class properties mass and height. A python programmer would put these variables in the class constructor as these are individual traits. The use of init function is general is not the same as this use case. For the init function may transform the values passed to the object, whereas here mass and height are clear class traits.\nCython pure mode Cython’s pure mode takes an existing python file and augments it by an header file. Often this header file has the same name as the original python file but with the extension .pxd (or definition file). Let’s take an example function. Assume we want to implement a matrix dot product. A naive implementation will look something like this:\n#file: dot.py import numpy as np def dot(A: np.ndarray, B: np.ndarray) -\u0026gt; np.ndarray: m, n = A.shape k = B.shape[1] assert n == B.shape[0], \u0026#34;matrices A and B are not alligned\u0026#34; output = np.zeros((m, k)) for idx in range(m): for jdx in range(n): for kdx in range(k): output[idx, kdx] += A[idx, jdx] * B[jdx, kdx] return output Testing the code for speed we can confirm that this dot product is quite slow.\nimport numpy as np A = np.eye(10) B = np.eye(10) %timeit -n10 -r10 dot(A, B) 595 µs ± 301 µs per loop (mean ± std. dev. of 10 runs, 10 loops each) In comparison the numpy implementation is about 200 times faster\nimport numpy as np %timeit -n10 -r10 np.dot(A, B) The slowest run took 26.21 times longer than the fastest. This could mean that an intermediate result is being cached. 7.48 µs ± 16 µs per loop (mean ± std. dev. of 10 runs, 10 loops each) Let’s say we really like our dot implementation, but we wish the python code was a bit faster. For cython pure mode, we would need to augment the py file with pxd file. …","date":1647354466,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647354466,"objectID":"608d5d6724bf67e53cd206e29753e505","permalink":"https://cvanelteren.github.io/post/cython_pure/","publishdate":"2022-03-15T15:27:46+01:00","relpermalink":"/post/cython_pure/","section":"post","summary":"\u003c!DOCTYPE html\u003e Table of Contents What are header files? Cython pure mode Benchmarks Summary In coding there is a trade-off between writing abstract code, and high performant code. This trade-off is often embodied in different languages.","tags":["coding","cython","cpp","chickens"],"title":"Speeding up python code with cython pure","type":"post"},{"authors":[],"categories":null,"content":"","date":1644589800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644589800,"objectID":"a0f93b38156d5c7601065fdc2720bbf2","permalink":"https://cvanelteren.github.io/talk/information-flows-in-complex-systems/","publishdate":"2022-02-04T09:09:54+01:00","relpermalink":"/talk/information-flows-in-complex-systems/","section":"event","summary":"Tackling complex emergent behavior from an information perspective.","tags":[],"title":"Information flows in complex systems","type":"event"},{"authors":[],"categories":[],"content":" \u0026lt;!DOCTYPE html\u0026gt; Table of Contents Introduction TLDR Starting the D3 Journey Goals Setting up an environment Understanding D3s design Making the first plot Adding interactivity Designing mouseOver Designing mouseLeave Designing mouseMove Bonus: adding a trend line Putting the pieces together Summary Honorable mentions Introduction Data visualization is a crucial tool to gain insights into data. For data aficionados it is a difficult task to find the balance between visual prowess and meaningful data visualization. My visualization journey started in matlab many years ago. Matlab’s visualization tool are powerful and are apart of many scientist’s and engineers toolkit. For static plots, matlab’s toolkit is excellent. However, over the years I got a deeper desire for interactive tools and animations. Although this is very much possible, the nature of matplotlib’s ecosystem made it a bit awkward in dealing with complicated animations. As years passed, I slowly transitioned to the python scientific stack which prompted me to switch to matlab’s equivalent matplotlib. As python gained providence among the scientific community, so did the need for interactive visualizations. The notebook culture grew, and so did the ports to allow matplotlib to be visualized in interactive contexts. Matplotlib has served me well for many years; having its roots in matlab’s plotting ecosystem, it moved more and more to object orientated design familiar to many pythonistas. However, I was still rather unhappy with sharing matplotlib code. Preferable, I would like to host the visualizations on a website where a user can interact and explore with the data. For the python ecosystem, this always requires a python interpreter running on a server somewhere. I was aware of D3 for many years, and was rather impressed by the visuals that it generates. After doing several tutorial online over the years, I felt rather empty and left with a lack of understanding. Many tutorial allow you to copy paste, but not understand how the visualization work under the hood. In the year 2022 it is finally time to pick-up on my previous attempts to learn D3 (and javascript). The focus will be for matplotlib users that are interested in learning D3. I assume that the reader is familiar with base programming. I am not too familiar with javascript, and as such learning that will be a secondary goal for me. In the end, I aim to make a graph visualization tool with the use of D3. In this post, I will guide the reader in my process and share my thoughts on how the code works internally. For background knowledge, I assume the reader is familiar with matplotlib and generally programming.\nTLDR I wrote down some thoughts on making plots in D3 by using my knowledge from matplotlib. The code can be found at http://cvanelteren.github.io/post/d3/first_plot.js The final plot is given below in 2.6.\nStarting the D3 Journey Goals Familiarize with D3 ecosystem Make simple line plot Make simple scatter plot Setting up an environment In order to work with d3, it is possible to install it locally with `npm` (e.g. `npm install -g d3`) or use it directly from the Contend Delivery Network (CDN). This latter option effectively acts as an import statement that a device connected to the internet could use. I will use the latter option as the target is running visualizations online. For more information one could follow this tutorial. for setting it up locally. A typical modern website consists of three components: the webpage content, the looks, and possible external scripts. The workhorse for modern websites is Hyper Markum Language (HTML); it defines the basics structure of a webpage. We will be writing minimal HTML in this post. All that is necessary to know is that HTML is the “core” of how website determines where what goes. Javascript can be used to dynamically serve content by interacting or writing HTML. How a website looks is controlled with Cascading Style Sheets or CSS. The files are used to change things like color, size of an image and so on. Again CSS is not the focus here, it is merely important to be aware of the base components as D3 will interact with them. Lastly, javascript is in essence the programming for the web. I am not an expert in any web-based development and as such I would recommend elsewhere for learning the ins and outs of javascript. My goal here is to make pretty plots and use my extensive programming experience to just figure out the syntax.\nA minimal HTML file for D3 would look like:\n\u0026lt;!-- file: hello_d3.html --\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- get module from cdn --\u0026gt; \u0026lt;script src=\u0026#34;https://d3js.org/d3.v6.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- or load it locally --\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026#34;../d3.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; \u0026lt;!– write your d3 code here.. –\u0026gt; \u0026lt;script src=\u0026#34;./first_plot.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; You can view this file by opening this file in a browser (e.g. `firefox hellod3.html` or equivalent for the browser you are …","date":1644340175,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1644340175,"objectID":"f94f92f1cdd130ca0480a6bd165d9a91","permalink":"https://cvanelteren.github.io/post/d3/","publishdate":"2022-02-08T18:09:35+01:00","relpermalink":"/post/d3/","section":"post","summary":"Bootstrapping myself into the web","tags":["D3"],"title":"From matplotlib to D3","type":"post"},{"authors":[],"categories":null,"content":"","date":1643360400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643360400,"objectID":"c1cbff4f730f15bd5a67c114ca214e95","permalink":"https://cvanelteren.github.io/talk/network-geometry-of-social-networks/","publishdate":"2022-02-04T09:12:42+01:00","relpermalink":"/talk/network-geometry-of-social-networks/","section":"event","summary":"Understanding weak ties from the network geometry","tags":[],"title":"Network geometry of social networks","type":"event"},{"authors":[],"categories":[],"content":"Abrupt, system-wide transitions can be endogenously generated by seemingly stable networks of interacting dynamical units, such as mode switching in neuronal networks or public opinion changes in social systems. However, it remains poorly understood how such `noise-induced transitions’ are generated by the interplay of network structure and dynamics on the network. We identify two key roles for nodes on how tipping points can emerge in dynamical networks governed by the Boltzmann-Gibbs distribution. In the initial phase, initiator nodes absorb and transmit short-lived fluctuations to neighboring nodes, causing a domino-effect making neighboring nodes more dynamic. Conversely, towards the tipping point we identify stabilizer nodes whose state information becomes part of the long-term memory of the system. We validate these roles by targeted interventions that make tipping points more (less) likely to begin or lead to systemic change. This opens up possibilities for understanding and controlling endogenously generated metastable behavior.\nFor more information, please see the full article: https://arxiv.org/abs/2207.14016\n","date":1642069207,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642069207,"objectID":"3a87500b3ccc39327bea05df93cc61d9","permalink":"https://cvanelteren.github.io/project/metastability/","publishdate":"2022-01-13T11:20:07+01:00","relpermalink":"/project/metastability/","section":"project","summary":"Explaining metastable behavior using data-driven methods","tags":[],"title":"Metastability","type":"project"},{"authors":[],"categories":[],"content":"\u0026lt;!DOCTYPE html\u0026gt; One of the traditional models that come up time and time again is the Ising model. Originally developed to study ferromagnets, the model is considered one of the simplest models that exhibits “complex” behavior and has been applied to study a variety of phenomena such as opinion dynamics, neural dynamics, segregation, and even criminal systems.\nThe Ising model consists of a collection of nodes $S = \\{ s_1, \\dots, s_n \\}$ which contains a alphabet $X = \\{-1, 1 \\}$. That is, each “vertex” or “node” contains a “spin” or binary state representing up or down, opinion A or B, firing or non-firing.\nThe system dynamics of the Ising model occurs traditionally by Glauber update. Each time step $t$ a spins is chosen according to some function $g(S)$. Traditionally, $g(S)$ is chosen to be uniform over the nodes in the system. The energy of the sampled node is then computed compared to its opposite state. That is, a proposal state is drawn uniformly from $X$ and “accepted” using Metropolis-Hasting sampling\n\\begin{equation} \\begin{aligned} A(s_i \\to s_i’) = \\frac{ p(s_i’) }{ p(s_i) } = \\Bigg \\{ \\begin{aligned} \\exp( -\\beta \\Delta E) \u0026amp; \\textrm{ if } \\Delta E \u0026lt; 0 \\\\ 1 \u0026amp; \\textrm{ otherwise }.\\\\ \\end{aligned} \\end{aligned} \\end{equation}\nThe difference in energy is given as\n$$ \\Delta E= \\mathbb{H}(S’) - \\mathbb{H}(S)$$\nwith $\\mathbb{H}(S) = - \\sum_{ij} J_{ij} s_i s_j - \\sum_{i} h_i s_i$, where $h_i$ represents some external magnetic field.\nFor a single spin difference results in $$ \\Delta E= \\mathbb{H}(s_i’) - \\mathbb{H}(s_i)$$ as the difference in energy for all other spins $s_j \\in S$ cancels.\nThere are, however, different update schemes. One of which is the Kawasaki dynamic. In this way, the magnetization of the system remains constant. That is, each node gets assigned a state and does not change as a function of time. Each simulation step, a radomly chosen spin may swap its state with its neighbor. That is, a spin $s_i$ may choose its next state $s_i’$ by swapping its state with some neighbor $s_j$ such that $s_i’ = s_j$ and $s_j’ = s_i$ with transition $A(s_i, s_j \\to s_i’, s_j’)$\n\\begin{equation} \\begin{aligned} A(s_i, s_j \\to s_i’, s_j’)_{\\textrm{Kawasaki}} = \\frac{ p(S’) }{ p(S) } = \\Bigg \\{ \\begin{aligned} \\exp( -\\beta \\Delta E) \u0026amp; \\textrm{ if } \\Delta E \u0026lt; 0 \\\\ 1 \u0026amp; \\textrm{ otherwise }.\\\\ \\end{aligned} \\end{aligned} \\end{equation}\nNote that here the $\\Delta E$ is computed over a proposed state $S’$ where the states of $s_i$ and $s_j$ are swapped.\nKawasaki dynamics ensures that the average magnetization remains constant. The fraction of positive spins will remain constant over time. In contrast, for Glauber dynamics the ratio between positive and negative spins may change, depending on the temperature $\\beta = \\frac{1}{T}$ in the system. For $T \u0026lt; T_{C}$ tends to magnetize the system in Ising spin systems with Glauber dynamics and Metropolis-Hasting upates. This means that if the system starts with an equal propotion of positive and negative spins, the system will tend to a state in which all spins are aligned. For Kawasaki dynamics, the spins “move” through the space. Clustering will occur, similar to the Ising dynamics with Glauber updates, but no majority will win. Kawasaki dynamic can therefore be used to study things like segregation, gang-turf demarcation, echo-chambers and so on. A difference between the two dynamics is shown can be seen in fig. 1 with $T = 1$ and for a 4 state potts model in fig. 2.\nGlauber versus Kawasaki dynamics for a Ising model on regular 2D lattice of 64x64 spins. Glauber versus Kawasaki dynamics for a 4-state Potts model. ","date":1636988837,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1636988837,"objectID":"dc3fc83dea2a26fa2a1e8b9142cf73d6","permalink":"https://cvanelteren.github.io/post/kawasaki/","publishdate":"2021-11-15T16:07:17+01:00","relpermalink":"/post/kawasaki/","section":"post","summary":"\u003c!DOCTYPE html\u003e One of the traditional models that come up time and time again is the Ising model. Originally developed to study ferromagnets, the model is considered one of the simplest models that exhibits “complex” behavior and has been applied to study a variety of phenomena such as opinion dynamics, neural dynamics, segregation, and even criminal systems.","tags":[],"title":"Kawasaki dynamics","type":"post"},{"authors":[],"categories":[],"content":"\u0026lt;!DOCTYPE html\u0026gt; Table of Contents What are templates? Templates in Cython Let’s get freaky Summary Cython offers to write high performing (compiled) code with python and C++/C side-by-side. For a python programmer, cython can be used to replace functions with c-like functions. The cython documentation shows some clear examples on how a python program could be transformed into a statically compiled program. The docs also highlight how to provide templated code. For simple templates this is clear, but I found that some code is more difficult to template.\nThis short article may form as a guided tour towards binding templated code to cython.\nWhat are templates? Python is an interpreted language. This means that when code is run, the interpreted converts the code to byte compiled code. It goes through the code line for line and converts it “on the fly” to something the computer can understand. In contrast, C/C++ are compiled languages. Prior to execution of the program a compiler translates the code into a binary that the machine can understand. After which the binary can be executed. Due to the statically defined nature, C++ needs to deal with shared code that can act on multiple types. One way to achieve this is through function overloading; functions with the same name are written but different input (types) such that calling the function with different types will execute the correct function associated with those inputs. This, however becomes quite tedious and obsolete when considering templates.\n// in C++ types need to be considered. // Some have implicit casting from one type to another, // In general it is better to be more exact. int return_square(int x){ return x * x; } // overloading return_square with different input type double return_square(double x){ return x * x } In C++ template functions or classes can be considered a blueprint. This allows to share the logic for a particular function that may operate on different types such as ints, floats, doubles or some other more complicated abstract classes.\nThe general format of templated functions looks like\ntemplate \u0026lt;class T\u0026gt; T return_square(T x){ return x * x; } A general (undefined) type T is used here to write a template to the function. When using the function the type can either be inferred from the input by the compiler or explicitly set:\nint main(){ int x = 3; int y = return_square\u0026lt;int\u0026gt;(x); // returns 9 double k = 3; auto z = return_square(k); // assigned 9.0 to double z } Templates in Cython In Cython, template functions work the same way as in C++ with slightly different syntax. The use of templates in Cython can be used to wrap C++ only; it is not possible to write templated code directly in cython unless you use fused types which has some limitations. I won’t go into this further in this post.\nThe general form of a Cython template is\n# inside a pxd or pyx file cdef from extern \u0026#34;return_square.h\u0026#34;: T return_square[T](T x) The `extern` keyword is the same as in C++/C which tells the compiler that there exists some external function that is not defined in the current source file. In this case we refer to a header file “return\\_square.h” that contains our C++ template above. The general type T is defined in square brackets and forms the same function as `template` above. The rest is the same as a template in C++.\nLet’s get freaky Now the example above is sort of what is avaiable on the cython docs. Where it becomes undocumented for me was when I wanted to wrap `std::inserter` from the standard library in C++. For those of you not familiar, `std::inserter` is a wrapper for the function `std::front_inserter` which allows you to insert elements in to an iterable such as a set or a vector. From the C++ docs we read\n//Defined in header \u0026lt;iterator\u0026gt; template\u0026lt; class Container \u0026gt; std::insert_iterator\u0026lt;Container\u0026gt; inserter( Container\u0026amp; c, typename Container::iterator i ); Wrapping this function only takes a single template parameter `Container`, however the function takes two argument which introduces another template parameter `Container::iterator`. Initially I was hoping that Cython would somehow “know” that providing two templates variables would allow the function to be bound correctly. That is, I started with:\ncdef extern from \u0026#34;\u0026lt;iterator\u0026gt;\u0026#34; namespace \u0026#34;std\u0026#34; nogil: void insert_iterator[Container, Iter](Container \u0026amp;c, Iter i) this did not compile however. The compiler stated that the templated function could not be found, as the header merely states that there is only one template parameter.\nWrapping C++ classes in cython is also possible. Since there are not that many options to try, I attempted the following:\ncdef extern from \u0026#34;\u0026lt;iterator\u0026gt;\u0026#34; namespace \u0026#34;std\u0026#34; nogil: cdef cppclass insert_iterator[T]: cppclass iterator[T]: pass insert_iterator(T \u0026amp; c, iterator[T] i) This compiled perfectly! The magic here, essentially is that I treat the function as a class that has additional properties defined. That is, I convince the compiler that the iterator exists and it is …","date":1633361687,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633361687,"objectID":"52d9cb2e46a206eb69bfa9d73be67605","permalink":"https://cvanelteren.github.io/post/cython_templates/","publishdate":"2021-10-04T17:34:47+02:00","relpermalink":"/post/cython_templates/","section":"post","summary":"Become a wrapping master!","tags":[],"title":"Cython templates","type":"post"},{"authors":[],"categories":[],"content":"\u0026lt;!DOCTYPE html\u0026gt; TLDR: I wanted a wireless split keyboard, so I made one. This post outlines the process.\nTable of Contents Introduction Outline ESP32 Matrix scanning Ghosting Key debouncing Changes ESP-Now Mesh interface class Changes Replacing ESP now with BLE mesh Modifier keys Changes Bluetooth Changes Keyboard layers Changes Rotary encoder Taming the KY-040 with decoding Changes LED driver: FastLED Changes OLED Display Changes Deep sleep Changes Battery control Changes Reference PCB layout design Making the layout Edge cut pcb Case design Specialized keys Layer taps One shot modifier keys Leader key Replacing esp_now BLE in a nutshell Integration with BLE keyboard Changes Introduction \u0026lt;2021-06-21 Mon\u0026gt; Mechanical keyboards are somewhat of a dated concept that has gathered some speed in more recent years. Back when computers were first coming out for the public, keyboards had mechanical connections that would allow a current to activate a switch. Then as economics got wind, somehow we got used to membrane keyboards; virtually every office in the world has these membrane keyboards. Compared to mechanical keyboards, membrane keyboards feel more “mushy”. In contrast, mechanical keyboards may have different feel based on the springs or whether the key switch has a noticeable “bump”. They can be clicky or not; the possibility are wild now.\nA few years ago I started following the subreddit on mechanical keyboards. Back then, the community had little options and cherry still had patents on the switches. Cherry MX keys were virtually found in every commercial keyboard on the market. Now, the landscape has changed quite a bit and more and more different types of switches are available.\nWhy do I prefer mechanical keyboards? Mechanical keyboards give a “joy” to typing. Membrane keyboards are fine to type on, but they aren’t fun. Generally my fingers get “tired” after typing on membrane keyboards as the keys feel a bit mushy, i.e. you get no relief when pushing down a key and the key press does not feel crisp.\nAfter following / r / mechanicalkeyboards for a while, I decided to build my own keyboard. Within the community, there is a wide variety of switches and shapes of keyboards available. The one I wanted, an orthonormal keyboard, wasn’t commercially available. Plus I liked the idea of building my own keyboard. In my work, the keyboard is my primary tool and why not key a custom version of it for myself. I ended up building 2 handwired versions of 65 percent with 85 switches in a grid layout. In addition, I modded a MagSafe-inspired cable to it which allowed it to be nice and portable. After every build I told myself : “ This is the last one I’ll build”.\nEnter this blog, where I again tell myself “this is the last one I build!”. What changed? Since I learned about split-style keyboard, I always wanted one. The keyboards I had made so far weren’t. Split would be completely ergonomical, but unfortunately, none (that I know of) exists that are both (a) wireless and (b) split. As always I aimed to high and wanted to emulate the many features that QMK implements. Most importantly, I wanted to get back into writing more low level languages like c++, and I take this project as a nice opportunity to get into c++ again, and work with micro-controllers.\nThis post will serve as my log for building the keyboard. The post will updated as I work on it.\nCore feature targets\nSplit wireless keyboard Hot swappable key sockets Portable, not a full keyboard Battery control OLED display Rotary encoders Outline The keyboard is split; it has two halves. The right and left half will have most of the same “base” functionality. Most importantly, each half needs to scan the matrix to obtain which keys are being pressed. One of the halves will act as a server, the other will act as a client. The server will need the following capabilities\nServer abilities\nRead matrix Setup a bluetooth connection HID Device Mouse emulation Setup connection with client Merge keys pressed and send to bluetooth controller Control LEDs on both client and server Client abilities\nRead matrix Find server and send pressed keys to server Due to the heavier load of the server, I prefer to make the role of who is server and who is client dynamic. That is, with some heuristic (for example deep sleep), the roles may switch to prolong batter life of both units.\nTo give a course overview consider the following picture:\nESP32 \u0026lt;2021-07-12 Mon\u0026gt;- I opted for a micro-controller as this would allow me to prototype without worrying about my electronic skills. The controller needed to have battery control, bluetooth, and preferable an energy efficient screen; I ended up with an esp32.\nThe esp32 is a hybrid chip that has both Wi-Fi and bluetooth capabilities. The esp32 consists of different versions that varies in (mainly) in the number of pins, battery connector, and or screen. The version I ended with (LORA-V2) had a battery connector and a tiny OLED screen.\nThe ecosystem of ESP32 …","date":1625426634,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625426634,"objectID":"ba260f09495dbac5593863c2b24421af","permalink":"https://cvanelteren.github.io/post/splitboard/","publishdate":"2021-07-04T21:23:54+02:00","relpermalink":"/post/splitboard/","section":"post","summary":"Designing and building a splitkeyboard from hardware to firmware!","tags":[],"title":"Splitboard: the bluetooth (split) keyboard","type":"post"},{"authors":[],"categories":[],"content":"\u0026lt;!DOCTYPE html\u0026gt; TLDR: I wanted a wireless split keyboard, so I made one. This post outlines the process.\nTable of Contents Introduction Outline ESP32 Matrix scanning Ghosting Key debouncing Changes ESP-Now Mesh interface class Changes Replacing ESP now with BLE mesh Modifier keys Changes Bluetooth Changes Keyboard layers Changes Rotary encoder Taming the KY-040 with decoding Changes LED driver: FastLED Changes OLED Display Changes Deep sleep Changes Battery control Changes Reference PCB layout design Making the layout Edge cut pcb Case design Specialized keys Layer taps One shot modifier keys Leader key Replacing esp_now BLE in a nutshell Integration with BLE keyboard Changes Introduction \u0026lt;2021-06-21 Mon\u0026gt; Mechanical keyboards are somewhat of a dated concept that has gathered some speed in more recent years. Back when computers were first coming out for the public, keyboards had mechanical connections that would allow a current to activate a switch. Then as economics got wind, somehow we got used to membrane keyboards; virtually every office in the world has these membrane keyboards. Compared to mechanical keyboards, membrane keyboards feel more “mushy”. In contrast, mechanical keyboards may have different feel based on the springs or whether the key switch has a noticeable “bump”. They can be clicky or not; the possibility are wild now.\nA few years ago I started following the subreddit on mechanical keyboards. Back then, the community had little options and cherry still had patents on the switches. Cherry MX keys were virtually found in every commercial keyboard on the market. Now, the landscape has changed quite a bit and more and more different types of switches are available.\nWhy do I prefer mechanical keyboards? Mechanical keyboards give a “joy” to typing. Membrane keyboards are fine to type on, but they aren’t fun. Generally my fingers get “tired” after typing on membrane keyboards as the keys feel a bit mushy, i.e. you get no relief when pushing down a key and the key press does not feel crisp.\nAfter following / r / mechanicalkeyboards for a while, I decided to build my own keyboard. Within the community, there is a wide variety of switches and shapes of keyboards available. The one I wanted, an orthonormal keyboard, wasn’t commercially available. Plus I liked the idea of building my own keyboard. In my work, the keyboard is my primary tool and why not key a custom version of it for myself. I ended up building 2 handwired versions of 65 percent with 85 switches in a grid layout. In addition, I modded a MagSafe-inspired cable to it which allowed it to be nice and portable. After every build I told myself : “ This is the last one I’ll build”.\nEnter this blog, where I again tell myself “this is the last one I build!”. What changed? Since I learned about split-style keyboard, I always wanted one. The keyboards I had made so far weren’t. Split would be completely ergonomical, but unfortunately, none (that I know of) exists that are both (a) wireless and (b) split. As always I aimed to high and wanted to emulate the many features that QMK implements. Most importantly, I wanted to get back into writing more low level languages like c++, and I take this project as a nice opportunity to get into c++ again, and work with micro-controllers.\nThis post will serve as my log for building the keyboard. The post will updated as I work on it.\nCore feature targets\nSplit wireless keyboard Hot swappable key sockets Portable, not a full keyboard Battery control OLED display Rotary encoders Outline The keyboard is split; it has two halves. The right and left half will have most of the same “base” functionality. Most importantly, each half needs to scan the matrix to obtain which keys are being pressed. One of the halves will act as a server, the other will act as a client. The server will need the following capabilities\nServer abilities\nRead matrix Setup a bluetooth connection HID Device Mouse emulation Setup connection with client Merge keys pressed and send to bluetooth controller Control LEDs on both client and server Client abilities\nRead matrix Find server and send pressed keys to server Due to the heavier load of the server, I prefer to make the role of who is server and who is client dynamic. That is, with some heuristic (for example deep sleep), the roles may switch to prolong batter life of both units.\nTo give a course overview consider the following picture:\nESP32 \u0026lt;2021-07-12 Mon\u0026gt;- I opted for a micro-controller as this would allow me to prototype without worrying about my electronic skills. The controller needed to have battery control, bluetooth, and preferable an energy efficient screen; I ended up with an esp32.\nThe esp32 is a hybrid chip that has both Wi-Fi and bluetooth capabilities. The esp32 consists of different versions that varies in (mainly) in the number of pins, battery connector, and or screen. The version I ended with (LORA-V2) had a battery connector and a tiny OLED screen.\nThe ecosystem of ESP32 …","date":1625426634,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625426634,"objectID":"6f1954b02032edf202a95e809be98cb1","permalink":"https://cvanelteren.github.io/project/splitboard/","publishdate":"2021-07-04T21:23:54+02:00","relpermalink":"/project/splitboard/","section":"project","summary":"Designing and building a splitkeyboard from hardware to firmware!","tags":[],"title":"Splitboard: the bluetooth (split) keyboard","type":"project"},{"authors":[],"categories":[],"content":"In a previous post, I created the fastest chicken alive! I implemented a chicken in cpp and provided bindings in cython and python. However, our chicken Carl needs some friends. Today, I will implement a friend for Carl, in another morer niche language called nim; and I will show how nim can produce similarly fast chickens that can be called from python.\nWhat is Nim? From their website:\nNim is a statically typed compiled systems programming language. It combines succesful concepts from mature languages like Python, Ada and Modula\nI am not familiar with the latter two, but I am quite familiar with python and it can be used to solve one of python’s weaknesses: python can be terribly slow for numerical problems.\nWriting nim is similar to other modern languages like rust: it prefers inheritance over composition. However, it does not shy away from using “more” traditional methods. For example, in nim “classes” are called types and types can be composed (preferred) but can also inheret from oneanother. Which allows more ancient programmers like me to be able to use my toolset while also exploring composition more.\nWriting nim looks very similar to python. Variables defined with the var keyword, functions are proc (process), printing is performed with echo, classes / structs are types and so on.\nVariables are typed, however the compiler is often very good at inferring the type you are assigning. This effectively means that defining a variable as\nvar x = 1 var x: int = 1 is the same, and var can be seen as implicitly using the auto keyword from cpp. For more details on nim see their excellent tutorial on the website; let’s start making our chicken friend!\nNim chickens Classes are called types. As want to bind to python, we make use of the nimpy library from nim. Fellow pythonistas should feel right at home\n# import a package as per usual of python import nimpy # types are \u0026#34;classes\u0026#34; # they are similar to structs type Chicken = ref object of PyNimObjectExperimental name: string We have defined our chicken type, the ref object makes sure that our types inherents from the root object that makes sure our chicken can be imported from python. As can be seen from the name, this features is experimental. Functions are readily exportable to python, but types have only recently been added in. Not to worry, it will hopefully improve over time.\nNim implementation Similar, to our previous chicken Carl, we want our chicken to do something\n# on the structs we can define methods proc set_name(self: Chicken, value : string) {.exportpy.}= self.name = value proc get_name(self: Chicken): string {.exportpy.}= self.name proc peck(self: Chicken): void {.exportpy.} = echo \u0026#34;Peck peck!\u0026#34; There is a lot going on in this piece, so let’s step through it. The proc keyword is similar to def in python: it defines our function. Similar to type hinting our return type is given after the :. Nim, similar to other languages like matlab, implictly defines a result variable; return keywords are not necessary and last lines without assignment are automatically put into result. For example\nproc some_test(x: float): float = result = x proc some_test_other(x: float): float = return x proc some_test_another(x: float): float = x are equivalent. The curly brackets indicate compiler directives; {.exportpy.} tells the compiler to make these functions available in our shared object.\nCompilation All that is left to do is to compile our chicken into a shared object and import it.\nnim cpp -d:release --threads:on --app:lib --out:chicken.so chicken.nim and, we are done! This is less boilerplate code than the cython approach. Compared to cython, nimpy is less mature. However, nim can readily interact with native c/cpp. It’s mainly immature in the type export, but I hope that will improve in the future. It does form a nice alternative to more “verbose” cpp; it writes quite similar to python. Just to finish of the end, let’s run our litle chicken\n#file: test_nim.py from chicken import Chicken c = Chicken() c.set_name(\u0026#34;Betsy\u0026#34;) print(f\u0026#34;My name is {c.get_name()}\u0026#34;) for i in range(10): c.peck() generates\nMy name is Betsy Peck peck! Peck peck! Peck peck! Peck peck! Peck peck! Peck peck! Peck peck! Peck peck! Peck peck! Peck peck! Betsy and Carl can now life together in python world, but they can also interact together in nim or cpp world.\nThe nim-farm So far we have been able to bind the nim type to python. Carl and Betsy can life happily ever after there. Nim is, however, also compiled. So we can also inhabit our little farm purely on the cpp side. This will look as follows:\n{.compile: \u0026#34;../cython_classes/chicken.cpp\u0026#34;.} type CChicken* {.header: \u0026#34;../cython_classes/chicken.hpp\u0026#34;, importcpp: \u0026#34;Chicken\u0026#34;.} = object name: cstring proc peck*(this: CChicken) {.header: \u0026#34;../cython_classes/chicken.hpp\u0026#34;, importcpp: \u0026#34;#.peck(@)\u0026#34;.} # var chick = CChicken() var cchick = CChicken(name: \u0026#34;Carl\u0026#34;) var nchick = Chicken(name: \u0026#34;Betsy\u0026#34;) echo \u0026#34;We have two chickens now, introducing:\u0026#34; echo nchick.name echo …","date":1624643275,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624643275,"objectID":"c523e45c1d30f06d447c2daa81779222","permalink":"https://cvanelteren.github.io/post/nim_chicken/","publishdate":"2021-06-25T19:47:55+02:00","relpermalink":"/post/nim_chicken/","section":"post","summary":"In a previous post, I created the fastest chicken alive! I implemented a chicken in cpp and provided bindings in cython and python. However, our chicken Carl needs some friends. Today, I will implement a friend for Carl, in another morer niche language called nim; and I will show how nim can produce similarly fast chickens that can be called from python.","tags":["chickens","coding","nim"],"title":"Expanding the farm","type":"post"},{"authors":[],"categories":[],"content":"Python is my preferred language due to its ease of use, general application, interactivity, and availibility of libraries. There is however one big downside: python can be painfully slow for numerical applications. One possible solution is to write extensions in lower-level languages and provide bindings that one can use from python. This is often referred to as the two-language-problem as it requires a programmer to know two languages. In this post I will explore cython which is “half” language that allows to write both native python and c/cpp in one file. In particular, I will focus on binding cpp classes to python to extend python libraries to python.\nCython In a nutshell, cython allows a programmer to write python-like code that is then compiled into c/cpp. This can be used to write high performant extensions. The goal of this post is not to provide a novice tutorial; for those interested cython’s documentation provides some great material for that. This post will focus mainly on providing bindings of cpp to python.\nCPP class Imagine we want to write an extremely fast chicken, and we have decided python is not suitable for this. We turn to cpp and write something like\n// file: chicken.hpp #ifndef chicken_hpp #define chicken_hpp #include \u0026lt;iostream\u0026gt; class Chicken { public: Chicken(); Chicken(std::string name); std::string name; void peck(); }; #endif We start implementing straight away and end up with something like:\n// file: chicken.cpp #include \u0026#34;chicken.hpp\u0026#34; Chicken::Chicken() { this-\u0026gt;name = \u0026#34;HELP I HAVE NO NAME\u0026#34;; } Chicken::Chicken(std::string name) { this-\u0026gt;name = name; } void Chicken::peck() { std::cout \u0026lt;\u0026lt; \u0026#34;Peck peck!\u0026#34; \u0026lt;\u0026lt; std::endl; } Our chicken is alive, but it is stuck in cpp world. We have to get it running in python. How do we start doing this? In order to order to create a python chicken class, we have to provide a wrapper. In cython, we achieve this in two steps. First, we need to tell cython what cpp object we are looking at. Second, we need to create a cython extenions that provides bindings for python.\nCython header Just like in cpp, cython has a header/implementation style system. The headers are kept in pxd files and the implementation are in pyx files. For our headers, we merely have to provide implementations on our cpp class methods. Cython offers three kinds; standard python def implementations, cpdef, and cdef methods. The last two are special kinds; cpdef methods allow for seamless interaction between “python-world” and “cpp-world”. In contrast, cdef methods only allow for interaction with cpp objects. For this current tutorial, this distinction is not necessary, and we can go straight ahead with implementing our chicken.\nWe need to tell cython what our cpp class looks like. We create a header file cychicken.pxd with the following content\n#file cychicken.pxd from libcpp.string cimport string cdef extern from \u0026#34;chicken.hpp\u0026#34;: cdef cppclass Chicken: Chicken() except+ Chicken(string name) except+ string name void peck() The first line imports the cython implementation of string (which is merely a wrapper for std::string), cdef extern is similar to extern in c/cpp: it tells cython that there is an external header. We then “color in” the header and tell cython what objects life in this header. In our case, we have a chicken! And importantly, this chicken has a name and it can peck (be careful!).\nCython implementation We now have implemented our class in cpp and defined headers for the class in cpp and cython. At this point, we could cimport the Chicken class and within cdef and cpdef classes can interact with this cpp class. However, we cannot yet import our chicken class into python directly. In order to do this, we have to provide an implementation (wrapper) for the python side to interact with.\n#file: cychicken.pyx from cychicken cimport Chicken, string cdef class PyChicken: # defines class property # can be put into pxd files cdef Chicken *cpp_chicken # normal class init def __init__(self, name: str): # need to convert string to binary # for cpp strings self.cpp_chicken = new Chicken(f\u0026#34;{name}\u0026#34;.encode(\u0026#39;utf8\u0026#39;)) # ensures that point is deleted when object is # destroyed def __dealloc__(self): del self.cpp_chicken # wrap the peck function def peck(self): self.cpp_chicken.peck() # wrap the name property @property def name(self): return self.cpp_chicken.name.decode(\u0026#39;utf8\u0026#39;) Our chicken can now freely be called from python!\nCompiling Before we can test our chicken, we have to write some code to compile it into a shared object. Setting up a proper extension is some black magic in and of itself. I won’t bore you with the details today and for now you can merely create a setup file as such\n#file: setup.py from setuptools import setup from Cython.Build import cythonize from setuptools.extension import Extension exts = [ Extension( \u0026#34;chicken\u0026#34;, sources=[\u0026#34;cychicken.pyx\u0026#34;, \u0026#34;chicken.cpp\u0026#34;], include_dirs=[\u0026#34;.\u0026#34;], language=\u0026#34;c++\u0026#34;, ) ] setup(ext_modules=cythonize(exts)) Running python setup.py build_ext …","date":1624474758,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624474758,"objectID":"3090dbdddef851274dbf01003d0f4d86","permalink":"https://cvanelteren.github.io/post/cython_classes/","publishdate":"2021-06-23T20:59:18+02:00","relpermalink":"/post/cython_classes/","section":"post","summary":"Wrapping cpp in cython and python","tags":["coding","cython","cpp","chickens"],"title":"Creating the fastest chicken alive!","type":"post"},{"authors":[],"categories":null,"content":"Understanding dynamical systems is a fundamental problem for the 21st century. Despite the prima facie differences and purposes of many real-world networks, previous research shows several universal characteristics in networks properties such as the small-world phenomenon, fat-tail degree and feedback loops. This has lead to the common but often implicit assumption that the connectedness of a node in the network is proportional to its dynamic importance. For example in epidemic research, high degree nodes or “super-spreaders” are associated to dominant epidemic risk and therefore deserve special attention. Yet prior research shows that the shared universality in network characteristics is not shared in the dynamic or functional properties of many real-world systems.\nIn this talk I will explore the relation between local interactions and macroscopic properties of a system through the lens of statistical physics and information theory. In particular, I will show novel methods on determining the so-called driver node in complex systems, and how tipping point can be studied from an information theoretical perspective.\n","date":1623322800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623322800,"objectID":"21351f73b735d8ad8e338524888a9ee1","permalink":"https://cvanelteren.github.io/talk/through-the-looking-glass/","publishdate":"2021-05-30T12:14:53+02:00","relpermalink":"/talk/through-the-looking-glass/","section":"event","summary":"How does the part relate through the whole? In this talk I will outline an information theoretical approach for analyzing complex systems.","tags":[],"title":"Through the looking glass","type":"event"},{"authors":[],"categories":[],"content":"If you know python, you are probably aware of its value. The language is easy to develop in, which allows for quick proto-typing. It is used by many professional companies either as glue to bind compiled languages together, or as a full-stack for their apps. With the advent of python 3.6 and [[pep498][https://www.python.org/dev/peps/pep-0498/]] f-strings arrived. Its longer name is formatted string literals or f-strings for short ;-). This is probably one of my favorite python feature next to dicts being sorted by default.\nWhat are f-strings? When you are either debugging or writing some logging library, strings (in my opinion) were always a hassle to deal with. In order to write the output of a variable one would either write\nsome_variable = \u0026#34;hello world!\u0026#34; print(\u0026#34;Some variable = \u0026#34; + some_variable) print(\u0026#34;Some variable = %s\u0026#34;.format(some_variable)) The top choice is not that bad, but the bottom one gets complicated when formatting get more complex. With F-strings this procedure can be simplified by writing:\nsome_variable = \u0026#34;hello world!\u0026#34; print(f\u0026#34;Some variable = {some_variable}\u0026#34;) Merely by adding the formatting operator “f” in front of the string, the output becomes more readble. This has the advantage of literate programming; in plain langauge one can read this sentence and understand its output in normal plain language. Since the feature became available I quickly replaced the old formatting style with this newer better way: f-strings became the norm.\nIn my normal debugging routine, I am not used to using full-featured debuggers that can step in and out of functions allowing to see local scopes: very fancy! I usually resort to print statements, and lots of coffee and pacing around my room. F-strings allowed for quicker and clearer debugging. This prompts me to write this post now, what else can F-strings do?\nCapabilities of f-strings F-strings can do a great number of things. One of the major advantages for me is making readable strings as was indicated above.\nFormatting F-strings allow for formatting opertors to be passed in. Say you have a float with 10 decimes but you only want to plot the rounded number. One option would be to do:\na = 1.23123512351234 print(f\u0026#34;{round(a, 2)}\u0026#34;) This however, quickly makes the f-string “complicated”. Luckliy f-strings allow for format operators to be used\na = 1.23123512351234 print(f\u0026#34;{a:.2f}\u0026#34;) # prints up to 2 precision Next to rouding formats, one can also apply alignment of text\ntext = \u0026#34;hello world\u0026#34; print(f\u0026#34;{text: \u0026gt;}\u0026#34;) # right align print(f\u0026#34;{text: \u0026lt;}\u0026#34;) # left align [default often] print(f\u0026#34;{text: ^}\u0026#34;) # center align There are many more possibilites, including aligning only if the text goes bigger than a certain predetermined number of digits or formatting numbers to hex, binary, leading space for positive numbers and so on. In fact there is a minilanguage that it uses that can be found on the python docs.\nLambda functions The colon is used for formatting indicator. This prevents lambda functions from being used directly. However, by encapsupating the lambda function one is still able to insert lambda functions inside an f-string.\nprint(f\u0026#34;This is the output of two times 2 {(lambda x: x*2)(2)}\u0026#34;) Debugging In debugging I often revert to writing the output to check the state of some object. This results in boilerplate statements that I wish to prevent. Luckily, f-strings can to this with = formatting.\nsome_variables = \u0026#34;ERROR!\u0026#34; print(f\u0026#34;{some_variable=}\u0026#34;) will print out\nsome_variable = \u0026#34;ERROR\u0026#34; Pretty neat! This reduces the need to write out the variable statement completely.\n","date":1623220486,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623220486,"objectID":"444e0f6ed68f9c0ea80a123e763905af","permalink":"https://cvanelteren.github.io/post/f-strings/","publishdate":"2021-06-09T08:34:46+02:00","relpermalink":"/post/f-strings/","section":"post","summary":"If you know python, you are probably aware of its value. The language is easy to develop in, which allows for quick proto-typing. It is used by many professional companies either as glue to bind compiled languages together, or as a full-stack for their apps.","tags":["coding","python"],"title":"F-strings are awesome!","type":"post"},{"authors":[],"categories":[],"content":"A few months ago, my work email switched from outlook to office365 and with it came OAUTH2. The transition was coupled with a lack of initial support for receiving email with this security protocol yielding some email clients useless. The goal of this post is to provide future users with some insights on setting up OAUTH2 in mu4e.\nWhat is OAUTH2? In brief, OAUTH2 is an authorization framework that enables applications to obtain limited access to user accounts through an HTTP service; applications can request access to user accounts by setting up a host-client secret. In my mind it works similar to ssh, but then for email.\nSetting up OAUTH2 in emacs We need to achieve 3 functions; we need to acquire a secret, use this secret to receive the emails, use this secret to send the emails. As an important aside, it is highly recommended to set up some form of password management such that your passwords are not visible of left strangling in clipboard; setting this up is outside the scope of this post.\nAcquiring the secret Acquiring the secret may differ depending on the service you are using. For gmail for example look here. For office 365 however, it proved a bit more difficult as I did not have access directly to the api to setup these keys through azure. In order to acquire a secret I used mutt_oauth2.py, and I used the publically available application id for thunderbird which can be found here. At the time of writing these are\nAppID = \u0026#34;08162f7c-0fd2-4200-a84a-f25a4db0b584\u0026#34; ClientSecret = \u0026#34;TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82\u0026#34; Acquire mutt_oauth2.py and edit the code with this info. Running the file will then give you a token after logging in with the through your SSO of your company. Now this token is put in a public file, anyone who has acces to this token could theoretically scoop your email. It is therefore crucial to setup a password manager to protect this secret.\nEmail receiving I use mbsync for receiving emails and mstmp for sending emails. I again defer to the respective tutorials for setting these up, but I will mention what is important for XOAUTH2. A common setup for mbsync could look something like this\n#file: ~/.mbsyncrc # mbsyncrc based on # http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html # ACCOUNT INFORMATION IMAPAccount office365 # Address to connect to Host smtp.office365.com User \u0026lt;EMAIL_HERE\u0026gt; PassCmd \u0026#34;gpg2 -q --for-your-eyes-only --no-tty -d ~/.emacs.d/mu4e/.mbsyncpass-\u0026lt;EMAIL_HERE\u0026gt;.gpg\u0026#34; AuthMechs LOGIN SSLType IMAPS SSLVersions TLSv1.3 CertificateFile /etc/ssl/certs/ca-certificates.crt IMAPStore office365 Account office365 MaildirStore office365-local SubFolders Verbatim # The trailing \u0026#34;/\u0026#34; is important Path ~/Mail/ Inbox ~/Mail/office365/inbox Channel office365 Far :office365-remote: Near :office365-local: # Exclude everything under the internal [Gmail] folder, except the interesting folders Patterns * ![office365]* \u0026#34;[office365]/Sent Mail\u0026#34; \u0026#34;[office365]/Starred\u0026#34; \u0026#34;[office365]/All Mail\u0026#34; # Or include everything #Patterns * # Automatically create missing mailboxes, both locally and on the server Create Both # Save the synchronization state files in the relevant directory SyncState * PassCmd is used to obtain your client secret setup above and Authmechs needs to be set to XOAUTH2 for office365 but oddly to LOGIN for gmail. One could also fill in a bare string password to prevent the hassle of setting up password managers, or use python mutt_oauth2.py TOKENFILE to acquire the secret but this is not recommended. We can check whether it works by running mbsync -a from your favorite shell.\nEmail sending Similar to the setup of mbsync, msmtp can be setup to use a password command to insert the token. Note that you need to have a version that supports xoauth2, on AUR you can use mstmp-oauth2. A typical setup looks like this\n#file : ~/.mstmprc # Set default values for all following accounts. defaults auth on tls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile ~/.msmtp.log # Outlook account outlook host smtp.office365.com port 587 auth xoauth2 from username@outlook.com # not necessary # user username # not recommended password plain-text-password # recommended passwordeval \u0026lt;Password retrieval command\u0026gt; ... # Set a default account (optional) account default : outlook We can now receive and send email. As coup de grâce we have to setup mu4e to start using email from emacs.\nMu4e At the time of writing I am using doom emacs which has some wrappers for common long commands; substitute for default emacs accordingly. “Modern” mu4e uses contexts to setup various emails addresses. I will highlight the relevant parts for mu4e setup to make our setup work. In short, we need to tell mu use mbsync to retrieve emails and msmtp to send emails.\n(after! mu4e (setq ;; set correct path sendmail-program \u0026#34;/usr/sbin/msmtp\u0026#34; mu4e-root-maildir \u0026#34;~/Mail\u0026#34; mu4e-mu4e-mail-path \u0026#34;~/Mail\u0026#34; send-mail-function \u0026#39;smtpmail-send-it ;; remove adding username --\u0026gt; msmtp takes care of this message-sendmail-f-is-evil t ;; read who …","date":1619165547,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619165547,"objectID":"b5db59d63cb81e98eea1243377d6c6fc","permalink":"https://cvanelteren.github.io/post/mu4e/","publishdate":"2021-04-23T10:12:27+02:00","relpermalink":"/post/mu4e/","section":"post","summary":"Setting up mu4e for office 365 with OAUTH2","tags":["emacs","coding"],"title":"Growing pains","type":"post"},{"authors":[],"categories":[],"content":" Covid “dashboard” I made over the winter. Data is sourced from the Dutch national corona dashboard.\nIn order to reflect the spatio-temporal effects of corona, the data consists of three categories per municipality. Namely, it consists of total cases, number of people hospitalized, and the total number of deceased due to corona at per publication date. I designed a metric which I dubbed “relative severity” which had the goal to:\nReflect the relative contribution to the source vectors at each time point; Include a memory effect of the contribution over time; Take into account the number of people living in that municipality. For municipality $j$ the relative severity for source $s_i \\in \\{\\textrm{total reported, hospitalized, deceased}\\}$ at time $t$ was computed as\n$$ R_j(s_{ij}^t) = \\frac{1}{Z_j \\sum_k R_k(s_i^t)}\\sum_{\\tau =0}^t s_{ij}^{\\tau},$$\nwere $Z_j$ is the number of people living in municipality $j$, and $s_{ij}$ is one of the sources (total cases, hospitalized, deceased) in municipality $j$. The percentile of $R_j(s_i^t)$ at each time $t$ is then computed and plotted above.\n","date":1618508291,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618508291,"objectID":"f870a9699be09eb7fc75102f4beab828","permalink":"https://cvanelteren.github.io/project/covid_dashboard/","publishdate":"2021-04-15T19:38:11+02:00","relpermalink":"/project/covid_dashboard/","section":"project","summary":"How the pandemic spread through the Netherlands. Click for pretty animations!","tags":["data analysis","coding","visualization"],"title":"Covid dashboard","type":"project"},{"authors":[],"categories":[],"content":"Some years ago an article was published using rock-paper-scissor dynamics to study the effects on biodiversity. I got inspired by the excellent website of Dirck Brockmann and decided to implement it myself in the the computational toolbox I wrote . Below I simulated the rock-paper-scissor model and created a (possibly novel) agent-based inspired version of it. The model produces beautiful fluid-like patterns as can be seen in the video below simulated on a 100x100 grid with Moore neighborhood.\nSimulation of rock-paper-scissor dynamics on a 100x100 grid with Moore neighborhood. The model starts with all vertices having a random value in $[0, 1]$. The color of each vertex is proportional to the density of the species (red, green or blue). White would indicate low values of all species whereas black indicates high values of all species. Over time larger patches of similar states appear and interact according to rock-paper-scissor dynamics. The model The model was designed to understand the co-existance of interacting species in a spatially extended ecosystem. Each vertex point represents the locus of three species. The color (red, green, blue) are proportional to the density of the three species at each pixel (vertex point).\nThe model produces a wide range of different patterns based on three input parameters\nDiffusion ($D$): mobility of species. Predation ($P$): competition between the tree different species. Competition ($C$): Competition among different specifies. Each vertex in the system $\\sigma_i \\in \\sigma :=${ $\\sigma_0, \\dots, \\sigma_n$ } contains a vector with the density of the three “species”, i.e. rock ($r$), paper ($g$), or scissor ($b$). The concentration of each specie at vertex $i$ is updated according to\n$$ \\frac{d \\sigma_i}{dt} = \\scriptstyle \\begin{cases} \\frac{dr_i}{dt}\u0026amp; = ((\\underbrace{P (g_i - b_i) + r_i}_{\\textrm{predation}} - \\underbrace{C (g_i + b_i) - r_i^2}_{\\textrm{Competition}})r_i - \\underbrace{D(\\sum_{\u0026lt;i,j\u0026gt;} r_j r_i)}_{\\textrm{mobility}}) \\delta t \\\\\\ \\frac{dg_i}{dt}\u0026amp; = ((P (b_i - r_i) + g_i - C (r_i + b_i) - g_i^2)g_i - D(\\sum_{\u0026lt;i,j\u0026gt;} g_j g_i)) \\delta t \\\\\\ \\frac{db_i}{dt}\u0026amp; = ((P (r_i - g_i) + b_i - C (r_i + g_i) - b_i^2)b_i - D(\\sum_{\u0026lt;i,j\u0026gt;} b_j b_i)) \\delta t, \\end{cases} $$\nwhere $\u0026lt;i,j\u0026gt;$ indicates the nearest neighbors of variable $i$.\nIn order to see the effect of the three parameters, I simulated $T=1000$ steps and visualized the last system state while varying predation, competition and diffusion while keeping the rest constant. It is fascinating to see how each parameter causes different spatially extended patterns. The simulations over time exhibit fluid-like behavior, and the observed patterns are distinct on the set of input parameters. Most notably, the diffusion parameter can cause large extended patches similar to what can be observed in Ising/Potts model. Predation on the other hand tends to cause fragmentation of species for lower values, but for higher values create similar larger patterns. The interaction among the variables shows a non-linear effect with each other. This can readily be seen in the competition parameters. That is, the competition parameter shows larger patches only for a small range (1.89 - 2.17) while keeping all other values constant.\nAgent-based implementation In the original paper, the authors apply a so-called Gillspie algorithm to efficiently sample the reaction between the different density. I was interested whether one can get away with “tradtiional” Monte-Carlo methods and implemented and agent-based approach to the model above.\nEach agent updates stochastically with parameters\nMobility $M \\in [0, 1]$ Reproduction $R \\in [0, 1]$ Selection $S \\in [0, 1]$ An agent can only reproduce if an adjacent vertex is dead. The other moves are updated sequentially with the probabilities indicated above. In short, each agent can assume one of 4 states:\nDead state “Rock” state “Paper” state “Scissor” state Each update step an agent interacts with a random neighbor and randomly chooses an interaction strategy random. That is, if the adjacent neighbor is empty, it could reproduce with probability $R$, otherwise it may attempt kill the neighbor with probability $S$. Lastly, it could inhabit the neighboring site with probability $M$. Note that the total set is a pair of (mobility, selection or reproduction).\nWe then yield the following for $(M, R, S) \\rightarrow 2.5:1.5:.05 = 1.3:1:0.03 \\rightarrow (.5, .66, 0.016)$:\nAgent-based implementation of the model above. Black indicates dead or uninhabited vertices, red, yellow, green represent rock, paper, scissor state respectively. The dynamics are simulated on a 100x100 lattice with Moore neighborhood. This maintains the circular behavior found in the original paper, however this does not employ the Gillspie algorithm. This will be the topic of some future post.\n","date":1617627428,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617627428,"objectID":"34c14f69ffba95b24c0542dd4d47f375","permalink":"https://cvanelteren.github.io/post/rps/","publishdate":"2021-04-05T14:57:08+02:00","relpermalink":"/post/rps/","section":"post","summary":"How roschambo can generate fluid-like patterns.","tags":["complexity","coding"],"title":"Rock-paper-scissor dynamics to study biodiversity","type":"post"},{"authors":[],"categories":[],"content":"Some years ago an article was published using rock-paper-scissor dynamics to study the effects on biodiversity. I got inspired by the excellent website of Dirck Brockmann and decided to implement it myself in the the computational toolbox I wrote . Below I simulated the rock-paper-scissor model and created a (possibly novel) agent-based inspired version of it. The model produces beautiful fluid-like patterns as can be seen in the video below simulated on a 100x100 grid with Moore neighborhood.\nSimulation of rock-paper-scissor dynamics on a 100x100 grid with Moore neighborhood. The model starts with all vertices having a random value in $[0, 1]$. The color of each vertex is proportional to the density of the species (red, green or blue). White would indicate low values of all species whereas black indicates high values of all species. Over time larger patches of similar states appear and interact according to rock-paper-scissor dynamics. The model The model was designed to understand the co-existance of interacting species in a spatially extended ecosystem. Each vertex point represents the locus of three species. The color (red, green, blue) are proportional to the density of the three species at each pixel (vertex point).\nThe model produces a wide range of different patterns based on three input parameters\nDiffusion ($D$): mobility of species. Predation ($P$): competition between the tree different species. Competition ($C$): Competition among different specifies. Each vertex in the system $\\sigma_i \\in \\sigma :=${ $\\sigma_0, \\dots, \\sigma_n$ } contains a vector with the density of the three “species”, i.e. rock ($r$), paper ($g$), or scissor ($b$). The concentration of each specie at vertex $i$ is updated according to\n$$ \\frac{d \\sigma_i}{dt} = \\scriptstyle \\begin{cases} \\frac{dr_i}{dt}\u0026amp; = ((\\underbrace{P (g_i - b_i) + r_i}_{\\textrm{predation}} - \\underbrace{C (g_i + b_i) - r_i^2}_{\\textrm{Competition}})r_i - \\underbrace{D(\\sum_{\u0026lt;i,j\u0026gt;} r_j r_i)}_{\\textrm{mobility}}) \\delta t \\\\\\ \\frac{dg_i}{dt}\u0026amp; = ((P (b_i - r_i) + g_i - C (r_i + b_i) - g_i^2)g_i - D(\\sum_{\u0026lt;i,j\u0026gt;} g_j g_i)) \\delta t \\\\\\ \\frac{db_i}{dt}\u0026amp; = ((P (r_i - g_i) + b_i - C (r_i + g_i) - b_i^2)b_i - D(\\sum_{\u0026lt;i,j\u0026gt;} b_j b_i)) \\delta t, \\end{cases} $$\nwhere $\u0026lt;i,j\u0026gt;$ indicates the nearest neighbors of variable $i$.\nIn order to see the effect of the three parameters, I simulated $T=1000$ steps and visualized the last system state while varying predation, competition and diffusion while keeping the rest constant. It is fascinating to see how each parameter causes different spatially extended patterns. The simulations over time exhibit fluid-like behavior, and the observed patterns are distinct on the set of input parameters. Most notably, the diffusion parameter can cause large extended patches similar to what can be observed in Ising/Potts model. Predation on the other hand tends to cause fragmentation of species for lower values, but for higher values create similar larger patterns. The interaction among the variables shows a non-linear effect with each other. This can readily be seen in the competition parameters. That is, the competition parameter shows larger patches only for a small range (1.89 - 2.17) while keeping all other values constant.\nAgent-based implementation In the original paper, the authors apply a so-called Gillspie algorithm to efficiently sample the reaction between the different density. I was interested whether one can get away with “tradtiional” Monte-Carlo methods and implemented and agent-based approach to the model above.\nEach agent updates stochastically with parameters\nMobility $M \\in [0, 1]$ Reproduction $R \\in [0, 1]$ Selection $S \\in [0, 1]$ An agent can only reproduce if an adjacent vertex is dead. The other moves are updated sequentially with the probabilities indicated above. In short, each agent can assume one of 4 states:\nDead state “Rock” state “Paper” state “Scissor” state Each update step an agent interacts with a random neighbor and randomly chooses an interaction strategy random. That is, if the adjacent neighbor is empty, it could reproduce with probability $R$, otherwise it may attempt kill the neighbor with probability $S$. Lastly, it could inhabit the neighboring site with probability $M$. Note that the total set is a pair of (mobility, selection or reproduction).\nWe then yield the following for $(M, R, S) \\rightarrow 2.5:1.5:.05 = 1.3:1:0.03 \\rightarrow (.5, .66, 0.016)$:\nAgent-based implementation of the model above. Black indicates dead or uninhabited vertices, red, yellow, green represent rock, paper, scissor state respectively. The dynamics are simulated on a 100x100 lattice with Moore neighborhood. This maintains the circular behavior found in the original paper, however this does not employ the Gillspie algorithm. This will be the topic of some future post.\n","date":1617627428,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617627428,"objectID":"fdc0927b462e37f884401e8ebec3dfec","permalink":"https://cvanelteren.github.io/project/roshambo/","publishdate":"2021-04-05T14:57:08+02:00","relpermalink":"/project/roshambo/","section":"project","summary":"How roschambo can generate to fluid-like pattern.","tags":["complexity","coding"],"title":"Rock-paper-scissor dynamics to study biodiversity","type":"project"},{"authors":[],"categories":[],"content":"Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!\nUnforutnately, the process is not perfect. It was fun making this regardless. ","date":1616451575,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616451575,"objectID":"1b5b5f6e828cc5a6d8936458bc9ac3b5","permalink":"https://cvanelteren.github.io/post/coffee/","publishdate":"2021-03-22T23:19:35+01:00","relpermalink":"/post/coffee/","section":"post","summary":"Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!","tags":["visualization","complexity"],"title":"Are bubbles power law distributed?","type":"post"},{"authors":[],"categories":[],"content":"Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!\nUnforutnately, the process is not perfect. It was fun making this regardless. ","date":1616451575,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616451575,"objectID":"0290ce4fdf476f9759427b25ee1d43bc","permalink":"https://cvanelteren.github.io/project/coffee/","publishdate":"2021-03-22T23:19:35+01:00","relpermalink":"/project/coffee/","section":"project","summary":"Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!","tags":["visualization","complexity"],"title":"Are bubbles power law distributed?","type":"project"},{"authors":[],"categories":[],"content":"Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!\nUnforutnately, the process is not perfect. It was fun making this regardless. ","date":1616451575,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616451575,"objectID":"6087c0ef875554f4409ac52928d79279","permalink":"https://cvanelteren.github.io/projects/","publishdate":"2021-03-22T23:19:35+01:00","relpermalink":"/projects/","section":"","summary":"Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!","tags":["visualization","complexity"],"title":"Are bubbles power law distributed?","type":"page"},{"authors":[],"categories":null,"content":"","date":1615561200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615561200,"objectID":"0dc1d2317571985820fb78672394e1fb","permalink":"https://cvanelteren.github.io/talk/simulation-based-science-lecture-talks/","publishdate":"2021-06-15T08:53:08+02:00","relpermalink":"/talk/simulation-based-science-lecture-talks/","section":"event","summary":"In this talk I outline dynamics on and of networks and how to use complexity science to analyze complex systems using tools from statistical physics.","tags":[],"title":"Simulation based science lecture talks","type":"event"},{"authors":["Casper van Elteren"],"categories":null,"content":"Fix your matplotlib animations! Some time ago I saw a post on fixing matplotlib colorbars by Joseph Lang. One of the major problems with matplotlib is that it works quite well out of the box, until it doesn’t. Making figures for publication just right can become tedious as shown by Joseph Lang as it requires one deep into the docs and figuring something simple like aligning colorbars to axes.\nAfter browsing stackoverflow I was triggered by a post that seemed to achieve something somewhat trivial but the proposed solution seemed too difficult. The problem posted by original poster described how the goal was to update the colorbar in animations of a heatmap. Animating in matplotlib can be super slow, if some tricks are not known to the end-user. Examples include blitting, preventing large object reconstruction, setting data structures manually, drawing canvas etc.\nAfter digging through the docs I figured out that in order to prevent manually updating the colorbar, one needs to force update of the map afterwhich the colorbar will be updated:\nfrom matplotlib.pyplot import subplots from matplotlib.animation import FuncAnimation from matplotlib import rc from mpl_toolkits.axes_grid1 import make_axes_locatable from IPython.display import HTML rc(\u0026#39;animation\u0026#39;, html = \u0026#39;html5\u0026#39;) import numpy as np, threading # define data d = np.random.randn(10, 10) # setup figure fig, ax = subplots(figsize = \\ (4,4)) divider = make_axes_locatable(ax) cax = divider.append_axes(\u0026#34;right\u0026#34;, \\ size = \u0026#34;5%\u0026#34;,\\ pad = .1) # J. Lang # create mappable h = ax.imshow(d) # create colorbar cb = fig.colorbar(h, cax = cax) def update(i): # generate new data h.set_data(np.random.randn(*d.shape) + np.random.randn()) # rescale data for cb trigger h.norm.autoscale(h._A) # update mappable h.colorbar.update_normal(h.colorbar.mappable) # flush events update time ax.set_title(f\u0026#39;t = {i}\u0026#39;) fig.canvas.draw(); fig.canvas.flush_events(); return (h,) # fig.subplots_adjust(wspace = 1) fig.tight_layout(h_pad = 1) anim = FuncAnimation(fig, update, blit = 1,\\ repeat = 1,\\ frames = 20,\\ interval = 100) html_vid = anim.to_html5_video(embed_limit = 5) fig.set_visible(0) # prevent double HTML(html_vid) Your browser does not support the video tag. ","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"f9f3d28bc7049db6ab13eca965f7a6de","permalink":"https://cvanelteren.github.io/post/matplotlib_colorbar/matplotlib_colorbar_fix/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/matplotlib_colorbar/matplotlib_colorbar_fix/","section":"post","summary":"Fix your matplotlib animations! Some time ago I saw a post on fixing matplotlib colorbars by Joseph Lang. One of the major problems with matplotlib is that it works quite well out of the box, until it doesn’t.","tags":["coding","animation"],"title":"Fix your matplotlib colorbars","type":"post"},{"authors":["Casper van Elteren","吳恩達"],"categories":["Demo","教程"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://cvanelteren.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":[],"categories":[],"content":"","date":1602497880,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602497880,"objectID":"189c9aae95e276683d5274363d57dc17","permalink":"https://cvanelteren.github.io/project/iphones/","publishdate":"2020-10-12T11:18:00+01:00","relpermalink":"/project/iphones/","section":"project","summary":"Given the skyrocketing mobile phone prices, I wondered: 'How many iPhones can I buy if I live in Australia?'","tags":[],"title":"How many iPhones can I buy?","type":"project"},{"authors":null,"categories":null,"content":"Fast, general computational framework for complex adaptive systems.\n","date":1575075169,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575075169,"objectID":"6d3223e8e9492a8758bb5cee95bb1428","permalink":"https://cvanelteren.github.io/project/plexsim/","publishdate":"2019-11-30T01:52:49+01:00","relpermalink":"/project/plexsim/","section":"project","summary":"Fast computational framework for complex adaptive systems simulations","tags":[],"title":"PlexSim","type":"project"},{"authors":null,"categories":null,"content":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;} - Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal ``` renders as\n- Hugo Modules - wowchemy - wowchemy-plugins-netlify - wowchemy-plugins-netlify-cms - wowchemy-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap - Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ``` renders as\n- Mindmaps - Links - [Wowchemy Docs](https://wowchemy.com/docs/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$ Example inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$ f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases} $$ Diagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders …","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://cvanelteren.github.io/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Markdown","type":"post"},{"authors":["Casper van Elteren"],"categories":null,"content":"","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"e7a2b1693a4ee2db06c2caf745ffbae9","permalink":"https://cvanelteren.github.io/publication/dynamic_importance2019/","publishdate":"2019-04-07T00:00:00Z","relpermalink":"/publication/dynamic_importance2019/","section":"publication","summary":"A common assumption is that well-connectedness of agents translates to dynamic importance. In this paper I show how this assertion is in fact false, and we cannot abstract away from dynamics before analyzing complex systems","tags":["Source Themes"],"title":"The dynamic importance of nodes is poorly predicted by static topological features","type":"publication"},{"authors":null,"categories":null,"content":"I was a guest speaker as part of the course Modeling and Data Analysis in Complex Networks. Additionally, the same slides were shown at the simulation based science group at the institute for advanced studies (IAS) at the university of Amsterdam. The talk concerned my research on the identification of driver-nodes in complex dynamical systems.\n","date":1554223500,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554223500,"objectID":"33398090fa44d1978b5d4b9af3e451e3","permalink":"https://cvanelteren.github.io/talk/what-node-is-most-important/","publishdate":"2019-04-02T16:45:00Z","relpermalink":"/talk/what-node-is-most-important/","section":"event","summary":"I was a guest speaker as part of the course Modeling and Data Analysis in Complex Networks. Additionally, the same slides were shown at the simulation based science group at the institute for advanced studies (IAS) at the university of Amsterdam.","tags":null,"title":"What node is most important?","type":"event"},{"authors":null,"categories":null,"content":"I got tired of clicking on woningnet so I made this viewer that puts the houses on a map! It offers a nice interface which allows you to reduce time spent on woningnet. See gif for small example. ","date":1551398400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551398400,"objectID":"ed21cb728791ea10848bed6aa84fe003","permalink":"https://cvanelteren.github.io/project/woningnet/","publishdate":"2019-03-01T00:00:00Z","relpermalink":"/project/woningnet/","section":"project","summary":"Webscraping woningnet and providing an friendly userinterface","tags":["woningnet"],"title":"Woningnet","type":"project"},{"authors":["Casper van Elteren"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post’s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://cvanelteren.github.io/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://cvanelteren.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1544400000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544400000,"objectID":"6830b875790b4fd4d5f45d24b30e69ea","permalink":"https://cvanelteren.github.io/project/information_impact/","publishdate":"2018-12-10T00:00:00Z","relpermalink":"/project/information_impact/","section":"project","summary":"A general toolbox for analyzing discrete complex dynamic systems using information theory.","tags":["dynamic-importance"],"title":"Information impact","type":"project"},{"authors":null,"categories":null,"content":"I built an automatic daemon around tss-saver by 1Conan. It automatically grabs the latest shsh2 blobs from apple servers.\n","date":1520640000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1520640000,"objectID":"5a25776864d721c91b4e4909a8f1c05c","permalink":"https://cvanelteren.github.io/project/tssclient/","publishdate":"2018-03-10T00:00:00Z","relpermalink":"/project/tssclient/","section":"project","summary":"A python daemon around tss-saver","tags":["tss"],"title":"Apple tss-saver daemon","type":"project"},{"authors":null,"categories":null,"content":"","date":1509062400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509062400,"objectID":"174b24207974743029e17006522c8a3c","permalink":"https://cvanelteren.github.io/project/fishviewer/","publishdate":"2017-10-27T00:00:00Z","relpermalink":"/project/fishviewer/","section":"project","summary":"A fast 3D viewer for analyzing large scale brain data.","tags":["FishViewer"],"title":"FishViewer","type":"project"},{"authors":null,"categories":null,"content":"","date":1509062400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509062400,"objectID":"9ee198452c0e52794fa5800b09fbc511","permalink":"https://cvanelteren.github.io/project/statistical_machinelearning/","publishdate":"2017-10-27T00:00:00Z","relpermalink":"/project/statistical_machinelearning/","section":"project","summary":"Some lab reports part of master the course statistical machine learning.","tags":["SM"],"title":"Statistical machine learning","type":"project"},{"authors":null,"categories":null,"content":"","date":1509062400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509062400,"objectID":"fa79c26669b7e5fa447221e5458d74e2","permalink":"https://cvanelteren.github.io/project/toymodels/","publishdate":"2017-10-27T00:00:00Z","relpermalink":"/project/toymodels/","section":"project","summary":"Various simple computational models ranging from Ising model, cellular automatons (1D and 2D), Izhikevich neurons, and the Nubian sandpile.","tags":["ToyModels"],"title":"Toy dynamical systems","type":"project"},{"authors":null,"categories":null,"content":"Text\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"496962a70a42aa2a49187fd3c6ac1054","permalink":"https://cvanelteren.github.io/post/test3/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/test3/","section":"post","summary":"Text","tags":null,"title":"","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://cvanelteren.github.io/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"","tags":null,"title":"about me","type":"widget_page"},{"authors":null,"categories":null,"content":"CV available upon request!\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"de6dae831e3352a894a2922d3119c167","permalink":"https://cvanelteren.github.io/cv/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/cv/","section":"","summary":"CV available upon request!","tags":null,"title":"Curiculum Vitae","type":"page"}]