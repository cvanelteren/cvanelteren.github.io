<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Casper van Elteren</title>
    <link>https://cvanelteren.github.io/</link>
      <atom:link href="https://cvanelteren.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Casper van Elteren</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 15 Jun 2023 17:40:10 +0200</lastBuildDate>
    <image>
      <url>https://cvanelteren.github.io/media/icon_hu14fe9cd784e8f78598c2a5496e7ffbbf_6207_512x512_fill_lanczos_center_3.png</url>
      <title>Casper van Elteren</title>
      <link>https://cvanelteren.github.io/</link>
    </image>
    
    <item>
      <title>How can slimemolds compute shortest paths?</title>
      <link>https://cvanelteren.github.io/post/slimemold/</link>
      <pubDate>Thu, 15 Jun 2023 17:40:10 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/slimemold/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;hr&gt;
&lt;p&gt;author: Casper van Elteren
bibliography:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;~/library.bib
title: Simulating slime molds from scratch&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tldr&#34;&gt;TLDR&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Slime molds are amazing creatures that can solve complex problems
without a central cognitive unit&lt;/li&gt;
&lt;li&gt;I build a simulation from scratch in Nim and visualize it with d3&lt;/li&gt;
&lt;li&gt;The simulation runs and can be controlled directly from the browser&lt;/li&gt;
&lt;/ul&gt;
&lt;div id =&#34;slimeMold&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;module&#34; src = &#34;../../scripts/nim_loader/bundle.js&#34;&gt; &lt;/script&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Human are fascinating creatures. We like to think of ourselves as having
an identity, a sense of &amp;ldquo;self&amp;rdquo; or &lt;em&gt;ego&lt;/em&gt;. We like to think of ourselves
having a career or skills and hardly express (at least in common speech)
about interaction with our environment. But what if you can be both?&lt;/p&gt;
&lt;figure id=&#34;fig:slimeMoldSpores&#34;&gt;
&lt;img src=&#34;./figures/slimemold/slimemold.jpg&#34; /&gt;
&lt;figcaption&gt;Slime molds form spores to explore the environment in the
hunt for food.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In nature, we often do not consider other forms of live as having an
ego. A bird is considered a bird that interact purely with its
environment because it cannot control to the same extent as we do. Some
organism, however, exhibit a life that could be expressed as living on a
spectrum between operating as an individual and as a singular organism.
The slime mold is one such creature. The slime mold is a single celled
eukaryotic (= having a nucleus) organism that can form spores. These
spores are often produces when different slime molds group together to
form a multi-cellular organism (&lt;a href=&#34;#fig:slimeMoldSpores&#34;&gt;1&lt;/a&gt;)&lt;/p&gt;
&lt;figure id=&#34;fig:maze&#34;&gt;
&lt;img src=&#34;./figures/slimemold/slimemold_maze.webp&#34; /&gt;
&lt;figcaption&gt;The slime mold can solve a maze by forming spores. When a
food source is found the branches that did not find food are trimmed.
This results in a network structure with highly efficient path
distances.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Slime molds are particularly interesting as scientists have studied them
extensively for their computational ability. When slime molds search for
food, they extend in space by producing spores. Initially, the search is
randomly around them, but as soon as these spores find food, the slime
mold increases the &amp;ldquo;traffic&amp;rdquo; to these spores. Scientists have studied
this behavior and found that the slime mold is able to solve mazes
(&lt;a href=&#34;#fig:maze&#34;&gt;2&lt;/a&gt;), &lt;a href=&#34;https://www.nationalgeographic.com/science/article/slime-mould-attacks-simulates-tokyo-rail-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;reproduce the tokyo metro
network&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/slimemold/slimeMoldTokyo.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;What is amazing about this organism is that it can do all of this
without &amp;ldquo;knowing&amp;rdquo; the general surrounding. There is no generalized
intelligence, or forward planning. Through interactions with its
environment the organism can organize and solve complex problems.&lt;/p&gt;
&lt;p&gt;In this post, I want to explore the properties of this organism by
building a agent-based simulation from scratch. In addition, I want to
explore visualizing the simulation on a web page directly without the
use of videos.&lt;/p&gt;
&lt;h1 id=&#34;the-plan&#34;&gt;The Plan&lt;/h1&gt;
&lt;p&gt;The goal is to create a simulator that can be run directly from the
browser (&lt;a href=&#34;#fig:outline&#34;&gt;3&lt;/a&gt;). I will use Nim (&lt;a href=&#34;#nimmer&#34;&gt;4&lt;/a&gt; to make the
computational model, and create a visual application by using javascript
and D3. The visual components will have a control box that can control
various aspects of the simulation such as starting and stopping,
controlling the number of agents, the decay rate of the resources and so
on.&lt;/p&gt;
&lt;figure id=&#34;fig:outline&#34;&gt;
&lt;img src=&#34;./figures/slimemold/slimeMoldSimulationOverview.drawio.png&#34; /&gt;
&lt;figcaption&gt;Coarse outline of the different components.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1 id=&#34;why-nim&#34;&gt;Why Nim?&lt;/h1&gt;
&lt;p&gt;Nim is a pretty nifty language that writes (and feels) similar to
python, except that it is strongly typed. The strength of Nim is that it
compiles to javascript, or c/cpp. It was created in 2005 and released to
the public in 2008. Compared ot cpp or c it has more features that you
would expect from a modern languages. For example, checking that am
member is contained with in a list (or sequence in Nim) can be readily
done with the `in` command or added with a `contains` function
(called `proc`(ess) in Nim). In the past I have written some posts
about Nim and its cool features of bridging between different languages
&lt;a href=&#34;http://cvanelteren.github.io/tags/nim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://cvanelteren.github.io/tags/nim&lt;/a&gt;), an decided to solve the advent
of code challenges in Nim to explore the language and its capabilities.&lt;/p&gt;
&lt;h1 id=&#34;modeling-a-slime-mold&#34;&gt;Modeling a slime mold&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Describe the stages of the slime mold&lt;/li&gt;
&lt;li&gt;Describe the movement vector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The computational properties of the slime mold have been studied
extensively both from a biological perspective as well as
computationally cite:@Jones2010,@Ito2003,Kessler1993. Arguebly, one of
the simplest approach is done by cite:@Jones2010. He applies an
agent-based approach to study the pattern formation that emerges through
the interaction of slime mold agents.&lt;/p&gt;
&lt;figure id=&#34;fig:agent&#34;&gt;
&lt;img src=&#34;./figures/slimemold/fig:agent.png&#34; /&gt;
&lt;figcaption&gt;Representation of slimemold agent (from cite:@Jones2010).
The agent drops resources in space at its location with a certain
activity &lt;span
class=&#34;math inline&#34;&gt;&lt;em&gt;A&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; Each agent
possess 3 sensors at -1/8 π, 0, 1/8 π. Each of these sensors have a
reach and a width at which they can sense resources
dropped.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Each slimemold is modeled as an agent in 2D space possessing different
sensors (&lt;a href=&#34;#fig:agent&#34;&gt;4&lt;/a&gt;). Each agent drops food resources in the
environment with activity $A_i$ that other agents can sense. The agents
have $n$ sensors that can sense location at distance $R_i$ from the
agent of width $W_i$. When a food source is sensed by the sensors, the
agent orientates and moves towards the sensor with the largest
concentration. If the propposed location is occupied by another object,
the angle will pick a random angle. When an agent does not move, he does
not drop resources in the environment. Over time, the dropped food
source will decay from the environment with rate $\delta$.&lt;/p&gt;
&lt;p&gt;From these simple dynamics, agents can form chains (&lt;a href=&#34;#fig:chains&#34;&gt;5&lt;/a&gt;)
and with enough agents will form networks (&lt;a href=&#34;#fig:networks&#34;&gt;6&lt;/a&gt;). The
emergence of networks, occurs through the fact that each agent&lt;/p&gt;
&lt;figure id=&#34;fig:chains&#34;&gt;
&lt;img src=&#34;./figures/slimemold/slimemoldchains.png&#34; /&gt;
&lt;figcaption&gt;Slimemold agents can form chains and networks through the
simple dynamics described in &lt;a href=&#34;fig:agent&#34;&gt;fig:agent&lt;/a&gt; (from
&lt;span class=&#34;citation&#34;
data-cites=&#34;Jones&#34;&gt;cite:Jones&lt;/span&gt;@2010).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure id=&#34;fig:networks&#34;&gt;
&lt;img src=&#34;./figures/slimemold/slimemoldnetworks.png&#34; /&gt;
&lt;figcaption&gt;Slime molds can form networks over time. From top left to
right bottom the time increases. In the top left image, the agents are
spawn at a random location. As the simulation develops, the agents will
form networks (from &lt;span class=&#34;citation&#34;
data-cites=&#34;Jones2010&#34;&gt;cite:Jones2010&lt;/span&gt;).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure id=&#34;fig:minimum_resources&#34;&gt;
&lt;img src=&#34;./figures/slimemold/minimum_resources.png&#34; /&gt;
&lt;figcaption&gt;When food sources are placed in the environment (black
dots), the agents will form a efficient path between the resources (from
cite:@Jones2010).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The dropped resources emulate how a slime mold would communicate to
other slime molds that there is some food source nearby. Jones ran
computational simulations that emulated food sources in the environment.
Remarkable, the agents will produce a minimum spanning tree (or network)
between the food resources (&lt;a href=&#34;#fig:minimum_resources&#34;&gt;7&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;code-layout&#34;&gt;Code layout&lt;/h2&gt;
&lt;p&gt;cite:Jones2010 provides an elegant description of a minimal agent-based
model for the slime mold. To the best of my knowledge no implementation
of this model is available on the internet, so I decided to implement it
in Nim. What follows is a bird&amp;rsquo;s eye description of the relevant methods
implemented in Nim. For the source code please see the listed source
below.&lt;/p&gt;
&lt;p&gt;The simulation would need a way to represent the world the agents can
move in, and a description of &lt;em&gt;how&lt;/em&gt; the agents can interact with this
world. To structure my approach, I propose the following code layout:&lt;/p&gt;
&lt;figcaption&gt; Glauber versus Kawasaki dynamics for a Ising model on regular 2D lattice of 64x64 spins.  &lt;/figcaption&gt;
&lt;div class=&#34;captioned-content&#34;&gt;
&lt;div class=&#34;caption&#34;&gt;
&lt;p&gt;Layout of the various components used to generate the simulation&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;utils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The file names are ordered where the file name reflects what can be
found in it. For example, `agents.nim` will contain methods that
describe how agents behave. Similarly, `types.nim` will describe the
various &lt;em&gt;objects&lt;/em&gt; such as the world and the agent and so on. The main
endpoint for nim is contained in `main.nim`. Inside this file, the
methods are described that are exported to javascript. Lastly,
`index.js` will contain the applet with the visualizations of the
simulation.&lt;/p&gt;
&lt;h2 id=&#34;modeling-an-agent&#34;&gt;Modeling an agent&lt;/h2&gt;
&lt;p&gt;Each agent is represented as a struct containing data such as its
position, speed, activity and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# file: types.nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Agent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sensitivity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sensor_reach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sensor_width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sensors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;noise&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# controls noise added to a movement [ignore for now]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Th e most important factors the snippet above are the sensor related
data (sensors, reach and width), the activity (which controls how much
resource an agent drops after moving). The noise parameter control how
much noise is added to each movement of the agent. For the simulations
presented here it can be ignored.&lt;/p&gt;
&lt;p&gt;In each simulation step, each agent will&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;attempt to move into the direction it is currently facing&lt;/li&gt;
&lt;li&gt;sense nearby resources and orientate itself towards the sensor with
the maximum sensed resource&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;agent-movement&#34;&gt;Agent movement&lt;/h3&gt;
&lt;p&gt;We have to therefore right two functions that represent these abilities.
For move we&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# file: agent.nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# update agent position&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# move in current direction on grid cell&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proposal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noise&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;noise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;proposal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;proposal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;proposal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_boundary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# check if there is another agent at new location&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_occupied&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proposal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proposal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deposit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# assume random directiom&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c&#34;&gt;# default model behavior&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand_angle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The agent will attempt to move to the `proposal` location. If the move
can be made (no object present at that location), the agent will put
resources at the agents location in into the world object (see
[6](#Modeling the world)) and move towards the proposal location. When
no move can be made, the agent will not perform a deposit action, but
merely choose a random new angle.&lt;/p&gt;
&lt;h3 id=&#34;agent-sensing&#34;&gt;Agent sensing&lt;/h3&gt;
&lt;p&gt;Each simulation step, the agent will probe the sensors it has for
resources, and orientate themselves towards the sensor that has the most
resources. If all sensors have the same concentration of resources, the
agent will continue straight.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# file: agent.nim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sense&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# get chemical  from sensors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# The  trail  data  structure  is subjected  to  a  simple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# diffusion  operator after  every system  step (a  system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# step is defined as a sensory sampling of the environment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# and attempted  forward movement for every  member of the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# population). The diffusion operator  takes the form of a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# pseudoparallel simple mean filter in a 3 × 3 kernel that&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# is  subject  to  an  adjustable decay  value  to  affect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# chemoattractant persistence.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# var concentrations: Table[Point, float]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;concentrations&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newSeqWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sensors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;direction&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sensors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;direction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sensor_width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sensor_reach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sensor_reach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;angle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_boundary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c&#34;&gt;# threshold activity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sensitivity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;concentrations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;follow_gradient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concentrations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;modeling-the-world&#34;&gt;Modeling the world&lt;/h1&gt;
&lt;p&gt;The agents are not interacting in a vacuum, there is world to be
created! The world object will hold the agents, and a 2D plane on which
the agents can deposit resources. The resources over time will decay to
produce a trail map. The update will occur synchronously for all agents.
That is, each agent is updated in random order with a current (frozen)
state of the world. The new data will form the next step in the
simulation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;difuse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# update synchronously the world trail&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;new_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newSeqWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;n&#34;&gt;newSeqWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ymax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;un&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ymax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difuse_on_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;new_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decay&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;connecting-nim-to-javascript&#34;&gt;Connecting Nim to Javascript&lt;/h1&gt;
&lt;p&gt;In the end, we want to view the output of our hard labor. Although Nim
is a nice language to write in, it lacks the eco system that other
languages such as python has. For plotting, great toolboxes already
exists, e.g. plotly, matplotlib, vispy, ggplot, and so on. D3 is one
such great projects which particularly excels at sharing (interactive)
graphs on the web. Luckily, Nim can interface readily with other
languages, and in particular has a close connection to javascript.&lt;/p&gt;
&lt;h2 id=&#34;what-is-webpack&#34;&gt;What is webpack?&lt;/h2&gt;
&lt;p&gt;Webpack bundles javascript modules (both installed and written by you,
see &lt;a href=&#34;https://webpack.js.org/concepts/why-webpack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;) into a
singular target that is compact and fast to use. Edits in your files are
updated as you write code. It exists as a sort of bridge between the old
way of writing javascript modules (with CommonJS), and the modern way of
writing modules modules (using the &lt;a href=&#34;https://en.wikipedia.org/wiki/ECMAScript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ES
format&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To interface with javascript, I will use a package called &lt;a href=&#34;https://github.com/Double-oxygeN/nim-loader&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nim
loader&lt;/a&gt; which can be used
by webpack to allow the written nim module to behave like a javacript
module.&lt;/p&gt;
&lt;p&gt;To use nim as as a javascript module, we first install nim loader using
nimble (nim&amp;rsquo;s package manager)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nimble install nim_loader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we start defining our webpack config. The end point for our
webpack will be a bundled file that contains our nim module. Per
tradition we call this endpoint `bundle.js`. Then we add a rule to the
webpack config to include our nim loader package that will take care of
our nim files. The config in webpack looks something like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./src/index.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;../../content/scripts/nim_loader&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bundle.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/\.(js|jsx)$/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;loader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;babel-loader&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/\.(eot|svg|ttf|woff|woff2|png|jpg|gif)$/i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;asset&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/\.nim$/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;loader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nim-loader&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;--threads:on&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// does not work in javascript :(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;// Add your rules for custom modules here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// Learn more about loaders from https://webpack.js.org/loaders/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have our webpack setup, we need to define our export
function that will be accessible from javascript. I will write our
export inside `main.nim` as such&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsffi&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# javascript foreign function interface&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;types&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rand_pos&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;agents&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sense&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;consume&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;worlds&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difuse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sequtils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randomize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# setup rng&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;newWorld&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ymax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;n&#34;&gt;decay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;n&#34;&gt;agent_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Creating world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;ymax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ymax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newSeqWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newSeqWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ymax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;decay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@[]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# var agent: Agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Creating agents&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;agent_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exportc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;move_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sense_agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;difuse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# define our export for the nim module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;importc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newWorld&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newWorld&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;step&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can import the `newWorld` and `step` function directly from
javascript:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//file: index.js
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;main.nim&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//importing a nim module!!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The module object will expose the `newWorld` and `step` function.
Since `newWorld` returns a `World` object you may wonder what
happens when you call this function. Interestingly, the `World~ object
is directly accessible in javascript (given that the properties are
exposed in Nim).&lt;/p&gt;
&lt;p&gt;We have now reached a point where we could start writing modules in Nim
and then exposing them through javascript. Nim can also be used to
directly interact with the dom. Some modules (such as D3) have
(incomplete) bindings such that nim can even be used to ditch javascript
all together if needed. This is a nifty tool in your toolbelt if you
want to harness the power of nim on the web. It makes your nim code more
portable if you want to write applications or simulations and share them
on a shiny dashboard.&lt;/p&gt;
&lt;h1 id=&#34;building-the-applet&#34;&gt;Building the applet&lt;/h1&gt;
&lt;p&gt;Initially, I wanted to build a simple control panels with toggles that
could be used to change control parameters to the model. There are lots
of control parameters that can be changed. In the end I opted to
implement a more elaborate control box that emulates the view of
&lt;a href=&#34;#fig:agent&#34;&gt;4&lt;/a&gt;. This idea proved to be more problematic than I
initially thought.&lt;/p&gt;
&lt;p&gt;Providing lots of toggles will be overwhelming, and I tend to prefer a
more visual approach to complex information; using colors and graphics
often eases understanding of a complex situation more readily than lots
of text or other forms of media.&lt;/p&gt;
&lt;p&gt;In the end, the applet was a combination of some uggly programming in
d3, future me will clean this up. The part that took lots of efford was
figuring out why a nested &lt;code&gt;svg&lt;/code&gt; does not visualize a &lt;code&gt;foreignObject&lt;/code&gt;. I
am not sure why it does not allow for this but I expect it has something
to do with the name space that is loaded.&lt;/p&gt;
&lt;p&gt;For the interested individual I have included the code below, but be
warned traveler, the journey was rough!&lt;/p&gt;
&lt;details&gt; &lt;summary&gt; D3 code &lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./main.nim&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./config.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minView&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxView&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;showAgents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startSimulation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// wrap nim function as passing objects between javascript and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// nim produces memory errors
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// setup app
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#slimeMold&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;flex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;justify-content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// init control variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;margin-left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;50px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;margin-right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;flex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;flex-direction&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;55px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;margin-right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// .attr(&amp;#34;display&amp;#34;, &amp;#34;flex&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// plotting utils
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientWidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square_width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square_height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ymax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xScale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scaleLinear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xmax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;yScale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scaleLinear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ymax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;factor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;oScale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scaleLinear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;viewScale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scaleLinear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;minR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;minView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;interpolateViridis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// this lives in memory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;selectAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;squares&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;selectAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;enter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;squares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;yScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square_width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fillStyle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;squares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;enter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square_width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square_height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fillStyle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;drawAgents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;showAgents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Field0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;yScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Field1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;beginPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;moveTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fillStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;gray&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;closePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clearRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientWidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clientHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;selectAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;custom.rect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;yScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;oScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fillRect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square_width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;square_height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fillStyle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;drawAgents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;simulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;timer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;controlGroup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;margin-left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;controlVisual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// bug.attr(&amp;#34;transform&amp;#34;, `scale(${r})`);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`translate(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;) scale(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;)`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;transform&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sensor_reach&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;viewScale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sensor_reach&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sensor_reach&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bugCanvas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;controlGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;svg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;150px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;left-margin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tlt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;controlGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;xhtml:div&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;class&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xhtml:tooltip&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;opacity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;background-color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#FBFAF5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;transparent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;border&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;solid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;padding&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;300px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;70px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;border-radius&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;20px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;padding&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;5px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bug&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bugCanvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bug_field&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;transform&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`translate(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;)`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;steelblue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;innerRadius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outerRadius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;radius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerRadius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                         &lt;span class=&#34;nx&#34;&gt;outerRadius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;outerRadius&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nx&#34;&gt;startAngle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nx&#34;&gt;endAngle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;drag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;drag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;controlVisual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bugCanvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;foreignObject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;50px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;50px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;agentInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;xhtml:input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;xhtml:type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2.5rem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;border-radius&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;50%&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;aspect-ratio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1/1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;text-align&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;background-color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#cc5500&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;border&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;outline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nAgents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bugCanvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mouseover&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// tlt.attr(&amp;#34;x&amp;#34;, event.x)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// tlt.attr(&amp;#34;y&amp;#34;, event.y)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// tlt.style(&amp;#34;visibility&amp;#34;, &amp;#34;visible&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;tlt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;opacity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;        &amp;lt;p style=&amp;#39;font-size: 10px; color: black&amp;#39;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;        &amp;lt;b&amp;gt;Drag &amp;lt;/b&amp;gt; the cone to change the agent&amp;#39;s field of view.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;        &amp;lt;br&amp;gt; &amp;lt;b&amp;gt;Change&amp;lt;/b&amp;gt; the number to increase or decrease the number of agents.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;        &amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;px`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;px`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;bugCanvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mouseout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// tlt.style(&amp;#34;visibility&amp;#34;, &amp;#34;hidden&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;tlt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;opacity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resetButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Reset&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;100px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// .style(&amp;#34;width, 100px&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// .style(&amp;#34;height&amp;#34;, &amp;#34;100px&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// .style(&amp;#34;width, 100px&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;decayRate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;flex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;flex-direction&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#decayRate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;p style=&amp;#39;font-size: 9px; margin-bottom:0px; margin-top: 10px&amp;#39;&amp;gt; Decay rate &amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;margin-bottom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;decayRate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;50px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;margin-top&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0px&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;decay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;decayRate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;decay&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;decayRate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;decay&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;decay&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;startButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;startSimulation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startSimulation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;startButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;startSimulation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Stop&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startSimulation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;simulate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;timer stopping&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;agentInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nAgents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;agentInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;agentInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;dblclick&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;showAgents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;showAgents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// showAgentsInput.node().value = showAgents;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;resetButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newWorld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// when loading the page, we show the data and draw
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;
&lt;h1 id=&#34;discussion&#34;&gt;Discussion&lt;/h1&gt;
&lt;p&gt;This project was fun to put together and as always took way longer than
I wanted to. I am interested to explore further the interaction of web
visualization and programming languages. I really enjoy seeing my
simulations come to live and being able to quickly share a link with a
fellow friend, or show the efforts of my labor off to a co-worker. Nim
is a joy to write in, and I wish the eco system was bigger for
computational goals. Perhaps in the future I will write some network
analysis toolbox for it.&lt;/p&gt;
&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I love writing in Nim, it writes like python but with highly
performant code in the native language.&lt;/li&gt;
&lt;li&gt;Binding Nim to javascript is easily achieved which opens up lots of
opportunity to combine it with interactive libraries such as D3.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Air Quality Monitor</title>
      <link>https://cvanelteren.github.io/post/air-quality-monitor/</link>
      <pubDate>Tue, 06 Jun 2023 10:13:28 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/air-quality-monitor/</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orga01f87d&#34;&gt;The setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org48ccf45&#34;&gt;Sensor data probing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org8e0fdeb&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgd8e3a3d&#34;&gt;Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org594a3e3&#34;&gt;The build&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;During the COVID  pandemic all of us had to  work from home.
The rapid  change from  work being at  the office  now being
completely  at  home  came  with  many  challenges  such  as
work-life  balance,  good  ergonomics  and  ensuring  enough
exercise to  keep your  body (and  mind) healthy.  One thing
that  gets less  attention is  the quality  of the  air your
breath. It  is well known  that increased levels of  C02 can
reduce &lt;em&gt;cognitive functioning&lt;/em&gt;. Increase  in fine and coarse
dust particles can  lead to pulmonary issues and  so on. For
some time I wanted to get  some grip on my local air quality
but  wasn’t really  happy  with the  options  out there  for
several reasons. First, many  sensors do not offer measuring
different measures  together, for  example some  sensors may
measure  temperature   and  humidity,  but  not   fine  dust
particles or C02 (or take any combination of the 3). Second,
I want  to be  in control of  my own data;  I don’t  want an
attached online service be it free or not, I want to own and
export the  data. Third,  the air  quality monitor  needs to
connect over WiFi for easy interfacing.&lt;/p&gt;
&lt;p&gt;Few weeks  ago my  interest sparked  again after  looking at
some air  filters that IKEA  offers and I  started exploring
the world of air quality monitors. I ended on a DIY solution
from a company called &lt;a href=&#34;https://www.airgradient.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AirGradient&lt;/a&gt;. They offer a DIY solution
that measures  C02, temperature,  humidity, fine  and coarse
dust particles.  I decided  to place an  order for  PCBs and
sourced the parts (they also offer ready made units or kits).&lt;/p&gt;
&lt;p&gt;The following  will describe the build,  WiFi connection and
hooking it up to prometheus on  my server to probe and store
the data (similar to &lt;a href=&#34;https://www.jeffgeerling.com/blog/2021/airgradient-diy-air-quality-monitor-co2-pm25&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jeff Geerling’s write-up&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Dealing with  the different components  in this setup  was a
bit  overwhelming; it  required combining  different (very)
mature programs. Although I am not the first to trot in the
river  of home  monitoring, I  hope this  helps some  future
person (or me) navigate the space  a bit better. It is by no
means a  complete guide.  I will be  setting this  system up
with my shiny new server running TrueNAS Scale (more on that
at a different time).&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orga01f87d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;the-setup&#34;&gt;The setup&lt;/h1&gt;
&lt;p&gt;The system consists of three components (&lt;a href=&#34;#org1f1bdaa&#34;&gt;12&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Airquality metrics are collected by the airgradient unit
&lt;ol&gt;
&lt;li&gt;C02&lt;/li&gt;
&lt;li&gt;Temperature &amp;amp; humidity&lt;/li&gt;
&lt;li&gt;PM02 and PM10 (dust particulates)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The data  is read from the airquality  monitor and pushed
to a data logger (prometheus)&lt;/li&gt;
&lt;li&gt;The data is visualized as a dashboard (grafana)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-abstract-layout-of-the-different-systems-involved&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/airgradient_overview.drawio.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Abstract layout of the different systems involved
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org48ccf45&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;sensor-data-probing&#34;&gt;Sensor data probing&lt;/h1&gt;
&lt;p&gt;Airgradient provides  a github repo with  code for reporting
on the various  air quality metrics. By default  it can push
to  an external  dashboard hosted  by airgradient.  However,
since I want  to self-host, we have to edit  the code a bit.
In  order to  expose  the sensor  data, we  have  to do  two
things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup a server&lt;/li&gt;
&lt;li&gt;Write handlers for:
&lt;ol&gt;
&lt;li&gt;Payload&lt;/li&gt;
&lt;li&gt;Not handles requests&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To setup  the server,  we have to  download and  include the
ESP8266  web  server to  serve  the  sensor data.  Next,  we
advertise the data  as a json file. The  following edits are
added to the code to achieve this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;ESP8266WebServer.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// setup server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ESP8266WebServer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createPayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;// ignore data if it possess negative values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;{&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;wifi&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WiFi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RSSI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Co2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;rco2&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Co2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pm25&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;pm02&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pm25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TVOC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;tvoc_index&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TVOC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NOX&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;nox_index&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NOX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;atmp&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;rhum&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sendPayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createPayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handleNotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;text/plain&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Not Found&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// setup server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;// ... other stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// setup server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/metrics&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sendPayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onNotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handleNotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// edit loop to process events
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handleClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// process on events
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a id=&#34;org8e0fdeb&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h1&gt;
&lt;p&gt;For  prometheus  the  airgradient   unit  has  to  expose  a
`/metrics` url.  I modified  the airgradient code  to expose
the  sensor values  which can  then be  read by  prometheus.
Getting  prometheus installed  was easily  done through  the
TrueNAS interface, however, it was completely unclear how to
load  the metrics  into  the interface.  When prometheus  is
booted  up, you  are  greeted with  a  rather blank  looking
interface.  There  is a  command-like  prompt  that you  can
probe. I assumed initially that the interface would allow me
to point to a particular url  to fetch the data. This wasn’t
the case  (or at  least I  was not able  to figure  it out).&lt;/p&gt;
&lt;p&gt;With  TrueNAS, you  can  smoothly install  apps and  quickly
toggle some  settings to configure a  package. However, when
things  become  more  involved,  I find  the  system  a  bit
limiting. For example, the  tutorials on Prometheus requires
one to edit  a config json file to setup  where it can fetch
data from.  Inside the  TrueNAS interface  there is  no such
config option  (e.g. a file  path you can give  or something
along that  order). I  was therefore  rather confused  as to
where I should edit these changes. For the time being I ran&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    find / -name &lt;span class=&#34;s2&#34;&gt;&amp;#34;prometheus.yml&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(which for me was under `/mnt/ssd-storage/ix-applications/releases/prometheus/volumes/ix&lt;sub&gt;volumes&lt;/sub&gt;/config/prometheus.yml`)&lt;/p&gt;
&lt;p&gt;Inside a terminal and edited  the file on my app-pool inside
TrueNAS. The config file looks as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;crape_configs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;job_name:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;airq-monitor&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;err&#34;&gt;metrics_path:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;/metrics&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;err&#34;&gt;scrape_interval:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;err&#34;&gt;static_configs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;targets:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.134&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reloading prometheus then allowed  me to probe for different
variables exposed from the sensor.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgd8e3a3d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;grafana&#34;&gt;Grafana&lt;/h1&gt;
&lt;p&gt;At  the  time of  writing,  Grafana  is offered  on  TrueNAS
truecharts inside  the incubator  channel. However,  for the
life  of  me  I  couldn’t  get it  to  expose  the  web-api.
According to  the documentation, Grafana has  gone through a
change whereby  it first  offered as command  line interface
and server separate. The new image renderer packages the two
combined to prevent issues that were ramping up with the old
server.  Long  story  short,  in  the end  I  used  a  local
installation to  connect to  my server and  set it  up there
yielding:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pretty-sweet&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/grafana_dash.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Pretty sweet!
    &lt;/figcaption&gt;&lt;/figure&gt;

In  the  future, I  will  see  if  I  can get  this  running
completely on the server but for now this suffices.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org594a3e3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;the-build&#34;&gt;The build&lt;/h1&gt;
&lt;p&gt;I  built  the  4.2  version  of the  PCB  and  followed  the
instructions  on  the  &lt;a href=&#34;https://www.airgradient.com/open-airgradient/instructions/diy-pro-v42/#pcb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AirGradient  website&lt;/a&gt;.  The  soldering
involved is straight forward and  can readily be achieved by
a beginner (&lt;a href=&#34;#org99ef021&#34;&gt;27&lt;/a&gt;, &lt;a href=&#34;#orgd4b7222&#34;&gt;28&lt;/a&gt;).  Combined with the clear
instructions  and  photos on  their  website,  you can’t  go
wrong!&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pcb-and-components-laid-out-from-left-to-right-we-see-the-screen-some-pin-headers-the-c02-sensor-the-microcontroller-temperature-sensor-and-the-dust-sensor&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/airgradient_build1.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      PCB and components laid out. From left to right we see the screen, some pin headers, the C02 sensor, the microcontroller, temperature sensor and the dust sensor.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-assembled-back-view-with-working-screen-off-we-go&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/airgradient_build2.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Assembled back view with working screen. Off we go!
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Customizing Wowchemy</title>
      <link>https://cvanelteren.github.io/post/customizing-wowchemy/</link>
      <pubDate>Fri, 19 May 2023 16:34:44 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/customizing-wowchemy/</guid>
      <description>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org488dae5&#34;&gt;Site 2.0&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org822527b&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org58bd05a&#34;&gt;Customizing a block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orga0b7b60&#34;&gt;Concluding statements&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having a web-pressence is excellent for you to create a portfolio, for people to
get in contact with your, or share some randoms thoughts on your favorite topic.
Years ago I was on the journey to create a webpage, but was quickly sucked into
the endless possibilities of web design. Should I go for Vue.js, REACT, or maybe
a different web programming language such as svelte or supersets of javascript
such as typescipt. Possibilities are endless, but for those starting out it is a
daunting undertaking.&lt;/p&gt;
&lt;p&gt;Enter website generators that take away the initial pain of designing layouts
for websites. These generators provide a batteries included approach to the web,
offering you a landing page with some optional widgets that gets you started on
creating a personalized corner of the web. I too started out in this manner.
Years ago, I wanted a web page that would help reflect my academic endeavors.
The portfolio would need to consist of talks, links to slides and or papers.
Hugo academic  was the generator I used for web design. For
years Hugo academic work perfectly well. However, as time passed my page began
to feel stale and I wanted to display something more exciting on my page.
Websites become more capable of running full fledged apps and more and more
standalone software was pushed to have a web component. I felt like I was left
behind. You see, using a generator kicks off the process of getting a website.
However, it did not gave me insights in &lt;em&gt;how&lt;/em&gt; the website was generated. I still
felt like I was stuck at square one. As such I slowly began to interface with
the code that was generated. I started first with customization and later on
created a site navigator with networks in javascript. I was starting to web
design!&lt;/p&gt;
&lt;p&gt;All things changed, however, when Hugo Academic was re-branded to Wowchemy. The
change in name was reflected with a change in design. Every now and again when I
wanted to write a new post, my website would be faced with upgrading issues.
Especially since my code base originated from Hugo Academic. My need for
customization grew and grew, but my frustration with the process of wowchemy did
too. I am currently faced with a dilemma; I either decide to leave the framework
behind, and create something from scratch &lt;em&gt;or&lt;/em&gt; I figure out how to effectively
interface with wowchemy such that I can work with it more pleasently.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org488dae5&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;site-20&#34;&gt;Site 2.0&lt;/h1&gt;
&lt;p&gt;Enter site 2.0; on the surface I does not look any different from my old website
except some rounded corners here and there. Under the hood, however, I am able
to more deeply change the feel of the webpages.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org822527b&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;
&lt;p&gt;First, I wanted to change the look and feel of some widgets on the web page.
Wowchemy calls these nowadays “blocks”. The process of changing these pages is a
bit ill-documented so I am here to outline what my current understanding is of
how wowchemy blocks can be modified to your hearts desire. I started out by just
plain googling and found a post by A.J. Campell which was greatly helpful and I
copied his landing design (&lt;a href=&#34;https://www.adam-campbell.com/post/wowchemy-customisations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). But let’s first decide
on some goals.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want to understand &lt;em&gt;how&lt;/em&gt; I can modify the look and feel of my website&lt;/li&gt;
&lt;li&gt;I want to be able to control and extend the look and feel of my website&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note 2 is implied by 1 but is not necessary a consequence of 1.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org58bd05a&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;customizing-a-block&#34;&gt;Customizing a block&lt;/h1&gt;
&lt;p&gt;A web page consists of different elements that can be blocked by `divs`.
Wowchemy organizes a webpage with widgets called blocks. The blocks are
pre-defined views of content such as a portfolio, landing page, how posts are
viewed (you get the drift). To customize a block we need to create a new
directory from the root folder of our site as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p layouts/partials/blocks/v1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t know why they called it v1, but it implies that they are going to change
this in the future again (and I will probably write a post about it again). Now
the reasoning is as follows, when you build your site, wowchemy pulls default
templates from repos and puts them in the public folder which constitutes your
website. If a local path if present, the local edit will take precedence over
the default template. You will override the template. In past iterations of
wowchemy this process was under `./layouts/partials/widgets/`, and the structure
of the go code inside these folders was also different. At the time over writing
for version v5.7, the blocks structure is what should be aimed for. One can take
the
&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-themes/tree/main/modules/wowchemy/layouts/partials/blocks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;default
templates&lt;/a&gt;, and edit the html files to change the look and feel of the
website, and one can also create new blocks to extend your website: mission accomplished.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orga0b7b60&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;concluding-statements&#34;&gt;Concluding statements&lt;/h1&gt;
&lt;p&gt;This is a pretty short post with a seemingly simple statement. However, from the
user perspective it was a little tricky figuring this out. My website was
working before with edits using and older version of wowchemy. Every X updates
it seems like the updates break things that need not have fixing. It would be
nice if their documentation is edited to walk somebody through building as
simple block from scratch. I am not too familiar with the go environment and
therefore reading statements such as `{{ .page.Params.Author }}` intermixed with
traditional HTML was a bit confusing in how these magic lines were interfacing
with the website (a veteran in GO is probably laughing hysterically right now).
This post is more written for future me;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the future take your time to read your error statements&lt;/li&gt;
&lt;li&gt;Take care of the low hanging fruit first, before tackling the more difficult problem&lt;/li&gt;
&lt;li&gt;Always use simple test files to test hypotheses why something is not working.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Walking the Eislek Trail</title>
      <link>https://cvanelteren.github.io/talk/walking-the-eislek-trail/</link>
      <pubDate>Mon, 01 May 2023 09:00:00 +0200</pubDate>
      <guid>https://cvanelteren.github.io/talk/walking-the-eislek-trail/</guid>
      <description>&lt;p&gt;A friend and I walked over 100 KM on arguably one of the prettiest walked so far. We walked the trail in reverse starting in La Roche-en-Ardenne (Belgium) moving towards Kautenbach Luxembourg in about 6 days.&lt;/p&gt;
&lt;div style = &#34;border-radius: 50px;overflow: hidden; width: 100%; display:flex; height: fit-content;&#34;&gt;
&lt;iframe src=&#34;https://www.komoot.com/tour/1113965141/embed?profile=1&#34; width=&#34;100%&#34; height=&#34;700&#34; frameborder=&#34;1&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An information theory perspective on tipping points in dynamical networks</title>
      <link>https://cvanelteren.github.io/publication/metastability2022/</link>
      <pubDate>Fri, 29 Jul 2022 16:00:36 +0200</pubDate>
      <guid>https://cvanelteren.github.io/publication/metastability2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An introduction to complex systems</title>
      <link>https://cvanelteren.github.io/talk/an-introduction-to-complex-systems/</link>
      <pubDate>Wed, 15 Jun 2022 17:00:00 +0200</pubDate>
      <guid>https://cvanelteren.github.io/talk/an-introduction-to-complex-systems/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Riddles &amp; programming</title>
      <link>https://cvanelteren.github.io/post/advent17/</link>
      <pubDate>Sat, 30 Apr 2022 21:11:06 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/advent17/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org21acee9&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org0ab586c&#34;&gt;The problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org2d39329&#34;&gt;Step 1: Reaching the target area.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orga9b4df5&#34;&gt;Step 2: Determining the max height&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgb95b059&#34;&gt;Finding the trajectory with the max height.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgf41edd4&#34;&gt;Reflections and conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a id=&#34;org21acee9&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Over the years  I have grown quite fond  of solving riddles.
There  is  something  thrilling about  reasoning  through  a
problem and  finding non-trivial properties  about seemingly
trivial   things.  To   me  programming   gives  a   similar
experience;  by using  the tools  of a  programming language
words are strung  together to provide sentences  that can be
used to  solve a  real-world problem  like finding  the most
efficient route between A or B,  find the minimum state of a
system  moving over  an energy  landscape, sort  files in  a
folder using a particular regex and so on.&lt;/p&gt;
&lt;p&gt;Without knowing  it, my interest  for riddles was  hidden in
programming. Programming to me was  a tool to reason through
complex   logical  problems.   Programming  allowed   me  to
verbalize the complex logical problem. This verbalization is
very important. A  few years ago, I attended  a book reading
from an author  who expressed that speaking  a language also
invokes  a form  of thinking,  and by  speaking a  different
language  your thinking  would also  be bend  and used  in a
different way.  After programming many years  in python, and
matlab.  I have  gotten a  little  bored of  the way  python
speaks. I wanted to think differently.&lt;/p&gt;
&lt;p&gt;Then last christmas,  I read a blog that used  the advent of
code to learn a new programming language. The advent of code
is an initiative that  poses different programming exercises
of increasing  difficulty. The  idea sparked interest  in me
and I set out some months ago  to satisfy my need to learn a
new language and attempt to solve some difficult riddles.&lt;/p&gt;
&lt;p&gt;The advent  code is an  initiative that started in  2015. It
starts  25  days before  christmas  with  a new  programming
exercise every  day leading up to  christmas. The difficulty
of the problem increases as the christmas approaches.&lt;/p&gt;
&lt;p&gt;In  this particular  post, I  will focus  on day  17 of  the
advent of code 2021 as it beat my but and it need not have to!&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org0ab586c&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The problem&lt;/h1&gt;
&lt;p&gt;The  theme of  the advent  of code  2021 is  helping Santa’s
elves finding  a key that was  dropped in the ocean.  On day
17, you are trying to shoot  a probe from you submarine such
that it hits a particular area (see figure below). The probe
is  shot with  a velocity  in the  x, and  y-direction. Each
simulation step, the x, and  y-velocity decreased by 1 where
the x-velocity has a minimum of 0 and y-velocity can grow to
-infinity. The  aim is  to find a  trajectory that  hits the
target and for which the y-position is maximized. Seems easy
right?&lt;/p&gt;
 &lt;figure&gt;
  &lt;img src=&#34;./trajectory.png&#34; alt=&#34;Trulli&#34; style=&#34;width:100%&#34;&gt;
  &lt;figcaption&gt;Shooting a probe from the start to the target. Example trajectories are shown. In green the trajectory is maximizes the height, black minimizes the height, and orange maximizes the x-distance.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What ended up  being difficult is that it is  not trivial to
determine the final  position of the probe  given an initial
velocity. Let’s  say that the probe  has velocity $V=(v_x^0,
v_y^0)$. The position of the probe at time $t$ is determined as&lt;/p&gt;
&lt;p&gt;\begin{equation}
P(t) = \left[ \begin{aligned} x \\\ y \end{aligned} \right] =  \left[\begin{aligned}
&amp;amp;\begin{cases}
\sum_{t=1}^{v_x^0} v_x^0 - t &amp;amp; \text{ if } t &amp;lt; v_x^0\\\
\sum_{t=1}^{v_x^0} t &amp;amp; \text{otherwise}
\end{cases}\\\
&amp;amp; \sum_{t=1}^{t&amp;rsquo;} v_y^0 - t\\\
\end{aligned}
\right]
\end{equation}&lt;/p&gt;
&lt;p&gt;In the continuous case, any trajectory which intersects with
the  target will  be  a valid  trajectory.  However, in  the
discrete scenario, the probe  may overshoot the target. That
is, there may be a gap which for which between $t$ and $t+1$
the probe misses the target. I decomposed the problem in two
steps.  First,  we  need   to  figure  what  properties  the
trajectories that hit  the target have. Second,  we focus on
finding  the trajectory  that  maximizes the  height of  the
trajectory.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org2d39329&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;step-1-reaching-the-target-area&#34;&gt;Step 1: Reaching the target area.&lt;/h1&gt;
&lt;p&gt;Initially I  had the intuition  of plotting the  dynamics of
the of the velocity over  time. The distance traveled in the
x-direction takes  the form of  a sum of  integers. Luckily,
for  the sum  of integers  there is  a nice  expression: the
Gauss sum which takes the form&lt;/p&gt;
&lt;p&gt;$$ \sum_{i = 1}^n i = \frac{1}{2} n (n + 1).$$&lt;/p&gt;
&lt;p&gt;To  see why  this  is,  write down  a  sequence of  positive
integers, e.g. $1  + 2 + 3  + 4$. Next, take  pairs form the
outside in and  notice how the sum of these  pairs are equal
$n+1$. For example, the  sum of $(1,4) = n +  1$ is equal to
the  sum of  $(2,3)  =  n -  1  +  2 =  n  +  1$ (by  moving
“inwards”).  Since we  have  $\frac{1}{2}n$  of these  pairs
Gauss  deduced a  nice closed-formed  solution for  the sum.
This property is  pretty nifty to use in  the computation of
the  distance,  as  it  prevents a  possible  large  sum  in
determining the  distant traveled. Our  distance computation
therefore becomes&lt;/p&gt;
&lt;p&gt;\begin{equation}
P(t) = \left[\begin{aligned}
&amp;amp;\begin{cases}
\frac{1}{2} ((v_x^0) (v_x^0 +1)  -  (v_x^0 - t)(v_x^0 - t + 1))&amp;amp; \text{ if } t &amp;lt; v_x^0\\\
\frac{1}{2} v_x^0 (v_x^0 + 1) &amp;amp; \text{otherwise}
\end{cases}\\\
&amp;amp; \frac{1}{2}((v_y^0)(v_y^0 + 1) - (v_y^0 - t)(v_y^0 -t  +1))\\\
\end{aligned}
\right].
\end{equation}&lt;/p&gt;
&lt;p&gt;In order  to hit the target,  we need to compute  the bounds
which are  allowed for  $v_x^0$ and $v_y^0$.  Let’s consider
the  $x$  direction  first  as  it  is  slightly  easier  to
understand.  The  maximum  $v_x$  that  is  allowed  is  the
velocity in which after $t=1$ step, the $x$ distance travels
still hits the  target. This is true for  $v_x^0 = x_{\max}$
where $x_{\max}$  of the target  is the right most  limit of
the target.  The minimum  velocity for $x$  can be  found by
considering that for  some $t$ the sum of  the velocity will
need to  reach the  left limit of  the target.  The distance
moved along  $x$ direction is  capped of when $v_x(t)  = 0$.
This point is  reached when $v_x^0$ is decreased  to zero or
distance traveled along the $x$ direction is&lt;/p&gt;
&lt;p&gt;$$ x_{\min} = \frac{1}{2} v_x^0(v_x^0 + 1).$$&lt;/p&gt;
&lt;p&gt;The $y$-direction  is a bit  more challenging to  compute as
the  distance traveled  does not  have  a cap  like the  $x$
distance has. Yet, we can  still deduce some bounds. Similar
to the $x$  direction, the max velocity in $y$  is capped by
the distance traveled in $t=1$ step. That is, the fasted you
can reach  the target,  is by  throwing the  projectile with
$v_y^0 =  y_{\min}$. For  the minimum $y$-velocity,  we note
the following: after $t =  v_y^0$ time steps, the trajectory
reaches its  apex, and after  $t&amp;rsquo; = 2 v_y^0$  the trajectory
reaches  the line  $y=0$. The  minimum $y$  velocity has  to
match the  maximum distance from  $y=0$ to the  target. That
is, for $t&amp;rsquo;  + 1$ the velocity $v_y(t&amp;rsquo; +  1) = y_{\min}$. In
other words, relative to the line $y=0$, the velocity has to
match at most $v_y = |y_{\min}|$. This gives us the bounds&lt;/p&gt;
&lt;p&gt;\begin{equation}
\begin{aligned}
\frac{1}{2} v_x^0 (v_x^0 + 1) &amp;amp;\leq &amp;amp; v_x &amp;amp;\leq x_{\max} \\\
y_{\min} &amp;amp;\leq  &amp;amp; v_y &amp;amp;\leq |y_{\min}|.
\end{aligned}
\end{equation}&lt;/p&gt;
&lt;p&gt;Side note: some other random  property I found was that when
you have  some velocity $v_y$  and it  is shifted by  1, the
following $y$  distance also shifts  by 1. That is,  $v_y&amp;rsquo; =
v_y + 1 \to y&amp;rsquo; = y - 1$ for the same time-span $t$.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orga9b4df5&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;step-2-determining-the-max-height&#34;&gt;Step 2: Determining the max height&lt;/h1&gt;
&lt;p&gt;For a given starting velocity $v_y^0$ the max height will be
reached when $v_y(t)$ reaches zero. This is readily computed
using the Gauss sum:&lt;/p&gt;
&lt;p&gt;\begin{equation}
y_{\max} = \frac{1}{2} v_y^0 ( v_y^0  + 1 ).
\end{equation}&lt;/p&gt;
&lt;p&gt;For example for  $v_y^0=0$ the max height will  be zero, and
for $v_y^0 = 4$ the max height will be 6.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgb95b059&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;finding-the-trajectory-with-the-max-height&#34;&gt;Finding the trajectory with the max height.&lt;/h1&gt;
&lt;p&gt;Finding   the  highest   trajectory  now   merely  involves
evaluating  the over  the  ranges indicated  in  step 1  and
keeping  track of  the  starting velocities  that yield  the
highest value  (step 2). A  “priority queue” can be  used to
quickly find the  max value: by starting  from strongest $y$
velocities first, the first trajectory that lands within the
target  area,  will  also  be  the  starting  velocity  that
maximizes the height.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgf41edd4&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;reflections-and-conclusions&#34;&gt;Reflections and conclusions&lt;/h1&gt;
&lt;p&gt;Initially,  I  approached this  problem  by  looking at  the
various ranges that the velocities  in $x$ and $y$ can take.
I spent quite some time thinking  of a clever way to somehow
come up with a closed-form solution. Since I was writing the
code up in  Nim I did not have access  to fancy optimization
libraries found in for example  python (or at least I didn’t
look for one). This prompted  me to look further than merely
over  complicated  the  problem   and  throwing  some  fancy
abstract  analysis  on it.  After  a  couple of  hours,  the
problem  seemed easier  when looking  at it  from the  right
perspective.   Here,  the   trick  was   realize  that   the
optimization had  to involve identifying the  correct ranges
and setting  up a  priority queue. Overlooking  these ranges
gives  no  guarantees  if the  solution  converges  although
brute-force approaches will give you the proper solution.&lt;/p&gt;
&lt;p&gt;After nearly 17 exercises in  Nim, my experience with coding
up examples  and structuring code improved  remarkable. When
the time is ripe I will  post a full solution and reflection
on my  adventure with advent and  Nim in a future  post. For
now, I  would like to  remark that  taking up this  task was
initially  not easy.  Implementing simple  ideas takes  more
time, and  nearly everything  has to  be looked  up. Looking
back, the ease at which I  write Nim code is faster and more
fluent  than  the  initial   couple  of  exercises.  I  also
appreciate  how free  Nim  is in  expressing your  thoughts;
functions  operate on  data  and the  way  your write  these
operations are rather free.&lt;/p&gt;
&lt;p&gt;The speed  of programming in  a novel language shows  both a
maturating of  the knowledge I have  acquired of programming
languages  I  can  fluently  write, but  also  a  manner  of
thinking. Techniques and algorithms that are relatively easy
in  language A  becomes  more challenging  or impossible  in
language B; one has to  look for other approaches to harness
the power  of that  particular language.  Nim is  a powerful
language that writes really well.  It’s too bad that is does
not score higher among the programming popularity charts.&lt;/p&gt;
&lt;p&gt;As  the months  progress and  christmas seems  like a  vague
memory, I  feel the pressure of  finishing these programming
riddles. There is a  remarkable difference in difficulty for
the  earlier  exercises  and   the  latter  ones.  For  some
exercises, I  found multiple  solutions. I believe  this one
also has a  nice mathematical solution that  seems to escape
me and I may come back to  it later and update this post. To
me,  these exercises  form a  nice  brain tease  and I  will
slowly work  through them when I  find the time. See  you in
the next post!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Speeding up python code with cython pure</title>
      <link>https://cvanelteren.github.io/post/cython_pure/</link>
      <pubDate>Tue, 15 Mar 2022 15:27:46 +0100</pubDate>
      <guid>https://cvanelteren.github.io/post/cython_pure/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org47f4632&#34;&gt;What are header files?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgb06f8c3&#34;&gt;Cython pure mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgbcf09bc&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org9f605fb&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In  coding there  is  a trade-off  between writing  abstract
code,  and high  performant  code. This  trade-off is  often
embodied  in different  languages.  For  example, python  is
considered  to  be an  abstract  language  whereas C++/C  is
considered a  low level language. Abstract  languages allows
for rapid  prototyping while hiding away  the implementation
details in packages or modules.  A key strategy for abstract
languages is  providing high level interfaces  for low-level
implementations  allowing  for  a   “best  of  both  worlds”
scenario,   improving  the   performance  of   the  abstract
language. However, there are cases in which the code written
is within  the ecosystem of  the abstract language,  yet the
performance needs to increase. For  python there are ways to
improve  the performance  of python  code. For  example, one
could use  Numba to utilize the  Just-In-Time-Compiler (JIT)
or  use a  specialized compiled  version of  python such  as
pyston. Cython  offers yet another way  by compiling special
“pyx” files into a shared object that can then be interfaced
with from  python, creating a hybrid  language between C/C++
and          python          (see          my          prior
&lt;a href=&#34;https://cvanelteren.github.io/post/cython_templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post
on
cython templates&lt;/a&gt;). Cython has the advantage of leveraging the
existing  python stack,  and  enhancing it  with faster  run
time. It works specifically well if the original python code
contains a  lot of for  loops that cannot be  optimized away
by other  means. Although the cython  ecosystem has matured
quite  a lot  in recent  years, it  requires knowledge  from
other  languages to  implement algorithms  efficiently. This
creates a  gap for python  developers wanting to have  a bit
more performance.&lt;/p&gt;
&lt;p&gt;A more recent development  is compiling existing python code
in “pure” mode in cython. In pure mode, the original code is
left  untouched (i.e.  the &lt;code&gt;.py&lt;/code&gt;  file) and  the performance
enhancing code is written in a special header file (&lt;code&gt;.pxd&lt;/code&gt;).
This  has the  advantage for  increasing the  performance of
existing python code while  retaining the compatibility with
non-cython  users. I  &lt;a href=&#34;https://github.com/cvanelteren/networkx/commit/7f7f3b8ff923917f42a6101f7e27e5b7396d2828&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recently&lt;/a&gt;  implemented the  forceatlas2
layout in cython’s pure mode  to gain a 400 percent increase
over the traditional python code.&lt;/p&gt;
&lt;p&gt;In this  post, I  wish to introduce  the reader  to cython’s
pure mode and  test some simple benchmarks to  see what kind
of performance boosts we can have.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org47f4632&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-are-header-files&#34;&gt;What are header files?&lt;/h1&gt;
&lt;p&gt;In traditional  compiled languages such as  C/C++ the source
code  is split  into  the implementation  and header  files.
Header  files can  be  thought of  as the  index  of a  book,
whereas  the  source files  can  be  thought of  the  actual
content of a  book’s chapter. The header  file instructs the
compiler  (and the  programmer) on  what is  present in  the
implementation and  how external code can  interface with it.
In python,  the concept of  source and header file  does not
exist. The closest thing I can think of is showing what kind
of class properties a class has. Something similar to,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Chicken:
    mass = 0
    height = 0
    def __init__(self, name):
        self.name = name
&lt;p&gt;Karl = Chicken(&amp;quot;Karl&amp;quot;)
print(f&amp;quot;My name is {Karl.name} and I weight {Karl.mass} kg&amp;quot;)&lt;/p&gt;
&lt;p&gt;My name is Karl and I weight 0 kg
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Here, the  variables &lt;code&gt;mass&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;  are defined before
the class is inititalized. It  tells the programmer that the
class  &lt;code&gt;Chicken&lt;/code&gt;   has  two  class  properties   &lt;code&gt;mass&lt;/code&gt;  and
&lt;code&gt;height&lt;/code&gt;. A  python programmer would put  these variables in
the class  constructor as  these are individual  traits. The
use of init function is general  is not the same as this use
case. For the init function  may transform the values passed
to the  object, whereas here  &lt;code&gt;mass&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;  are clear
class traits.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgb06f8c3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;cython-pure-mode&#34;&gt;Cython pure mode&lt;/h1&gt;
&lt;p&gt;Cython’s  pure  mode  takes  an  existing  python  file  and
augments it  by an header  file. Often this header  file has
the  same name  as the  original  python file  but with  the
extension &lt;code&gt;.pxd&lt;/code&gt; (or definition file). Let’s take an example
function. Assume we want to  implement a matrix dot product.
A naive implementation will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#file: dot.py
import numpy as np
def dot(A: np.ndarray, B: np.ndarray) -&amp;gt;  np.ndarray:
    m, n = A.shape
    k = B.shape[1]
    assert n == B.shape[0], &amp;quot;matrices A and B are not alligned&amp;quot;
    output = np.zeros((m, k))
    for idx in range(m):
        for jdx in range(n):
            for kdx in range(k):
                output[idx, kdx] += A[idx, jdx] * B[jdx, kdx]
    return output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Testing  the code  for speed  we can  confirm that  this dot
product is quite slow.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
A = np.eye(10)
B = np.eye(10)
%timeit -n10 -r10 dot(A, B)
&lt;p&gt;595 µs ± 301 µs per loop (mean ± std. dev. of 10 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In comparison the numpy implementation
is about 200 times faster&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
%timeit -n10 -r10 np.dot(A, B)
&lt;p&gt;The slowest run took 26.21 times longer than the fastest. This could mean that an intermediate result is being cached.
7.48 µs ± 16 µs per loop (mean ± std. dev. of 10 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Let’s say we really like our dot implementation, but we wish
the python code  was a bit faster. For cython  pure mode, we
would need to augment the py  file with pxd file. The header
file would need to contain&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The functions name&lt;/li&gt;
&lt;li&gt;The functions return type&lt;/li&gt;
&lt;li&gt;The functions input arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We create the file &lt;code&gt;dot.pxd&lt;/code&gt; and fill in the header as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# file: dot.pxd
# distutils: language = c++
# or c if you want c
import cython
@cython.locals(m = size_t, n = size_t, k = size_t,
               idx = size_t, jdx = size_t, kdx = size_t,
               output = double[:, ::1])
cpdef double[:, ::1] dot(double[:, ::1] A, double[:, ::1] B)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What exactly  happened here?  The `cython.locals`  tells the
compiled  which  variables  are   declared  inside  the  dot
function in the py file. It tells the compile what the types
are. The function description is exposed through cython with
the &lt;code&gt;cpdef&lt;/code&gt;  statement. This  exposes the function  to calls
from  python in  the &lt;code&gt;.so&lt;/code&gt;  file.  Next the  return type  is
given. Here a memoryview is used. These are raw buffers that
can  be  directly converted  from  numpy.  They have  faster
access  than normal  the normal  numpy arrays.  Using memory
views has the disadvantages that  the numpy methods that are
defined on  the array  are disable.  For example  one cannot
call &lt;code&gt;A.sum&lt;/code&gt;  or &lt;code&gt;A.mean&lt;/code&gt; or &lt;code&gt;A.reshape&lt;/code&gt;  anymore when using
memory  views. An alternative  would be  to use  `np.ndarray`
however these are still considered  to be python objects and
therefore  do  not  have  increased speed  compared  to  the
memoryviews.&lt;/p&gt;
&lt;p&gt;We then compile the source code either from a setup file(not
covered  but  preferred in  modules)  or  directly from  the
commandline with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cythonize build_ext --inplace dot.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which produces an .so file. Let’s test the speed!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from dot import dot as cydot
%timeit -n10 -r10 cydot(A, B)
&lt;p&gt;4.11 µs ± 557 ns per loop (mean ± std. dev. of 10 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Which   is  a   nearly  200   percent  increase   in  speed!
Importantly,  it   is  nearly   on  par  with   the  numpy’s
implementation!&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgbcf09bc&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;benchmarks&#34;&gt;Benchmarks&lt;/h1&gt;
&lt;p&gt;Let’s  benchmark  the  results  to  see  how  the  different
implementations scale with matrix size.&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./pure_performance.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org9f605fb&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Cython can  be used  to speed up  existing python  code. The
preferred way  is to  use cython pyx  files with  pxd header
files. An alternative is to use cython pure mode to speed up
existing  python   code.  Pure  mode  allows   for  smoother
collaboration with numerical experts and python developers.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Information flows in complex systems</title>
      <link>https://cvanelteren.github.io/talk/information-flows-in-complex-systems/</link>
      <pubDate>Fri, 11 Feb 2022 15:30:00 +0100</pubDate>
      <guid>https://cvanelteren.github.io/talk/information-flows-in-complex-systems/</guid>
      <description></description>
    </item>
    
    <item>
      <title>From matplotlib to D3</title>
      <link>https://cvanelteren.github.io/post/d3/</link>
      <pubDate>Tue, 08 Feb 2022 18:09:35 +0100</pubDate>
      <guid>https://cvanelteren.github.io/post/d3/</guid>
      <description>&lt;!-- &lt;script src=&#34;./test.js&#34;&gt;&lt;/script&gt; --&gt;
&lt;!-- &lt;div id=&#34;d3-example&#34;&gt;&lt;/div&gt; --&gt;
&lt;!-- &lt;div id=&#34;output&#34;&gt;&lt;/div&gt; --&gt;
&lt;!-- &lt;script src=&#34;https://cdn.jsdelivr.net/npm/d3@7&#34;&gt;&lt;/script&gt; --&gt;
&lt;!-- &lt;script src=&#34;./test.js&#34;&gt;&lt;/script&gt; --&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org8d7891c&#34;&gt;Introduction&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org02e061d&#34;&gt;TLDR&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org9763250&#34;&gt;Starting the D3 Journey&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org22859dd&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org81e6722&#34;&gt;Setting up an environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org26d41fa&#34;&gt;Understanding D3s design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orge855feb&#34;&gt;Making the first plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org650d065&#34;&gt;Adding interactivity&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgbcede09&#34;&gt;Designing mouseOver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgbc55fb9&#34;&gt;Designing mouseLeave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgb1c1c86&#34;&gt;Designing mouseMove&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgd6b55cd&#34;&gt;Bonus: adding a trend line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgacb8da5&#34;&gt;Putting the pieces together&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org80c6323&#34;&gt;Summary&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgfdeda20&#34;&gt;Honorable mentions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;style&gt;
&lt;p&gt;.links line {
stroke: #999;
stroke-opacity: 0.6;
}&lt;/p&gt;
&lt;p&gt;.nodes circle {
stroke: #fff;
stroke-width: 1.5px;
}
&lt;/style&gt;&lt;/p&gt;
&lt;script src=&#34;https://code.jquery.com/jquery-3.2.1.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;banner&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;./test2.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a id=&#34;org8d7891c&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Data visualization is  a crucial tool to  gain insights into
data. For  data aficionados it  is a difficult task  to find
the  balance  between  visual prowess  and  meaningful  data
visualization.  My visualization  journey started  in matlab
many years ago. Matlab’s visualization tool are powerful and
are  apart of  many scientist’s  and engineers  toolkit. For
static plots,  matlab’s toolkit is excellent.  However, over
the years  I got a  deeper desire for interactive  tools and
animations. Although this is  very much possible, the nature
of matplotlib’s ecosystem  made it a bit  awkward in dealing
with  complicated  animations.  As years  passed,  I  slowly
transitioned to  the python scientific stack  which prompted
me to  switch to  matlab’s equivalent matplotlib.  As python
gained providence among the scientific community, so did the
need  for interactive  visualizations. The  notebook culture
grew,  and  so did  the  ports  to  allow matplotlib  to  be
visualized in interactive contexts. Matplotlib has served me
well for many  years; having its roots  in matlab’s plotting
ecosystem,  it  moved more  and  more  to object  orientated
design familiar  to many  pythonistas. However, I  was still
rather unhappy  with sharing matplotlib code.  Preferable, I
would like to  host the visualizations on a  website where a
user can interact and explore  with the data. For the python
ecosystem, this always requires a python interpreter running
on a server somewhere. I was aware of D3 for many years, and
was rather impressed by the visuals that it generates. After
doing several tutorial online over  the years, I felt rather
empty and left  with a lack of  understanding. Many tutorial
allow  you  to copy  paste,  but  not understand  &lt;em&gt;how&lt;/em&gt;  the
visualization work  under the hood.  In the year 2022  it is
finally time to pick-up on  my previous attempts to learn D3
(and  javascript). The  focus will  be for  matplotlib users
that are interested in learning D3. I assume that the reader
is familiar  with base  programming. I  am not  too familiar
with  javascript,  and  as  such learning  that  will  be  a
secondary goal  for me. In  the end, I  aim to make  a graph
visualization tool with the use of  D3. In this post, I will
guide the reader in my process  and share my thoughts on how
the  code  works  internally. For  background  knowledge,  I
assume the reader is  familiar with matplotlib and generally
programming.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org02e061d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TLDR&lt;/h2&gt;
&lt;p&gt;I wrote down some thoughts on making plots in D3 by using my
knowledge  from  matplotlib.  The   code  can  be  found  at
&lt;a href=&#34;http://cvanelteren.github.io/post/d3/first_plot.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://cvanelteren.github.io/post/d3/first_plot.js&lt;/a&gt; The final
plot is given below in &lt;a href=&#34;#orgacb8da5&#34;&gt;2.6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org9763250&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;starting-the-d3-journey&#34;&gt;Starting the D3 Journey&lt;/h1&gt;
&lt;p&gt;&lt;a id=&#34;org22859dd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Familiarize with D3 ecosystem
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make simple line plot&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make simple scatter plot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org81e6722&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up-an-environment&#34;&gt;Setting up an environment&lt;/h2&gt;
&lt;p&gt;In  order to  work with  d3, it  is possible  to install  it
locally  with `npm`  (e.g. `npm  install -g  d3`) or  use it
directly  from  the  Contend Delivery  Network  (CDN).  This
latter option effectively acts as an import statement that a
device connected to  the internet could use. I  will use the
latter  option  as  the  target  is  running  visualizations
online. For more information one could follow &lt;a href=&#34;https://www.tutorialsteacher.com/d3js/setup-d3js-development-environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this tutorial&lt;/a&gt;.
for setting it up locally. A typical modern website consists
of  three components:  the webpage  content, the  looks, and
possible external scripts. The workhorse for modern websites
is  Hyper  Markum Language  (HTML);  it  defines the  basics
structure of a  webpage. We will be writing  minimal HTML in
this post. All that is necessary to know is that HTML is the
“core” of how website determines where what goes. Javascript
can be used  to dynamically serve content  by interacting or
writing  HTML.  How  a  website  looks  is  controlled  with
Cascading Style Sheets or CSS.  The files are used to change
things like color, size of an  image and so on. Again CSS is
not the  focus here, it is  merely important to be  aware of
the base components  as D3 will interact  with them. Lastly,
javascript is in  essence the programming for the  web. I am
not an  expert in  any web-based development  and as  such I
would recommend elsewhere  for learning the ins  and outs of
javascript. My goal here is to  make pretty plots and use my
extensive  programming experience  to  just  figure out  the
syntax.&lt;/p&gt;
&lt;p&gt;A minimal HTML file for D3 would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- file: hello_d3.html --&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;!-- get module from cdn --&amp;gt;
  &amp;lt;script src=&amp;quot;https://d3js.org/d3.v6.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- or load it locally --&amp;gt;
  &amp;lt;!-- &amp;lt;script src=&amp;quot;../d3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;p&gt;&amp;lt;script&amp;gt;
&amp;lt;!&amp;ndash; write your d3 code here.. &amp;ndash;&amp;gt;
&amp;lt;script src=&amp;quot;./first_plot.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;You can  view this file  by opening  this file in  a browser
(e.g. `firefox hello&lt;sub&gt;d3.html&lt;/sub&gt;` or  equivalent for the browser
you  are  using). The  file  should  be empty.  Let’s  start
filling it up with D3 goodiness!&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org26d41fa&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;understanding-d3s-design&#34;&gt;Understanding D3s design&lt;/h2&gt;
&lt;p&gt;Traditional  matplotlib  had   concept  of  functions,  i.e.
`plt.figure()` would open a figure and `plt.plot` would plot
a line  plot in  the most  recent figure.  Modern matplotlib
uses an object oriented approach. A figure would opened like&lt;/p&gt;
&lt;p&gt;There  is a  concept of  the “figure”  that hosts  different
subplots which each  hold different axes. These  axes can be
of   different  types   such  as   geographic,  polar,   the
traditional Euclidean  plane, and  so on.  There is  a clear
hierarchy on  what holds  what. In  matplotlib the  axes are
essentially which  interacts with the data.  In contrast, D3
assigns data attributes directly  to images. That is, inside
a “canvas” (plt.figure) scalable  vector graphics (svgs) are
created   which  gets   as   attributes  data   coordinates.
Effectively, D3  allows you to make  a cake but you  have to
provide  all  the  ingredients:  axes  are  not  created  by
default.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orge855feb&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;making-the-first-plot&#34;&gt;Making the first plot&lt;/h2&gt;
&lt;p&gt;Let’s  start  with  making  a scatter  plots.  We  start  by
creating a figure. I will write  the code for the first plot
in a  file names `first\&lt;sub&gt;plot.js&lt;/sub&gt;`  and will call it  from the
html we just created above, yielding:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- file: hello_d3.html --&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;!-- get module from cdn --&amp;gt;
  &amp;lt;script src=&amp;quot;https://d3js.org/d3.v7.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- or load it locally --&amp;gt;
  &amp;lt;!-- &amp;lt;script src=&amp;quot;../d3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;
  &amp;lt;script src=&amp;quot;./first_plot.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&lt;p&gt;&amp;lt;script&amp;gt;
&amp;lt;!&amp;ndash; write your d3 code here.. &amp;ndash;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Next, we  create our  figure by selecting  the `#first_ plot`
div and  and adding a  graphic (svg) to  it. The svg  is now
empty, but we will soon fill it with some data.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// define margins
 const margin = {top: 10,
                right: 30,
                bottom: 30,
                left: 60};
const width = 400 - margin.left - margin.right;
const height = 400 - margin.top - margin.bottom;
&lt;p&gt;// create canvas and select the graphics
var svg = d3.select(&amp;quot;#first_plot&amp;quot;)
.append(&amp;quot;svg&amp;quot;)
.attr(&amp;quot;width&amp;quot;, width + margin.left + margin.right)
.attr(&amp;quot;height&amp;quot;, height + margin.top + margin.bottom)
.append(&amp;quot;g&amp;quot;)
.attr(&amp;quot;transform&amp;quot;, &lt;code&gt;translate(${margin.left}, ${margin.top})&lt;/code&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In this snippet we select a div in the html in which we want
to plot our  graph. We specify its width and  height and add
an svg  graphic to it.  In addition,  we append a  new group
(indicated by `g`) that is transformed (placed) a little bit
from the left and top. Playing around with the parameters is
highly  encourage to  see how  it affects  the plots.&lt;/p&gt;
&lt;p&gt;Next, let’s add some data. Data  can be loaded from a csv or
json  files,  I  opted  here to  learn  something  how  list
comprehensions can  be emulated  in javascript. I  create an
`Array` type  and specify  its length.  Then I  populate the
array with a function. One can read this procedure similarly
to a  list comprehension. That  is, &lt;code&gt;[some_func(x) for  x in range(100)]&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// make scatter
var data = Array.from({length: 1000}, (_, idx) =&amp;gt; {
    return {x: idx * 0.1/ ( 2 * 3.141592 ),
            y:  (Math.sin(idx * 0.1/ ( 2 * 3.141592 )) +  1 * Math.random())}
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order  to complete the  figure, we  need to tell  D3 what
axes to map the data on. In  order to do this, we create two
axes (x, y) to form a Euclidean plane.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// construct axes
const x = d3.scaleLinear()
      .domain([0, 100])
      .range([ 0, width ]);
&lt;p&gt;const y = d3.scaleLinear()
.domain([ 0, 100])
.range([ height, 0 ]);
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Note that the coordinate system  starts from a imaginary box
on the top  left. Hence, the y-axis needs to  be moved (with
the `.range` property) down  by `height` which was specified
in the canvas  specs. Similarly, the x-axis  spans the width
of our canvas.&lt;/p&gt;
&lt;p&gt;The axes  need to  be added  to our  svg. For  a traditional
plot, the  x-axis has to be  moved `height` down to  yield a
traditional xy plane.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// add axes
svg.append(&amp;quot;g&amp;quot;)
   .attr(&amp;quot;transform&amp;quot;, `translate(0, ${height})`)
   .call(d3.axisBottom(x));
&lt;p&gt;svg.append(&amp;quot;g&amp;quot;)
.call(d3.axisLeft(y));
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Finally, we  add  the images  to  the svg  by
specifying another  grounp `g` and popuplating  it using the
`data` function.  The centers of the  circles are specificed
by  maps  again. The  funny  `d`  syntax specifies  a  lamba
function. This is the same  as `lambda x: [some expression]`
in python. Finally, attributes such  as the color and radius
(`r`) are set.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var scatter = svg.append(&amp;quot;g&amp;quot;)
    .selectAll(&amp;quot;dot&amp;quot;)
    .data(data)
    .join(&amp;quot;circle&amp;quot;)
    .attr(&amp;quot;cx&amp;quot;, d =&amp;gt; x(d.x))
    .attr(&amp;quot;cy&amp;quot;, d =&amp;gt; y(d.y))
    .attr(&amp;quot;r&amp;quot;, 2)
    .style(&amp;quot;fill&amp;quot;, &amp;quot;#729B79&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are now  ready to plot! Running the final  HTML code in a
browser should  yield a fancy  sine plot with  some noise.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org650d065&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-interactivity&#34;&gt;Adding interactivity&lt;/h2&gt;
&lt;p&gt;The plot above is a bit boring. Where D3 really shines is in
its interactivity. What if we  want to know exactly what the
xy  coordinates are  in  the  plot? Let’s  find  out how  to
achieve this.&lt;/p&gt;
&lt;p&gt;We add  a hover tool to  display the x,y coordinates  of the
generated data. This  involves adding another div  to put in
some HTML. We  start by setting the opacity to  0, hiding it
from view and “popping” it back  into view when a data point
is selected.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// create a tooltip
var Tooltip = d3.select(&amp;quot;#first_plot&amp;quot;)
  .append(&amp;quot;div&amp;quot;)
  .style(&amp;quot;opacity&amp;quot;, 0)
  .attr(&amp;quot;class&amp;quot;, &amp;quot;tooltip&amp;quot;)
  .style(&amp;quot;background-color&amp;quot;, &amp;quot;gray&amp;quot;)
  .style(&amp;quot;border&amp;quot;, &amp;quot;solid&amp;quot;)
  .style(&amp;quot;border-width&amp;quot;, &amp;quot;2px&amp;quot;)
  .style(&amp;quot;border-radius&amp;quot;, &amp;quot;5px&amp;quot;)
  .style(&amp;quot;padding&amp;quot;, &amp;quot;5px&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we  have to  define the behavior  what happens  to the
toolbar (and the  dots) when the mouse hovers  over it. This
means we have to create 3 functions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mouseOver: when the mouse moves over the point&lt;/li&gt;
&lt;li&gt;mouseLeave: when the mouse leaves the point&lt;/li&gt;
&lt;li&gt;mouseMove: when the mouse moves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;orgbcede09&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;designing-mouseover&#34;&gt;Designing mouseOver&lt;/h3&gt;
&lt;p&gt;In  order to  let  the  datapoint shine,  we  turn down  the
opacity  and  highlight  the selected  point.  Finally,  the
tooltip has to popup, reflecting the data coordinates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let mouseOver = function(d) {
  // turn down opacity of all other circles
  d3.selectAll(&amp;quot;circle&amp;quot;)
    .transition()
    .duration(200)
    .style(&amp;quot;opacity&amp;quot;, .5)
&lt;p&gt;// make selection yellow
d3.select(this)
.transition()
.duration(200)
.style(&amp;quot;opacity&amp;quot;, 1)
.style(&amp;quot;fill&amp;quot;, &amp;quot;yellow&amp;quot;)&lt;/p&gt;
&lt;p&gt;// update tooltip
Tooltip
.style(&amp;quot;opacity&amp;quot;, 1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgbc55fb9&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;designing-mouseleave&#34;&gt;Designing mouseLeave&lt;/h3&gt;
&lt;p&gt;This  does the  effective  opposite of  the function  above;
turning down up the opacity of all other dots.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let mouseLeave = function(d) {
  d3.selectAll(&amp;quot;circle&amp;quot;)
    .transition()
    .duration(200)
    .style(&amp;quot;opacity&amp;quot;, .8)
&lt;p&gt;d3.select(this)
.transition()
.duration(200)
// .style(&amp;quot;fill&amp;quot;, &amp;quot;transparent&amp;quot;)
.style(&amp;quot;fill&amp;quot;, &amp;quot;#729B79&amp;quot;)&lt;/p&gt;
&lt;p&gt;// update tooltip
Tooltip
.style(&amp;quot;opacity&amp;quot;, 0)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgb1c1c86&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;designing-mousemove&#34;&gt;Designing mouseMove&lt;/h3&gt;
&lt;p&gt;This function removes  the toolbox when the  mouse is moved.
This makes sure the toolbox does not confuse the enduser.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let mouseMove = function(event, d) {
  Tooltip
      .html(`x: ${d.x} &amp;lt;br&amp;gt; y: ${d.y}`) // print inside the tooltip
      .style(&amp;quot;left&amp;quot;, event.pageX + &amp;quot;px&amp;quot;) // move the toolbox to the correct position
      .style(&amp;quot;top&amp;quot;, event.pageY + &amp;quot;px&amp;quot;)
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;orgd6b55cd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;bonus-adding-a-trend-line&#34;&gt;Bonus: adding a trend line&lt;/h3&gt;
&lt;p&gt;As a  bonus we add  a trend line to  show how well  our data
fits a trend.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// trend curving
let c = d3.curveNatural;
svg
  .append(&amp;quot;path&amp;quot;)
  .datum(data)
  .attr(&amp;quot;stroke&amp;quot;, &amp;quot;#475B63&amp;quot;)
  .attr(&amp;quot;fill&amp;quot;, &amp;quot;transparent&amp;quot;)
  .attr(&amp;quot;stoke-width&amp;quot;, 1.5)
  .attr(&amp;quot;d&amp;quot;, d3.line()
        .x(d =&amp;gt; x(d.x))
        .y(d =&amp;gt; y(d.y))
        .curve(c)
       )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;orgacb8da5&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;putting-the-pieces-together&#34;&gt;Putting the pieces together&lt;/h2&gt;
&lt;p&gt;Next, we  need to tell D3  to add this functionality  to the
dots only. We add the  functions to the scatter dots defined
above, yielding:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var scatter = svg.append(&amp;quot;g&amp;quot;)
  .selectAll(&amp;quot;dot&amp;quot;)
  .data(data)
  .join(&amp;quot;circle&amp;quot;)
  .attr(&amp;quot;cx&amp;quot;, d =&amp;gt; x(d.x))
  .attr(&amp;quot;cy&amp;quot;, d =&amp;gt; y(d.y))
  .attr(&amp;quot;r&amp;quot;, 5)
  .style(&amp;quot;fill&amp;quot;, &amp;quot;blue&amp;quot;)
  .on(&amp;quot;mouseover&amp;quot;, mouseOver) // new
  .on(&amp;quot;mouseleave&amp;quot;, mouseLeave) // new
  .on(&amp;quot;mousemove&amp;quot;, mouseMove) // new
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;first_plot&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;./first_plot.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;We have  now created an  interactive scatter plot!  The TLDR
code          can           be          found          under
&lt;a href=&#34;http://cvanelteren.github.io/post/d3/first_plot.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://cvanelteren.github.io/post/d3/first_plot.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org80c6323&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;We have seen how to create  a simple plot in D3. Compared to
matplotlib  D3  is  more   verbose;  everything  has  to  be
specified. Some packages do exist that build on top of D3 to
prevent this verboseness (e.g.  Chart.js), however, for full
control  one  needs to  dive  in  deep  with D3.  The  major
advantage for D3 is its portable  (it can exist in the web),
and interactivity.  Building a shiny dashboard  to visualize
your  major findings  for data  analysts and  scientists are
hard to  beat. For  producing quality publication  graphs, I
would still stick to matplotlib however. In summary we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D3 allows for high quality data-driven documents;
&lt;ul&gt;
&lt;li&gt;May form the basis for dashboard;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learning curve is relatively high and requires more amount
of coding than matplotlib;
&lt;ul&gt;
&lt;li&gt;D3 allow  for full  control which comes  at the  cost of
verbose coding practices;&lt;/li&gt;
&lt;li&gt;It is flexible, and can produce beautiful graphs (see &lt;a href=&#34;https://www.d3-graph-gallery.com/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactivity  is  a  real  benefit  for  D3  compared  to
matplotlib.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In future  posts I will  explore the data  visualizations on
networks a bit more. See you in the next one!&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgfdeda20&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;honorable-mentions&#34;&gt;Honorable mentions&lt;/h2&gt;
&lt;p&gt;These packages  exist for making  pretty plots in  python or
can convert to content that can be hosted on the web.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mpld3.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mpld3&lt;/a&gt; converts matplotlib figures to D3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plotly  (and  dash)&lt;/a&gt;  use   plotly  to  make  nice  looking
dashboard.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.bokeh.org/en/latest/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bokeh&lt;/a&gt;: D3 for python&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://proplot.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proplot&lt;/a&gt;: matplotlib but with sensible defaults&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://seaborn.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seaborn&lt;/a&gt;: additional functionality on top of matplotlib&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Network geometry of social networks</title>
      <link>https://cvanelteren.github.io/talk/network-geometry-of-social-networks/</link>
      <pubDate>Fri, 28 Jan 2022 10:00:00 +0100</pubDate>
      <guid>https://cvanelteren.github.io/talk/network-geometry-of-social-networks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Metastability</title>
      <link>https://cvanelteren.github.io/project/metastability/</link>
      <pubDate>Thu, 13 Jan 2022 11:20:07 +0100</pubDate>
      <guid>https://cvanelteren.github.io/project/metastability/</guid>
      <description>&lt;p&gt;Abrupt, system-wide transitions can be endogenously generated by seemingly stable networks of interacting dynamical units, such as mode switching in neuronal networks or public opinion changes in social systems. However, it remains poorly understood how such `noise-induced transitions&amp;rsquo; are generated by the interplay of network structure and dynamics on the network. We identify two key roles for nodes on how tipping points can emerge in dynamical networks governed by the Boltzmann-Gibbs distribution. In the initial phase, initiator nodes absorb and transmit short-lived fluctuations to neighboring nodes, causing a domino-effect making neighboring nodes more dynamic. Conversely, towards the tipping point we identify stabilizer nodes whose state information becomes part of the long-term memory of the system. We validate these roles by targeted interventions that make tipping points more (less) likely to begin or lead to systemic change. This opens up possibilities for understanding and controlling endogenously generated metastable behavior.&lt;/p&gt;
&lt;p&gt;For more information, please see the full article: &lt;a href=&#34;https://arxiv.org/abs/2207.14016&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/2207.14016&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kawasaki dynamics</title>
      <link>https://cvanelteren.github.io/post/kawasaki/</link>
      <pubDate>Mon, 15 Nov 2021 16:07:17 +0100</pubDate>
      <guid>https://cvanelteren.github.io/post/kawasaki/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;p&gt;One of  the traditional  models that come  up time  and time
again  is the  Ising  model. Originally  developed to  study
ferromagnets, the  model is  considered one of  the simplest
models that exhibits “complex” behavior and has been applied
to study  a variety of  phenomena such as  opinion dynamics,
neural dynamics, segregation, and even criminal systems.&lt;/p&gt;
&lt;p&gt;The Ising  model consists of a  collection of nodes $S  = \{
s_1, \dots,  s_n \}$  which contains a  alphabet $X  = \{-1,
1 \}$. That is, each “vertex”  or “node” contains a “spin” or
binary state representing up or down, opinion A or B, firing
or non-firing.&lt;/p&gt;
&lt;p&gt;The system dynamics of  the Ising model occurs traditionally
by  Glauber update.  Each time  step $t$  a spins  is chosen
according to some function  $g(S)$. Traditionally, $g(S)$ is
chosen  to be  uniform over  the  nodes in  the system.  The
energy of the sampled node  is then computed compared to its
opposite state. That is, a proposal state is drawn uniformly
from $X$ and “accepted” using Metropolis-Hasting sampling&lt;/p&gt;
&lt;p&gt;\begin{equation}
\begin{aligned}
A(s_i \to s_i&amp;rsquo;) = \frac{ p(s_i&amp;rsquo;) }{ p(s_i) }  = \Bigg \{
\begin{aligned}
\exp( -\beta \Delta E) &amp;amp; \textrm{ if } \Delta E  &amp;lt; 0 \\
1 &amp;amp; \textrm{ otherwise }.\\
\end{aligned}
\end{aligned}
\end{equation}&lt;/p&gt;
&lt;p&gt;The difference in energy is given as&lt;/p&gt;
&lt;p&gt;$$ \Delta E= \mathbb{H}(S&amp;rsquo;) - \mathbb{H}(S)$$&lt;/p&gt;
&lt;p&gt;with $\mathbb{H}(S)  = - \sum_{ij}  J_{ij} s_i s_j -  \sum_{i} h_i
s_i$, where $h_i$ represents some external magnetic field.&lt;/p&gt;
&lt;p&gt;For  a   single  spin   difference  results   in  $$   \Delta  E=
\mathbb{H}(s_i&amp;rsquo;)  - \mathbb{H}(s_i)$$  as the  difference in
energy for all other spins $s_j \in S$
cancels.&lt;/p&gt;
&lt;p&gt;There are,  however, different update schemes.  One of which
is the Kawasaki  dynamic. In this way,  the magnetization of
the  system  remains  constant.  That  is,  each  node  gets
assigned a state and does not  change as a function of time.
Each simulation  step, a  radomly chosen  spin may  swap its
state with  its neighbor. That  is, a spin $s_i$  may choose
its  next  state $s_i&amp;rsquo;$  by  swapping  its state  with  some
neighbor $s_j$ such that $s_i&amp;rsquo; =  s_j$ and $s_j&amp;rsquo; = s_i$ with
transition $A(s_i, s_j \to s_i&amp;rsquo;, s_j&amp;rsquo;)$&lt;/p&gt;
&lt;p&gt;\begin{equation}
\begin{aligned}
A(s_i, s_j \to s_i&amp;rsquo;, s_j&amp;rsquo;)_{\textrm{Kawasaki}} = \frac{ p(S&amp;rsquo;) }{ p(S) }  = \Bigg \{
\begin{aligned}
\exp( -\beta \Delta E) &amp;amp; \textrm{ if } \Delta E  &amp;lt; 0 \\
1 &amp;amp; \textrm{ otherwise }.\\
\end{aligned}
\end{aligned}
\end{equation}&lt;/p&gt;
&lt;p&gt;Note that here  the $\Delta E$ is computed over  a proposed state
$S&amp;rsquo;$ where the states of $s_i$ and $s_j$ are swapped.&lt;/p&gt;
&lt;p&gt;Kawasaki  dynamics ensures  that  the average  magnetization
remains constant. The fraction of positive spins will remain
constant over  time. In  contrast, for Glauber  dynamics the
ratio  between  positive  and  negative  spins  may  change,
depending  on  the  temperature  $\beta =  \frac{1}{T}$  in  the
system. For  $T &amp;lt;  T_{C}$ tends to  magnetize the  system in
Ising    spin   systems    with    Glauber   dynamics    and
Metropolis-Hasting  upates. This  means that  if the  system
starts  with an  equal  propotion of  positive and  negative
spins, the  system will tend to  a state in which  all spins
are aligned. For Kawasaki dynamics, the spins “move” through
the  space.  Clustering will  occur,  similar  to the  Ising
dynamics  with Glauber  updates, but  no majority  will win.
Kawasaki dynamic can therefore be  used to study things like
segregation, gang-turf demarcation, echo-chambers and so on.
A difference between  the two dynamics is shown  can be seen
in fig.  &lt;a href=&#34;#org2e195c6&#34;&gt;1&lt;/a&gt; with $T  = 1$  and for a  4 state
potts model in fig. &lt;a href=&#34;#org8fec01e&#34;&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
&lt;video autoplay controls&gt;&lt;source src=&#34;./kawasaki.mp4&#34;&gt;&lt;/video&gt;
&lt;figcaption&gt; Glauber versus Kawasaki dynamics for a Ising model on regular 2D lattice of 64x64 spins.  &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;video autoplay controls&gt;&lt;source src=&#34;./kawasaki_4potts.mp4&#34;&gt;&lt;/video&gt;
&lt;figcaption&gt;
Glauber versus Kawasaki dynamics for a 4-state Potts model.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Cython templates</title>
      <link>https://cvanelteren.github.io/post/cython_templates/</link>
      <pubDate>Mon, 04 Oct 2021 17:34:47 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/cython_templates/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org62422b7&#34;&gt;What are templates?&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org4170cb6&#34;&gt;Templates in Cython&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgc1a22ba&#34;&gt;Let’s get freaky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgad3284d&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cython offers to write  high performing (compiled) code with
python  and C++/C  side-by-side.  For  a python  programmer,
cython  can  be  used   to  replace  functions  with  c-like
functions.  The   cython  documentation  shows   some  clear
examples on how a python program could be transformed into a
statically compiled program. The  docs also highlight how to
provide templated code. For  simple templates this is clear,
but I found that some code is more difficult to template.&lt;/p&gt;
&lt;p&gt;This  short  article  may  form as  a  guided  tour  towards
binding templated code to cython.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org62422b7&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-are-templates&#34;&gt;What are templates?&lt;/h1&gt;
&lt;p&gt;Python is an interpreted language. This means that when code
is run, the  interpreted converts the code  to byte compiled
code. It goes through the code line for line and converts it
“on the  fly” to something  the computer can  understand. In
contrast, C/C++  are compiled languages. Prior  to execution
of the program a compiler  translates the code into a binary
that  the machine  can  understand. After  which the  binary
can be executed.  Due to the statically  defined nature, C++
needs  to deal  with shared  code that  can act  on multiple
types.  One  way  to   achieve  this  is  through  &lt;em&gt;function
overloading&lt;/em&gt;; functions  with the same name  are written but
different input (types) such  that calling the function with
different types will execute the correct function associated
with those  inputs. This, however becomes  quite tedious and
obsolete when considering templates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// in C++ types need to be considered.
// Some have implicit casting from one type to another,
// In general it is better to be more exact.
int return_square(int x){
    return x * x;
}
// overloading return_square with different input type
double return_square(double x){
    return x * x
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In C++  template functions  or classes  can be  considered a
blueprint. This allows  to share the logic  for a particular
function that may  operate on different types  such as ints,
floats,  doubles or  some  other  more complicated  abstract
classes.&lt;/p&gt;
&lt;p&gt;The general format of templated functions looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template &amp;lt;class T&amp;gt;
T return_square(T x){
    return x * x;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A  general  (undefined) type  T  is  used  here to  write  a
template to the  function. When using the  function the type
can either  be inferred  from the input  by the  compiler or
explicitly set:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int main(){
    int x = 3;
    int y = return_square&amp;lt;int&amp;gt;(x); // returns 9
    double k = 3;
    auto z = return_square(k); // assigned 9.0 to double z
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;org4170cb6&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;templates-in-cython&#34;&gt;Templates in Cython&lt;/h2&gt;
&lt;p&gt;In Cython,  template functions work  the same way as  in C++
with  slightly different  syntax.  The use  of templates  in
Cython can be  used to wrap C++ only; it  is not possible to
write templated code directly in cython unless you use fused
types  which has  some  limitations. I  won’t  go into  this
further in this post.&lt;/p&gt;
&lt;p&gt;The general form of a Cython
template is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# inside a pxd or pyx file
cdef from extern &amp;quot;return_square.h&amp;quot;:
    T return_square[T](T x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The `extern` keyword is the same as in C++/C which tells the
compiler that  there exists  some external function  that is
not  defined in  the current  source file.  In this  case we
refer to  a header file “return\_square.h”  that contains our
C++ template above. The general  type T is defined in square
brackets and forms the  same function as `template&lt;class T&gt;`
above. The rest is the same as a template in C++.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgc1a22ba&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;letrsquos-get-freaky&#34;&gt;Let’s get freaky&lt;/h1&gt;
&lt;p&gt;Now the  example above is  sort of  what is avaiable  on the
cython docs. Where it becomes undocumented for me was when I
wanted to wrap `std::inserter`  from the standard library in
C++. For  those of  you not  familiar, `std::inserter`  is a
wrapper for the  function `std::front_inserter` which allows
you to insert elements in to an  iterable such as a set or a
vector. From the C++ docs we read&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//Defined in header &amp;lt;iterator&amp;gt;
template&amp;lt; class Container &amp;gt;
std::insert_iterator&amp;lt;Container&amp;gt; inserter( Container&amp;amp; c, typename Container::iterator i );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wrapping  this   function  only  takes  a   single  template
parameter  `Container`,  however   the  function  takes  two
argument   which  introduces   another  template   parameter
`Container::iterator`.  Initially I  was hoping  that Cython
would somehow “know” that  providing two templates variables
would allow the  function to be bound correctly.  That is, I
started with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cdef extern from &amp;quot;&amp;lt;iterator&amp;gt;&amp;quot; namespace &amp;quot;std&amp;quot; nogil:
   void insert_iterator[Container, Iter](Container &amp;amp;c, Iter i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this did not  compile however. The compiler  stated that the
templated function could not be  found, as the header merely
states that there is only one template parameter.&lt;/p&gt;
&lt;p&gt;Wrapping C++ classes in cython is also possible. Since there
are not that many options to try, I attempted the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cdef extern from &amp;quot;&amp;lt;iterator&amp;gt;&amp;quot; namespace &amp;quot;std&amp;quot; nogil:
    cdef cppclass insert_iterator[T]:
        cppclass iterator[T]:
            pass
        insert_iterator(T &amp;amp; c, iterator[T] i)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This compiled perfectly! The magic here, essentially is that
I  treat  the  function  as  a  class  that  has  additional
properties defined.  That is,  I convince the  compiler that
the iterator exists and it  is associated with the templated
parameter  T. The  wrapping is  a bit  opague as  it is  not
entirely clear  what this  iterator object is.  Changing the
name to `mega_zuba_loo` would work equally well. It is up to
the programmer  to provide  clear indication  as to  what is
wrapped  and  provide the  correct  inputs  in the  code  in
addition.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgad3284d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Template functions and classes  allow programmers to share
logic in C++&lt;/li&gt;
&lt;li&gt;Templated code  can be wrapped  in cython allowing  one to
capitalize on the power of C/C++
&lt;ul&gt;
&lt;li&gt;Wrapping more “complicated”  functions requires some odd
non-intuitive syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Splitboard: the bluetooth (split) keyboard</title>
      <link>https://cvanelteren.github.io/post/splitboard/</link>
      <pubDate>Sun, 04 Jul 2021 21:23:54 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/splitboard/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;p&gt;&lt;em&gt;TLDR: I wanted a wireless split keyboard, so I made one.
This post outlines the process.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./figures/logo.svg&#34; width = &#34;100%&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orga56ed27&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org07c9ff9&#34;&gt;Outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org8341c49&#34;&gt;ESP32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org1f8f18e&#34;&gt;Matrix scanning&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org3d9c27c&#34;&gt;Ghosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgb6c4bce&#34;&gt;Key debouncing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org1551f4d&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org80acce2&#34;&gt;ESP-Now&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org5d2fa59&#34;&gt;Mesh interface class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org7b6376a&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org10d9a33&#34;&gt;Replacing ESP now with BLE mesh&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org5920043&#34;&gt;Modifier keys&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgaf157bd&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org4196787&#34;&gt;Bluetooth&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgef9da12&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org4affbc2&#34;&gt;Keyboard layers&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org5c9dfaa&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgfe759ee&#34;&gt;Rotary encoder&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgccf6ee7&#34;&gt;Taming the KY-040 with decoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org30de569&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgff0649f&#34;&gt;LED driver: FastLED&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org894745e&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org19921c7&#34;&gt;OLED Display&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgf9d2835&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org1b1a44a&#34;&gt;Deep sleep&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org28fc435&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org6d70429&#34;&gt;Battery control&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org1314ffd&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org899ac2c&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgbc724cc&#34;&gt;PCB layout design&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgf94a89d&#34;&gt;Making the layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org5365539&#34;&gt;Edge cut pcb&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org7b992ab&#34;&gt;Case design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org37935b8&#34;&gt;Specialized keys&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgc6993cf&#34;&gt;Layer taps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org9fe2de3&#34;&gt;One shot modifier keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orge641ca8&#34;&gt;Leader key&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org204445e&#34;&gt;Replacing esp_now&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org79d4be3&#34;&gt;BLE in a nutshell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org0ad4064&#34;&gt;Integration with BLE keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orga8c659e&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a id=&#34;orga56ed27&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-06-21 Mon&amp;gt;&lt;/span&gt;&lt;/span&gt;
Mechanical keyboards  are somewhat  of a dated  concept that
has  gathered some  speed in  more recent  years. Back  when
computers were  first coming  out for the  public, keyboards
had  mechanical connections  that would  allow a  current to
activate a  switch. Then as  economics got wind,  somehow we
got used  to membrane  keyboards; virtually every  office in
the  world   has  these  membrane  keyboards.   Compared  to
mechanical keyboards, membrane  keyboards feel more “mushy”.
In contrast,  mechanical keyboards  may have  different feel
based  on  the  springs  or  whether the  key  switch  has  a
noticeable  “bump”.   They  can   be  clicky  or   not;  the
possibility are wild now.&lt;/p&gt;
&lt;p&gt;A  few  years  ago  I started  following  the  subreddit  on
mechanical keyboards.  Back then,  the community  had little
options and cherry still had patents on the switches. Cherry
MX keys were virtually found in every commercial keyboard on
the market. Now,  the landscape has changed quite  a bit and
more and more different types of switches are available.&lt;/p&gt;
&lt;p&gt;Why do  I prefer mechanical keyboards?  Mechanical keyboards
give a “joy” to typing.  Membrane keyboards are fine to type
on, but  they aren’t fun.  Generally my fingers  get “tired”
after typing  on membrane keyboards  as the keys feel  a bit
mushy, i.e.  you get no relief  when pushing down a  key and
the key press does not feel crisp.&lt;/p&gt;
&lt;p&gt;After  following  / r / mechanicalkeyboards   for  a  while,  I
decided to  &lt;em&gt;build&lt;/em&gt; my  own keyboard. Within  the community,
there is a wide variety  of switches and shapes of keyboards
available. The one I wanted, an orthonormal keyboard, wasn’t
commercially available. Plus I liked the idea of building my
own keyboard.  In my work,  the keyboard is my  primary tool
and why not  key a custom version of it  for myself. I ended
up  building 2  handwired  versions of  65  percent with  85
switches  in  a  grid  layout.   In  addition,  I  modded  a
MagSafe-inspired cable to it which allowed it to be nice and
portable. After  every build I told  myself : “ This  is the
last one I’ll build”.&lt;/p&gt;
&lt;p&gt;Enter  this blog,  where I  again tell  myself “this  is the
last  one I  build!”. What  changed? Since  I learned  about
split-style keyboard,  I always wanted one.  The keyboards I
had  made   so  far  weren’t.  Split   would  be  completely
ergonomical,  but  unfortunately,  none (that  I  know  of)
exists that are both (a) wireless and (b) split. As always
I aimed to high and wanted to emulate the many features that
QMK implements. Most importantly, I  wanted to get back into
writing more low  level languages like c++, and  I take this
project as  a nice  opportunity to get  into c++  again, and
work with micro-controllers.&lt;/p&gt;
&lt;p&gt;This post  will serve as  my log for building  the keyboard.
The post will updated as I work on it.&lt;/p&gt;
&lt;p&gt;Core feature targets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split &lt;span class=&#34;underline&#34;&gt;wireless&lt;/span&gt; keyboard&lt;/li&gt;
&lt;li&gt;Hot swappable key sockets&lt;/li&gt;
&lt;li&gt;Portable, not a full keyboard&lt;/li&gt;
&lt;li&gt;Battery control&lt;/li&gt;
&lt;li&gt;OLED display&lt;/li&gt;
&lt;li&gt;Rotary encoders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org07c9ff9&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;outline&#34;&gt;Outline&lt;/h1&gt;
&lt;p&gt;The keyboard is split; it has two halves. The right and left
half will have  most of the same  “base” functionality. Most
importantly, each  half needs to  scan the matrix  to obtain
which keys are being pressed. One of the halves will act as a
server, the other will act as a client. The server will need
the following capabilities&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server abilities&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read matrix&lt;/li&gt;
&lt;li&gt;Setup a bluetooth connection
&lt;ul&gt;
&lt;li&gt;HID Device&lt;/li&gt;
&lt;li&gt;Mouse emulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Setup connection with client
&lt;ul&gt;
&lt;li&gt;Merge keys pressed and send to bluetooth controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Control LEDs on both client and server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Client abilities&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read matrix&lt;/li&gt;
&lt;li&gt;Find server and send pressed keys to server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to the heavier load of  the server, I prefer to make the
role of  who is server and  who is client dynamic.  That is,
with some heuristic (for example  deep sleep), the roles may
switch to prolong batter life of both units.&lt;/p&gt;
&lt;p&gt;To give a course overview consider the following picture:&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/overview.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org8341c49&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;esp32&#34;&gt;ESP32&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-07-12 Mon&amp;gt;&lt;/span&gt;&lt;/span&gt;-
I  opted for  a micro-controller  as this  would allow  me to
prototype without  worrying about my electronic  skills. The
controller needed  to have  battery control,  bluetooth, and
preferable an  energy efficient screen;  I ended up  with an
esp32.&lt;/p&gt;
&lt;p&gt;The esp32 is a hybrid chip that has both Wi-Fi and bluetooth
capabilities. The esp32 consists  of different versions that
varies in (mainly) in the number of pins, battery connector,
and  or screen.  The version  I ended  with (LORA-V2)  had a
battery connector and a tiny OLED screen.&lt;/p&gt;
&lt;p&gt;The  ecosystem  of  ESP32   is  well-developed  albeit  less
convenient  than  its  arduino  counterparts.  Luckily,  the
opensource community has taken it upon themselves to provide
lots  of  arduino bindings  to  the  libraries by  espressif
(manufacturer of esp32).&lt;/p&gt;
&lt;p&gt;Especially important  (as it turned  out later) is  that the
esp32 has the capabilities of using both Wi-Fi and bluetooth
low  energy simultanaously.  In  addition, through  ESP-NOW,
different  eps32  modules can  form  a  mesh, which  I  will
harness to do server-client communication.&lt;/p&gt;
&lt;p&gt;
&lt;figure  id=&#34;figure-pin-out-esp32-lora-v2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/pinout.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Pin-out ESP32 LORA-V2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;For prototype 1, the following pinout was used&lt;/p&gt;
&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;pin&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;13&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;14&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;27&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;26&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;25&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;led input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;18&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;23&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;19&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;22&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;21&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;17&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;rotary encoder A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;5&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;rotary encoder B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Pin 4 could still be used as a modulated pin
for measuring the battery.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org1f8f18e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;matrix-scanning&#34;&gt;Matrix scanning&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-07-12 Mon&amp;gt; &lt;/span&gt;&lt;/span&gt; A keyboard  matrix scanning circuit is used
to enhance the  number of keys, while keeping  the number of
pins low.  A micro-controller uses general  pin input/output
(GPIO) to  register currents.  If a  singular key  switch is
wired to  a single pin,  96 pins would  be needed for  a 104
sized keyboard (full-size). This would be unpractical.&lt;/p&gt;
&lt;p&gt;As an alternative  one could apply matrix  scanning. In this
method,  the keys  are wired  as  a grid  where each  column
connects to each  row effectively forming a  “switch”. For a
total for 100 keys, one would need 10x10 grid. The grid acts
as a force multiplier for the number of switches. Instead of
needing 100  separate keys,  we merely need  10 rows  and 10
columns (20 pins) to wire our 100 switch keyboard.&lt;/p&gt;
&lt;p&gt;The  matrix is  repeatedly  scanned to  determine  if a  row
column form  an open circuit.  That is,  if a key  switch is
pressed down, current  can flow between the  row and column.
The scanning occurs at a high scan rate, making it seemingly
instantaneous.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org3d9c27c&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ghosting&#34;&gt;Ghosting&lt;/h2&gt;
&lt;p&gt;Matrix  scanning  forms  an excellent  idea  to  efficiently
represent our electronic  switches. However, merely scanning
does  not  correctly records  all  key  presses. Under  some
conditions, a matrix  can record ghost keys,  i.e. keys that
are  registered  but not  pressed.  This  process is  called
ghosting.&lt;/p&gt;
&lt;p&gt;Ghosting  occurs  when  current   can  freely  flow  between
separate  rows or  columns due  to another  row/column being
open.  For example  consider a  simple two  row, two  column
keyboard. This board can support 4 keys. When two keys along
the diagonal  are pressed,  we register  4 keys(!).  This is
obviously wrong and  needs to be corrected.  The most common
approach is to put a diode  right after the switch either on
the columns or rows,  which prevents current from traversing
and causing ghosting.&lt;/p&gt;
&lt;p&gt;
&lt;figure  id=&#34;figure-ghosting-example-ghosting-occurs-when-current-can-flow-freely-across-columns-and-rows-left-one-key-is-pressed-down-bottom-left-middle-a-key-across-from-the-first-is-activated-which-causes-ghosting-right-current-flows-from-the-second-row-first-column-to-the-second-row-second-column-etc&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/ghosting.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Ghosting example. Ghosting occurs when current can flow freely across columns and rows. (Left) one key is pressed down bottom left. (Middle) A key across from the first is activated which causes ghosting (right); current flows from the second row, first column to the second row, second column etc.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgb6c4bce&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;key-debouncing&#34;&gt;Key debouncing&lt;/h2&gt;
&lt;p&gt;Key  debounce is  a mechanism  to filter  out erroneous  key
activity.  When  two metal  plates  come  into contact,  the
signal does not form a clean  square wave. In order to clean
up  this  signal, key  debouncing  is  used to  reflect  the
“press”  of  key switch.  Initially  I  used a  simple  time
filter, i.e.  ensuring that  the keyswitch was  pressed down
between  x ms.  This ended  up being  a bit  noisy with  the
switches I  was using; I  ended up writing a  digital filter
that worked fairly well.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org1551f4d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Added matrix class
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added matrix scan&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added key debounce&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added (whole) matrix debounce
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; filters out erroneous key presses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org80acce2&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;esp-now&#34;&gt;ESP-Now&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-06-19 Sat&amp;gt;&lt;/span&gt;&lt;/span&gt;
The two  halves need to  communicate to each other.  There is
only one half that is connected through bluetooth to another
device. We call  this the server, and the  other the client.
Keys pressed on  the client needs to be  communicated to the
server  which   processes  the  keys,  and   sends  it  over
bluetooth. Luckily,  ESP-now offers a mesh  interface we can
utilize for  this purpose.  This is easier  to setup  than a
bluetooth mesh interface and should be relatively secure for
foreign attackers. From the website we read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ESP-NOW is yet another protocol developed by Espressif, which enables multiple devices to communicate with one another without using Wi-Fi. The protocol is similar to the low-power 2.4GHz wireless connectivity that is often deployed in wireless mouses. So, the pairing between devices is needed prior to their communication. After the pairing is done, the connection is secure and peer-to-peer, with no handshake being required.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a id=&#34;org5d2fa59&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mesh-interface-class&#34;&gt;Mesh interface class&lt;/h2&gt;
&lt;p&gt;The mesh class is responsible for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup / deinit the ESP-now connection&lt;/li&gt;
&lt;li&gt;Holding a buffer that is sent over the ESP-now connection.
The buffer holds information that needs to be communicated
between each  halves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At  the moment  of writing,  the mesh  class holds  a static
buffer   which  holds   `keyswitch_t`.  These   are  structs
containing when the last time  the pins were read as active.
In addition, it contains information  on the source and sinc
pins, and column and row indices. These last two are used to
index into the final keymap on the server side. This way, no
actual key information is send, but the server reads the key
from the  col and row,  then they are combined.  This solves
the issue of sending ascii shifted codes or media keys.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org7b6376a&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-1&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implemented mesh interface class&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Added server capabilities to join the keys from both half and communicate through bluetooth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org10d9a33&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;replacing-esp-now-with-ble-mesh&#34;&gt;Replacing ESP now with BLE mesh&lt;/h2&gt;
&lt;p&gt;The current consumption  of esp now is too  high to reliable
use on battery. By replacing ESP now with a BLE alternative,
the current  consumption can be  reduced by 50  percent. ESP
offers a novel  BLE mesh functionality which may  serve as a
replacement for ESP now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What functions does BLE mesh have?&lt;/li&gt;
&lt;li&gt;BLE mesh can send 11 octets (88 bits) of information. This
is significantly less than 250 of esp now(!).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org5920043&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;modifier-keys&#34;&gt;Modifier keys&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-07-26 Mon&amp;gt;  &lt;/span&gt;&lt;/span&gt;  My  initial implementation  measures  the
onset of  keys. That is,  debounce worked by  measuring when
the “square  wave” of the  key was pressed. This  allows for
fast  and  accurate  detection  detecting  key  press  down.
Initially my intentions was to merge the other keys together
such that multiple keys are registered at the same time. For
example, the shift key needs to register two keys at minimum
to shift the ascii code around for let’s say `a` to `A`.&lt;/p&gt;
&lt;p&gt;Consequently, I need to both  register the key press down as
well as the  key release; I modified  the debounce mechanism
to also detect the key release.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgaf157bd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-2&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Change key detection. Register key press and key release&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Mesh buffer management is moved out of the keyboard class.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Fixed wrong indexing in reading the active keys on the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org4196787&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;bluetooth&#34;&gt;Bluetooth&lt;/h1&gt;
&lt;p&gt;Bluetooth  is  rather  complicated. The  Bluetooth  Keyboard
class takes  care of  most of the  heavy lifting.  Key codes
have an associated  ascii code, these are put  into an ascii
code map. Note that the over bluetooth (for whatever reason)
these keycodes are remapped to different numbers.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgef9da12&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-3&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Expand  this section with info  on characteristics and
services.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Figure out  how  the key  codes  are organized  The
symbols are organized in a 128 ascii keymap containing the
hex codes to  a symbol. Hex codes can be  send directly in
addition to  normal strings  over bluetooth.  The modifier
keys  in  combination with  some  media  control keys  are
defined   in  “BleKeyboard.h”,   the  ascii   map  is   in
“BleKeyboard.cpp”.  I  have  written a  short  wrapper  in
“key_defintions.hpp”.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add functions for  interfacing with bluetooth  to the
keyboard class
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Pressing down keys&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Releasing keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Convert config class  to static class&lt;/li&gt;
&lt;li&gt;[-] Write layer keymap for keyboard
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Wrote qwerty base layer&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add fixed array check to the layers (add to constant
config class steps)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org4affbc2&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;keyboard-layers&#34;&gt;Keyboard layers&lt;/h1&gt;
&lt;p&gt;A layer  is implemented as a  2D vector for the  moment, but
will  likely change  in finalizing  the keyboard.  An active
layer is set as a pointer  to the current active layer. Each
keyswitch has  information on  where in  the grid  they fit;
keys are read by using these indices in the 2D vector. I did
consider an  unordered_map use the keyswitch  directly as an
indicator. This could then be combined with pointers to make
a  layer dynamic,  i.e.  instead of  having  the concept  of
layers, each key has a different layer that can be accessed.
This adds  some complexity and  I decided against  this. The
main reason is that the client side would then need to store
information  on what  each keyswitch  points to.  This would
increase communication between each  halves if modifiers are
used for example. I am  afraid that this added communication
is not as trivially solved,  i.e. one needs to send modifier
key across ESP-NOW and then shift all affected keys and when
activated send this information back. The ESP-NOW channel is
not designed for high information throughput.&lt;/p&gt;
&lt;p&gt;The keyboard is  not going to be full size.  That is, purely
based on the number of keys,  this keyboard will not be able
to have a 1-to-1 mapping  from symbol to keyswitch. Luckily,
we  can  greatly  increase  the number  of  symbols  on  the
keyboard by hosting the missing symbols on different layers.
This means we have to implement a feature that allows one to
switch  between   different  layers.  For  example   we  may
implement a layer up and layer  down key, or allow to switch
directly between different  layers. In QMK is  worked out by
an `enum struct`.  Layers are stacked on top  of each other.
This has the  added feature of allowing  a “transparent” key
to access on a layer below. I wish to emulate this feature.&lt;/p&gt;
&lt;p&gt;I currently host my key layer  as a 2d vector. In finalizing
my build this  may change to a fixed array  size. As vectors
can be arbitrary sized, I need to add a check to the vectors
to not allow uses to  define oddly sized arrays (which would
lead to  seg faults).  This will be  added to  the finalized
checks.&lt;/p&gt;
&lt;p&gt;In  QMK layers  are `enum` type, which  means the  layers are
number  and tracked  through an  int. Here,  I will  have an
`active_layer`  which points  to the  `layer_t` hosting  the
current  active keys.  With transparent  keys I  can imagine
that this approach will not work.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org5c9dfaa&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-4&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement key layers
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; KC_TRANS accesses key below the current layer
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; This effect may  stack until a non-transparent key
is found&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Layer switch keys
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Up and down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Hold  layer switch key: similar  to modifier keys,
these  keys  temporarily   shift  the  key layer  while
holding down this key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;orgfe759ee&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;rotary-encoder&#34;&gt;Rotary encoder&lt;/h1&gt;
&lt;p&gt;The keyboard  has two rotary  encoder (one on  each halves).
The encoders  I added were mostly  as a gimmick, but  can be
used as slider controls for volume control and or scrolling.&lt;/p&gt;
&lt;p&gt;
&lt;figure  id=&#34;figure-left-schematic-rotary-encoder-the-a-and-b-pin-are-90-degrees-out-of-phase-and-produce-a-quadrature-signal-right-in-the-rest-state-both-a-and-b-pin-register-0-the-quadrature-encoding-for-the-a-and-b-pin-are-given-in-&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/encoder.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      (left) Schematic rotary encoder. The A and B pin are 90 degrees out of phase and produce a quadrature signal (right). In the rest state both A and B pin register 0. The quadrature encoding for the A and B pin are given in &amp;lt;encoder_scheme&amp;gt;.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The rotary encoder has two  pins that are shifted 90 degrees
out  of  phase  (see  figure  &lt;a href=&#34;fig:encoder&#34;&gt;fig:encoder&lt;/a&gt;).  Each  click
produces a  quadrature signal  that is fixed.  Unknowingly I
bought encoders that are  extremely noisy (KY-040). When the
encoder clicks,  contacts are  moved across a  terminal. The
signal  produced  are  ideally  two  square  offsets  by  90
degrees.  In  practice  however, the  signal  debounces  and
produces  more  signal. They  are  three  traditional ways  of
taming noisy signals&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hardware filtering&lt;/li&gt;
&lt;li&gt;Digital filtering&lt;/li&gt;
&lt;li&gt;Decoding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don’t know  much about the first method or  last method. I
initially tried  method 2, i.e. measuring  the pins, waiting
for  some  time and  measure  again.  This however  did  not
correctly measure the rotations.  I tried multiple libraries
that used interrupt  routines that did not  end up correctly
measuring the  clicks of the  encoder. Finally I  found &lt;a href=&#34;https://www.best-microcontroller-projects.com/rotary-encoder.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this
blog  post&lt;/a&gt; which  highlighted exactly  the problem  with the
KY-040. The  decoder method  worked like  a charm,  but took
some  time to  figure out.  Below is  the exploration  I had
trying to figure out how this code worked.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgccf6ee7&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;taming-the-ky-040-with-decoding&#34;&gt;Taming the KY-040 with decoding&lt;/h2&gt;
&lt;p&gt;The quadrature signal per click  produces a fixed output for
either clockwise or anti-clockwise rotation. The encoder can
be thought of  as a fixed state machine  that moves between
different states (&amp;lt;table_transition&amp;gt;).&lt;/p&gt;
&lt;table id=&#34;org02a9d44&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;Current state&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;&amp;#xa0;&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;New state&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;&amp;#xa0;&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Direction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;A pin&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;B pin&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;A pin&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;B pin&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In practice however, a noisy rotary encoder will also output
some state transitions that are not allowed, e.g. 11-&amp;gt;00. In
order to  correctly read which direction  the rotary encoder
was turned in, a digital filter can be used. A simple filter
would be something like&lt;/p&gt;
&lt;p&gt;$$ signal = (signal &amp;laquo; 1) | digitalRead(A_{pin}) | 0xF000$$&lt;/p&gt;
&lt;p&gt;A signal is  only read if the integer value  reaches the all
ones state, then resets and  waits again. Trying this method
did not end well for me.  I ended up using sequence decoder;
the pattern are listed in &amp;lt;encoder_scheme&amp;gt;.&lt;/p&gt;
&lt;p&gt;We can  group the  current state  and new state  as a  4 bit
number,  i.e. $\{a,  b, a&amp;rsquo;,  b&amp;rsquo;\}$  where $a$,  $b$ are  the
current state of the A and B  pin and $a&amp;rsquo;$, $b&amp;rsquo;$ are the new
state of the A  and B pin. This implies that  2^4 = 16 state
transitions are possible and we only allow for 8 of these to
occur (see table &amp;lt;table_transition&amp;gt;).&lt;/p&gt;
&lt;table id=&#34;org754597b&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;state (bit mask)&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Allowed&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Direction&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;State&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0000&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0001&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0010&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0011&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0100&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0101&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0110&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0111&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1000&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1001&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1010&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1011&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1100&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1101&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1110&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1111&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table id=&#34;orgd83144a&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Bitmask&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;Hex&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Direction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;0001 0111&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0x17&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;0010 1011&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0x2b&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a id=&#34;org30de569&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-5&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add rotary encoder to keyboard class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;orgff0649f&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;led-driver-fastled&#34;&gt;LED driver: FastLED&lt;/h1&gt;
&lt;p&gt;I generally don’t care  for LED under keyboard. However, as  this was a “bigger”
project, I  decided to play  around with LED  support. Different LEDs  types are
possible, I  ended up  going with  the SK6812  which offer  RGB support  and are
generally easier  to hand  solder than the  popular WS2812(B).  After purchasing
however, I turned out that finding a LED  driver posed to be a bit cumbersome. I
tried a few different code bases and they  ended up not working out the box. Not
sure  why.  After  some  searching,  I stumbled  on  the  library  FastLED.  The
documentation  does not  explicitly  support  the SK6812.  The  git issue  page,
however, showed  that there  is some support  for it. In  addition, some  of the
example code had mentions of it. Anyhoozle, after some tweaking around (and some
ugly soldering) I achieved:&lt;/p&gt;
 &lt;video width=&#34;320&#34; height=&#34;240&#34; controls&gt;
  &lt;source src=&#34;./figures/leds_cycle.mp4&#34; type=&#34;video/mp4&#34;&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Happy days! The  LED driver was one of  the last parts of the  list, which means
that the end is  in sight! The coming week I will integrate  the driver with the
keyboard class and check the box below.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org894745e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-6&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; LED driver
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Initialize LED driver&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make LED wrapper in keyboard class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org19921c7&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;oled-display&#34;&gt;OLED Display&lt;/h1&gt;
&lt;p&gt;&lt;a id=&#34;orgf9d2835&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-7&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Start creating interface for display management&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Find interesting functions to put on the screen
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; WiFi notifications?&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Keyboard status info
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Keyboard layer info&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Battery level info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org1b1a44a&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;deep-sleep&#34;&gt;Deep sleep&lt;/h1&gt;
&lt;p&gt;When not  in use I  aim to put  the keyboard in  deep sleep.
Some pins  on the esp32 can  be used to wakeup  the keyboard
from deep  sleep. The  RTC_GPIO pins and  Touch pins  can be
used for waking the device from deep sleep. The RTC pins are&lt;/p&gt;
&lt;table id=&#34;orge469a35&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;RTC Pin&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;GPIO&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO02&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;had issues with encoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO10&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO04&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;OLED SDA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO15&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO14&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO13&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO16&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO14&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO13&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO15&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;OLED SLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO09&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO32&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO08&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO33&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO04&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO34&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO05&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO35&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO00&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO36&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO03&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO39&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO06&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO25&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO07&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO26&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO17&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO27&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO11&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO00&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;button pin(?)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The set  GPIO12/13/14/25/26/27 could form a  set for which
all the columns or rows will  have a key that is connected
to  deep sleep;  this would  mean either  the rows  or the
columns are connected to a pin that is reachable from deep
sleep. I will  have to run some experiments  if that could
allow the keyboard to wake up from deep sleep, i.e. if the
the  column or  row  is not  active I  wonder  if the  the
current will  be low, i.e. if  the pins are in  deep sleep
and  a small  current is  tested on  the active  pins (set
above),   does  the   current   go  from   HIGH  to   LOW?
Alternatively,  I could  connect the  pins to  the set  3x
range only for deep sleep mode.&lt;/p&gt;
&lt;p&gt;There are two sleep modes; light sleep and deep sleep. For
light sleep the internal state of the system is preserved,
which is not the case for deep sleep. This would mean that
for deep sleep the keyboard effectively reboots.&lt;/p&gt;
&lt;p&gt;There are 4 ways to wake up from deep sleep:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;External current
&lt;ol&gt;
&lt;li&gt;Either through ext0 or ext1 wake up&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Touch pins&lt;/li&gt;
&lt;li&gt;Timer&lt;/li&gt;
&lt;li&gt;ULP co-processor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I aim  to be able to  wake up the keyboard  from any regular
key presses. That is, after some time-out, the user need not
press a  button. Instead, a  control signal will  monitor if
some current  changed and then  reboot the device.  Method 1
would  be suitable  if the  pins are  directly connected  to
ground. With  the matrix  scan setup,  there are  not enough
pins to measure  a current difference if one of  the keys in
the matrix would  be pressed. Method 3 is  also not suitable
as the input to the keyboard does not happen at a fixed time
interval. Method 4 requires coding for the ULP co-processor.
This requires knowledge  of assembly which I do  not have. I
think it is  possible that this would reduce  the deep sleep
current even more. However, in the end it still utilizes the
RTC pins.&lt;/p&gt;
&lt;p&gt;Luckily, my  keyboard will  only require  5 +  6 =  11 pins.
There are  in total 10  touch pins  which would make  this a
possible target if  they work. Initial testing  shows that a
touch wake up would work with  a touch threshold of 45. This
would require either the columns or the rows to be hooked up
to the  touch sensors. By  monitoring any current  change of
the rows  or columns would  result in  the board to  wake up
from sleep (which is ideal).&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org28fc435&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-8&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement deep sleep
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added deep sleep time-out to config&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Touch pins will be either rows or columns&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test matrix  scan diodes  with deep  sleep feature,
i.e.  does  deep  sleep   current  still  register  with
row2column or reverse connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org6d70429&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;battery-control&#34;&gt;Battery control&lt;/h1&gt;
&lt;p&gt;The ESP32 oled  has an internal charging circuit.  It is not
known to  me that this circuit  can be read to  retrieve the
battery  capacity. What  can  be  done is  use  a analog  to
digital  converter pin  (ADC) to  readout the  state of  the
battery. In order  to readout the battery  capacity, we need
to change  the voltage  potential in  a working  range. Each
ADC pin can  read at most 3.3V. The battery  has a potential
of 3.7V. By using a voltage  divider, we can readout the pin
in a  save range. This  works by stepping down  the voltage,
and  sensing  the state  of  the  battery capacity.  As  the
battery is used, the voltage capacity changes accordingly.&lt;/p&gt;
&lt;p&gt;I  am  currently using  2x  100  kOhm resistors  which  will
produce a  voltage difference of  3.7/2 = 1.85 volts  with a
leak current &amp;lt;20 micro A.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org1314ffd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-9&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement battery control&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Add power button to PCB design&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org899ac2c&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pangodream.es/esp32-getting-battery-charging-level&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.pangodream.es/esp32-getting-battery-charging-level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;orgbc724cc&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;pcb-layout-design&#34;&gt;PCB layout design&lt;/h1&gt;
&lt;p&gt;I used  kicad for PCB  design. The  layout of the  keys were
determined by tracing out my  hand and determining the shift
in the  columns by  the mount of  “natural bend”  my fingers
have. I traced  my hand and made a horizontal  line from the
pinky; this served as my zero line. Columns 1, 2, and 6 were
determined to lie on this zero line. The remaining 3 columns
were shifted. upwards sequentially.&lt;/p&gt;
&lt;p&gt;The bottom  row (id 5) contains  merely 3 keys and  they are
rotated from left to right as  5, 10, 15 degrees. These were
determined based on  “angle” of my thumb. It  was judge sort
of by eye (and a ruler).&lt;/p&gt;
&lt;p&gt;Below is  some code I  wrote to determined the  outline. The
end result is:&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/pcb3d.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgf94a89d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;making-the-layout&#34;&gt;Making the layout&lt;/h2&gt;
&lt;p&gt;The code below are some scripts I wrote to determined the relative position between keys. It is (very) uggly code but worked for this simple purpose. Future me may want to make it look prettier for the outside world.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org5365539&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;edge-cut-pcb&#34;&gt;Edge cut pcb&lt;/h2&gt;
&lt;p&gt;Kicad prefers to make edge cuts relatively simple, i.e. straight lines. I attempted to round most corners, but the odd layouts of the bottom keys (K54, K55, K56) made it a bit hard given the odd angle. I put some effort in making it somewhat curved.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org7b992ab&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;case-design&#34;&gt;Case design&lt;/h1&gt;
&lt;p&gt;The  case is  going to  be a  sandwich style  case. It  will
consist at minimum of 3 layers: the bottom plate, the middle
plate and  the top plate.  The top  plate will host  the key
switches, reliefs ar cut such that the key top can be opened
while the  key is  mounted. A  plate in  this design  is not
necessary but  preferred as  the key  sockets are  not super
rigid, i.e. you could theoretically  have a lose switch over
time. A plate fixes the keys in place.&lt;/p&gt;
&lt;p&gt;The  edge cut  layers,  court yards  and  user drawings  are
combined and exported  from kicad to svg format.  I used the
keyboard layout editor together  with the codeblock below to
determine where the  cuts would have to be made  for the top
plate.&lt;/p&gt;
&lt;p&gt;For the keyswitch  cutouts, I took a shortcut.  By using the
&lt;a href=&#34;https://keyboard-layout-editor.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keyboard layout  editor&lt;/a&gt; in conjunction with  &lt;a href=&#34;https://builder.swillkb.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;case builder&lt;/a&gt;, I
was  able  to export  the  keyboard  layout and  obtain  the
correct keyswitch footprint for  the plate. The case builder
website takes  json as  input which  is compatible  with the
keyboard  layout  editor. The  output  of  the case  builder
software allows for automatic screw hole and plate clearance
for  simple pcb  designs (i.e.  rectangular). Unfortunately,
this design is not well suited  for this. As such I exported
the drawings  to svg and  overlayed it with the  export from
kicad.&lt;/p&gt;
&lt;p&gt;The  top  plate is  nearly  done.  I  am currently  in  the
progress  of  making the  curves  a  bit smoother  for  the
outside. I  will work on  the middle and bottom  plate from
this top plate design.&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/elanor_top.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For case &lt;a href=&#34;http://builder.swillkb.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://builder.swillkb.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For layout &lt;a href=&#34;http://www.keyboard-layout-editor.com/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.keyboard-layout-editor.com/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;changes-10&#34;&gt;Changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[-] construct plate layer
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4x 5mm screw holes&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1x diameter (5mm) clearance outside&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; add key switch mounting holes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; construct top layer&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; construct middle layer&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; construct bottom layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org37935b8&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;specialized-keys&#34;&gt;Specialized keys&lt;/h1&gt;
&lt;p&gt;&lt;a id=&#34;orgc6993cf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;layer-taps&#34;&gt;Layer taps&lt;/h2&gt;
&lt;p&gt;The keyboard  will have (27  + 1)  * 2 keys  (in principle).
This is not  enough to emulate a real keyboard.  For this we
need  to utilize  more “layers”  to create  more degrees  of
freedom.  In  QMK  there  are  various  different  modes  of
activating  a different  keycode depending  on how  long you
press a keycode. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// L-ayer, T-ap - 256 keycode max, 16 layer max
#define LT(layer, kc) (kc | QK_LAYER_TAP | ((layer &amp;amp; 0xF) &amp;lt;&amp;lt; 8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All ascii codes can be encoded  in 255 characters. In QMK 16
bits are used to encode the symbol. The remaining 8 bits are
divided  in  two: 4  bits  are  given  to encode  the  layer
information, 4 bits are given for a “special” range of keys.&lt;/p&gt;
&lt;p&gt;Layer  tap give  you the  ability to  switch to  a different
layer  by holding  on  to a  key for  a  longer time,  while
sending  a keycode  when holding  for a  shorter time.  This
allows for  sacrificing one key  for quickly switching  to a
layer momentarily while holding  down the designated key. In
my  opinion this  works better  than a  layer switch  up and
down. For single  keypresses. In the future I  may look into
single tap modifier  keys similar to the  leader key concept
in vim/emacs.&lt;/p&gt;
&lt;h3 id=&#34;changes-11&#34;&gt;Changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add layer tap keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org9fe2de3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;one-shot-modifier-keys&#34;&gt;One shot modifier keys&lt;/h2&gt;
&lt;p&gt;A one  shot key allows for  chaining a pair of  keys together
without holding  both keys  at the  same time.  For example,
pressing CTLR + V can be  performed by tapping CTLR and then
tapping V.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orge641ca8&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;leader-key&#34;&gt;Leader key&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; TODO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org204445e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;replacing-esp_now&#34;&gt;Replacing esp_now&lt;/h1&gt;
&lt;p&gt;ESP now  is a simple service  that uses the WiFi  antenna to
setup a wireless bridge between two devices. It is simple to
setup and can  be used for small  form communication between
devices.  The  fast  development   and  setup  yields  major
advantages. Adding  the WiFi requirements, however,  has one
major drawback; it increases  the current draw, rendering it
problematic  in  use  for   low  energy  devices.  Different
techniques may  be used to  mitigate the current  draw. For
example, a power saving scheme  may be applied to reduce the
current  draw  by  the  antenna.  As  keys  can  be  pressed
asynchronous and at any time while the board is active, this
technique is not preferred for  the keyboard. This is mainly
due to  the fact that  from light  sleep until the  board is
operational (stable bluetooth connection) takes around 130ms
from conducted tests.&lt;/p&gt;
&lt;p&gt;Another solution would be to  replace the esp now connection
and harassing  the already existing bluetooth  connection to
multiplex the signal. This is  the goal for Splitboard as it
could reduce the battery consumption by circa 50 percent.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org79d4be3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ble-in-a-nutshell&#34;&gt;BLE in a nutshell&lt;/h2&gt;
&lt;p&gt;Bluetooth  low energy  communication  consists of  services.
These  services represent  the type  that other  devices can
expect. They may be pre-defined according to some spec, e.g.
a  HID device  such as  a  keyboard or  mouse, or  something
entirely different  such as a  heartbeat sensor or  a custom
service. Each  service may  hold 0 or  more characteristics.
These  characteristics  may  be   though  of  as  “bluetooth
variables”.   In  addition   to   a   possible  value,   the
characteristic holds a descriptor of the value.&lt;/p&gt;
&lt;p&gt;For a given low energy bluetooth device, the device can host
(and  possible advertise)  one server,  and make  up to  $n$
possible connections. The server  hosts the services and can
advertise the services. A client  connects to the server and
interacts  with  one  of the  characteristics.  For  example
device  $A$ may  advertise service  BAG which  holds several
characteristics  such as  MONEY,  CANDY  (etc). A  different
device  $B$ may  connect  with device  $A$  looking for  the
service BAG and take one CANDY.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org0ad4064&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;integration-with-ble-keyboard&#34;&gt;Integration with BLE keyboard&lt;/h2&gt;
&lt;p&gt;One of the major challenges  of replacing esp-now is that it
requires integration  of the proposed bluetooth  bridge with
the existing bluetooth interface for the keyboard. As little
to  no documentation  was available  (other than  the source
code), quiet  some time was  spent piecing together  how BLE
communication operates and how the required bluetooth bridge
can be added  and integrated with existing  packages used in
the project.&lt;/p&gt;
&lt;p&gt;First, there are different  bluetooth stacks available, e.g.
bluestack,  NimBLE, arduino-esp32-BLE  and so  on. Recently,
the BleKeyboard package allowed for  NimBLE to be used which
improves  upon  the  existing  stack  for  arduino-esp32  by
reducing its  memory footprint. The interface  was made such
that  it retains  its  compatibility with  the existing  BLE
implementation canonically used in arduino-esp32. The NimBLE
stack  was  targeted in  this  framework.  This narrows  the
development for  esp32 controllers only. In  the future, the
conversion to  blue kitchen’s bluestack may  be preferred as
it targets a wider controller set.&lt;/p&gt;
&lt;p&gt;As a target a bluetooth mesh will need to be implemented. In
this mesh, there exists one server  that acts as a HID. This
server itself is a client  that connects to other clients in
the  mesh which  hosts  their internal  matrix state.  These
servers   will   have   general   service   that   hosts   a
characteristic  which  holds a  vector  of  key events.  The
client is  notified by a  change in the actively  held keys,
and converts through the keymap in HID inputs.&lt;/p&gt;
&lt;p&gt;The BleKeyboard  is a server in  itself. Each characteristic
has its  own separate callback  that can be set.  The server
itself, however, can only  hold one callback. Luckily, these
don’t  need  to be  set.  Consequently,  the mesh  can  live
independently from  the BleKeyboard. Care needs  to be taken
with  antenna  (BLEDevice)  as wrongfully  initializing  may
cause some unexpected runtime errors. Luckily, this is setup
only once.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orga8c659e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-12&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Replaced esp-now with ble mesh&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Splitboard: the bluetooth (split) keyboard</title>
      <link>https://cvanelteren.github.io/project/splitboard/</link>
      <pubDate>Sun, 04 Jul 2021 21:23:54 +0200</pubDate>
      <guid>https://cvanelteren.github.io/project/splitboard/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;p&gt;&lt;em&gt;TLDR: I wanted a wireless split keyboard, so I made one.
This post outlines the process.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./figures/logo.svg&#34; width = &#34;100%&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orga56ed27&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org07c9ff9&#34;&gt;Outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org8341c49&#34;&gt;ESP32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org1f8f18e&#34;&gt;Matrix scanning&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org3d9c27c&#34;&gt;Ghosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgb6c4bce&#34;&gt;Key debouncing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org1551f4d&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org80acce2&#34;&gt;ESP-Now&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org5d2fa59&#34;&gt;Mesh interface class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org7b6376a&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org10d9a33&#34;&gt;Replacing ESP now with BLE mesh&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org5920043&#34;&gt;Modifier keys&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgaf157bd&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org4196787&#34;&gt;Bluetooth&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgef9da12&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org4affbc2&#34;&gt;Keyboard layers&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org5c9dfaa&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgfe759ee&#34;&gt;Rotary encoder&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgccf6ee7&#34;&gt;Taming the KY-040 with decoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org30de569&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgff0649f&#34;&gt;LED driver: FastLED&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org894745e&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org19921c7&#34;&gt;OLED Display&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgf9d2835&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org1b1a44a&#34;&gt;Deep sleep&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org28fc435&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org6d70429&#34;&gt;Battery control&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org1314ffd&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org899ac2c&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgbc724cc&#34;&gt;PCB layout design&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgf94a89d&#34;&gt;Making the layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org5365539&#34;&gt;Edge cut pcb&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org7b992ab&#34;&gt;Case design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org37935b8&#34;&gt;Specialized keys&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#orgc6993cf&#34;&gt;Layer taps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org9fe2de3&#34;&gt;One shot modifier keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orge641ca8&#34;&gt;Leader key&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org204445e&#34;&gt;Replacing esp_now&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org79d4be3&#34;&gt;BLE in a nutshell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org0ad4064&#34;&gt;Integration with BLE keyboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orga8c659e&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a id=&#34;orga56ed27&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-06-21 Mon&amp;gt;&lt;/span&gt;&lt;/span&gt;
Mechanical keyboards  are somewhat  of a dated  concept that
has  gathered some  speed in  more recent  years. Back  when
computers were  first coming  out for the  public, keyboards
had  mechanical connections  that would  allow a  current to
activate a  switch. Then as  economics got wind,  somehow we
got used  to membrane  keyboards; virtually every  office in
the  world   has  these  membrane  keyboards.   Compared  to
mechanical keyboards, membrane  keyboards feel more “mushy”.
In contrast,  mechanical keyboards  may have  different feel
based  on  the  springs  or  whether the  key  switch  has  a
noticeable  “bump”.   They  can   be  clicky  or   not;  the
possibility are wild now.&lt;/p&gt;
&lt;p&gt;A  few  years  ago  I started  following  the  subreddit  on
mechanical keyboards.  Back then,  the community  had little
options and cherry still had patents on the switches. Cherry
MX keys were virtually found in every commercial keyboard on
the market. Now,  the landscape has changed quite  a bit and
more and more different types of switches are available.&lt;/p&gt;
&lt;p&gt;Why do  I prefer mechanical keyboards?  Mechanical keyboards
give a “joy” to typing.  Membrane keyboards are fine to type
on, but  they aren’t fun.  Generally my fingers  get “tired”
after typing  on membrane keyboards  as the keys feel  a bit
mushy, i.e.  you get no relief  when pushing down a  key and
the key press does not feel crisp.&lt;/p&gt;
&lt;p&gt;After  following  / r / mechanicalkeyboards   for  a  while,  I
decided to  &lt;em&gt;build&lt;/em&gt; my  own keyboard. Within  the community,
there is a wide variety  of switches and shapes of keyboards
available. The one I wanted, an orthonormal keyboard, wasn’t
commercially available. Plus I liked the idea of building my
own keyboard.  In my work,  the keyboard is my  primary tool
and why not  key a custom version of it  for myself. I ended
up  building 2  handwired  versions of  65  percent with  85
switches  in  a  grid  layout.   In  addition,  I  modded  a
MagSafe-inspired cable to it which allowed it to be nice and
portable. After  every build I told  myself : “ This  is the
last one I’ll build”.&lt;/p&gt;
&lt;p&gt;Enter  this blog,  where I  again tell  myself “this  is the
last  one I  build!”. What  changed? Since  I learned  about
split-style keyboard,  I always wanted one.  The keyboards I
had  made   so  far  weren’t.  Split   would  be  completely
ergonomical,  but  unfortunately,  none (that  I  know  of)
exists that are both (a) wireless and (b) split. As always
I aimed to high and wanted to emulate the many features that
QMK implements. Most importantly, I  wanted to get back into
writing more low  level languages like c++, and  I take this
project as  a nice  opportunity to get  into c++  again, and
work with micro-controllers.&lt;/p&gt;
&lt;p&gt;This post  will serve as  my log for building  the keyboard.
The post will updated as I work on it.&lt;/p&gt;
&lt;p&gt;Core feature targets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split &lt;span class=&#34;underline&#34;&gt;wireless&lt;/span&gt; keyboard&lt;/li&gt;
&lt;li&gt;Hot swappable key sockets&lt;/li&gt;
&lt;li&gt;Portable, not a full keyboard&lt;/li&gt;
&lt;li&gt;Battery control&lt;/li&gt;
&lt;li&gt;OLED display&lt;/li&gt;
&lt;li&gt;Rotary encoders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org07c9ff9&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;outline&#34;&gt;Outline&lt;/h1&gt;
&lt;p&gt;The keyboard is split; it has two halves. The right and left
half will have  most of the same  “base” functionality. Most
importantly, each  half needs to  scan the matrix  to obtain
which keys are being pressed. One of the halves will act as a
server, the other will act as a client. The server will need
the following capabilities&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server abilities&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read matrix&lt;/li&gt;
&lt;li&gt;Setup a bluetooth connection
&lt;ul&gt;
&lt;li&gt;HID Device&lt;/li&gt;
&lt;li&gt;Mouse emulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Setup connection with client
&lt;ul&gt;
&lt;li&gt;Merge keys pressed and send to bluetooth controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Control LEDs on both client and server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Client abilities&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read matrix&lt;/li&gt;
&lt;li&gt;Find server and send pressed keys to server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to the heavier load of  the server, I prefer to make the
role of  who is server and  who is client dynamic.  That is,
with some heuristic (for example  deep sleep), the roles may
switch to prolong batter life of both units.&lt;/p&gt;
&lt;p&gt;To give a course overview consider the following picture:&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/overview.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org8341c49&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;esp32&#34;&gt;ESP32&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-07-12 Mon&amp;gt;&lt;/span&gt;&lt;/span&gt;-
I  opted for  a micro-controller  as this  would allow  me to
prototype without  worrying about my electronic  skills. The
controller needed  to have  battery control,  bluetooth, and
preferable an  energy efficient screen;  I ended up  with an
esp32.&lt;/p&gt;
&lt;p&gt;The esp32 is a hybrid chip that has both Wi-Fi and bluetooth
capabilities. The esp32 consists  of different versions that
varies in (mainly) in the number of pins, battery connector,
and  or screen.  The version  I ended  with (LORA-V2)  had a
battery connector and a tiny OLED screen.&lt;/p&gt;
&lt;p&gt;The  ecosystem  of  ESP32   is  well-developed  albeit  less
convenient  than  its  arduino  counterparts.  Luckily,  the
opensource community has taken it upon themselves to provide
lots  of  arduino bindings  to  the  libraries by  espressif
(manufacturer of esp32).&lt;/p&gt;
&lt;p&gt;Especially important  (as it turned  out later) is  that the
esp32 has the capabilities of using both Wi-Fi and bluetooth
low  energy simultanaously.  In  addition, through  ESP-NOW,
different  eps32  modules can  form  a  mesh, which  I  will
harness to do server-client communication.&lt;/p&gt;
&lt;p&gt;
&lt;figure  id=&#34;figure-pin-out-esp32-lora-v2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/pinout.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Pin-out ESP32 LORA-V2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;For prototype 1, the following pinout was used&lt;/p&gt;
&lt;table border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;pin&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;13&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;14&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;27&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;26&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;25&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;led input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;row 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;18&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;23&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;19&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;22&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;21&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;column 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;17&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;rotary encoder A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;5&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;rotary encoder B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Pin 4 could still be used as a modulated pin
for measuring the battery.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org1f8f18e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;matrix-scanning&#34;&gt;Matrix scanning&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-07-12 Mon&amp;gt; &lt;/span&gt;&lt;/span&gt; A keyboard  matrix scanning circuit is used
to enhance the  number of keys, while keeping  the number of
pins low.  A micro-controller uses general  pin input/output
(GPIO) to  register currents.  If a  singular key  switch is
wired to  a single pin,  96 pins would  be needed for  a 104
sized keyboard (full-size). This would be unpractical.&lt;/p&gt;
&lt;p&gt;As an alternative  one could apply matrix  scanning. In this
method,  the keys  are wired  as  a grid  where each  column
connects to each  row effectively forming a  “switch”. For a
total for 100 keys, one would need 10x10 grid. The grid acts
as a force multiplier for the number of switches. Instead of
needing 100  separate keys,  we merely need  10 rows  and 10
columns (20 pins) to wire our 100 switch keyboard.&lt;/p&gt;
&lt;p&gt;The  matrix is  repeatedly  scanned to  determine  if a  row
column form  an open circuit.  That is,  if a key  switch is
pressed down, current  can flow between the  row and column.
The scanning occurs at a high scan rate, making it seemingly
instantaneous.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org3d9c27c&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ghosting&#34;&gt;Ghosting&lt;/h2&gt;
&lt;p&gt;Matrix  scanning  forms  an excellent  idea  to  efficiently
represent our electronic  switches. However, merely scanning
does  not  correctly records  all  key  presses. Under  some
conditions, a matrix  can record ghost keys,  i.e. keys that
are  registered  but not  pressed.  This  process is  called
ghosting.&lt;/p&gt;
&lt;p&gt;Ghosting  occurs  when  current   can  freely  flow  between
separate  rows or  columns due  to another  row/column being
open.  For example  consider a  simple two  row, two  column
keyboard. This board can support 4 keys. When two keys along
the diagonal  are pressed,  we register  4 keys(!).  This is
obviously wrong and  needs to be corrected.  The most common
approach is to put a diode  right after the switch either on
the columns or rows,  which prevents current from traversing
and causing ghosting.&lt;/p&gt;
&lt;p&gt;
&lt;figure  id=&#34;figure-ghosting-example-ghosting-occurs-when-current-can-flow-freely-across-columns-and-rows-left-one-key-is-pressed-down-bottom-left-middle-a-key-across-from-the-first-is-activated-which-causes-ghosting-right-current-flows-from-the-second-row-first-column-to-the-second-row-second-column-etc&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/ghosting.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Ghosting example. Ghosting occurs when current can flow freely across columns and rows. (Left) one key is pressed down bottom left. (Middle) A key across from the first is activated which causes ghosting (right); current flows from the second row, first column to the second row, second column etc.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgb6c4bce&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;key-debouncing&#34;&gt;Key debouncing&lt;/h2&gt;
&lt;p&gt;Key  debounce is  a mechanism  to filter  out erroneous  key
activity.  When  two metal  plates  come  into contact,  the
signal does not form a clean  square wave. In order to clean
up  this  signal, key  debouncing  is  used to  reflect  the
“press”  of  key switch.  Initially  I  used a  simple  time
filter, i.e.  ensuring that  the keyswitch was  pressed down
between  x ms.  This ended  up being  a bit  noisy with  the
switches I  was using; I  ended up writing a  digital filter
that worked fairly well.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org1551f4d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Added matrix class
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added matrix scan&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added key debounce&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added (whole) matrix debounce
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; filters out erroneous key presses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org80acce2&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;esp-now&#34;&gt;ESP-Now&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-06-19 Sat&amp;gt;&lt;/span&gt;&lt;/span&gt;
The two  halves need to  communicate to each other.  There is
only one half that is connected through bluetooth to another
device. We call  this the server, and the  other the client.
Keys pressed on  the client needs to be  communicated to the
server  which   processes  the  keys,  and   sends  it  over
bluetooth. Luckily,  ESP-now offers a mesh  interface we can
utilize for  this purpose.  This is easier  to setup  than a
bluetooth mesh interface and should be relatively secure for
foreign attackers. From the website we read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ESP-NOW is yet another protocol developed by Espressif, which enables multiple devices to communicate with one another without using Wi-Fi. The protocol is similar to the low-power 2.4GHz wireless connectivity that is often deployed in wireless mouses. So, the pairing between devices is needed prior to their communication. After the pairing is done, the connection is secure and peer-to-peer, with no handshake being required.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a id=&#34;org5d2fa59&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mesh-interface-class&#34;&gt;Mesh interface class&lt;/h2&gt;
&lt;p&gt;The mesh class is responsible for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup / deinit the ESP-now connection&lt;/li&gt;
&lt;li&gt;Holding a buffer that is sent over the ESP-now connection.
The buffer holds information that needs to be communicated
between each  halves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At  the moment  of writing,  the mesh  class holds  a static
buffer   which  holds   `keyswitch_t`.  These   are  structs
containing when the last time  the pins were read as active.
In addition, it contains information  on the source and sinc
pins, and column and row indices. These last two are used to
index into the final keymap on the server side. This way, no
actual key information is send, but the server reads the key
from the  col and row,  then they are combined.  This solves
the issue of sending ascii shifted codes or media keys.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org7b6376a&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-1&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implemented mesh interface class&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Added server capabilities to join the keys from both half and communicate through bluetooth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org10d9a33&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;replacing-esp-now-with-ble-mesh&#34;&gt;Replacing ESP now with BLE mesh&lt;/h2&gt;
&lt;p&gt;The current consumption  of esp now is too  high to reliable
use on battery. By replacing ESP now with a BLE alternative,
the current  consumption can be  reduced by 50  percent. ESP
offers a novel  BLE mesh functionality which may  serve as a
replacement for ESP now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What functions does BLE mesh have?&lt;/li&gt;
&lt;li&gt;BLE mesh can send 11 octets (88 bits) of information. This
is significantly less than 250 of esp now(!).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org5920043&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;modifier-keys&#34;&gt;Modifier keys&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2021-07-26 Mon&amp;gt;  &lt;/span&gt;&lt;/span&gt;  My  initial implementation  measures  the
onset of  keys. That is,  debounce worked by  measuring when
the “square  wave” of the  key was pressed. This  allows for
fast  and  accurate  detection  detecting  key  press  down.
Initially my intentions was to merge the other keys together
such that multiple keys are registered at the same time. For
example, the shift key needs to register two keys at minimum
to shift the ascii code around for let’s say `a` to `A`.&lt;/p&gt;
&lt;p&gt;Consequently, I need to both  register the key press down as
well as the  key release; I modified  the debounce mechanism
to also detect the key release.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgaf157bd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-2&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Change key detection. Register key press and key release&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Mesh buffer management is moved out of the keyboard class.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Fixed wrong indexing in reading the active keys on the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org4196787&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;bluetooth&#34;&gt;Bluetooth&lt;/h1&gt;
&lt;p&gt;Bluetooth  is  rather  complicated. The  Bluetooth  Keyboard
class takes  care of  most of the  heavy lifting.  Key codes
have an associated  ascii code, these are put  into an ascii
code map. Note that the over bluetooth (for whatever reason)
these keycodes are remapped to different numbers.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgef9da12&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-3&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Expand  this section with info  on characteristics and
services.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Figure out  how  the key  codes  are organized  The
symbols are organized in a 128 ascii keymap containing the
hex codes to  a symbol. Hex codes can be  send directly in
addition to  normal strings  over bluetooth.  The modifier
keys  in  combination with  some  media  control keys  are
defined   in  “BleKeyboard.h”,   the  ascii   map  is   in
“BleKeyboard.cpp”.  I  have  written a  short  wrapper  in
“key_defintions.hpp”.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add functions for  interfacing with bluetooth  to the
keyboard class
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Pressing down keys&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Releasing keys&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Convert config class  to static class&lt;/li&gt;
&lt;li&gt;[-] Write layer keymap for keyboard
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Wrote qwerty base layer&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add fixed array check to the layers (add to constant
config class steps)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org4affbc2&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;keyboard-layers&#34;&gt;Keyboard layers&lt;/h1&gt;
&lt;p&gt;A layer  is implemented as a  2D vector for the  moment, but
will  likely change  in finalizing  the keyboard.  An active
layer is set as a pointer  to the current active layer. Each
keyswitch has  information on  where in  the grid  they fit;
keys are read by using these indices in the 2D vector. I did
consider an  unordered_map use the keyswitch  directly as an
indicator. This could then be combined with pointers to make
a  layer dynamic,  i.e.  instead of  having  the concept  of
layers, each key has a different layer that can be accessed.
This adds  some complexity and  I decided against  this. The
main reason is that the client side would then need to store
information  on what  each keyswitch  points to.  This would
increase communication between each  halves if modifiers are
used for example. I am  afraid that this added communication
is not as trivially solved,  i.e. one needs to send modifier
key across ESP-NOW and then shift all affected keys and when
activated send this information back. The ESP-NOW channel is
not designed for high information throughput.&lt;/p&gt;
&lt;p&gt;The keyboard is  not going to be full size.  That is, purely
based on the number of keys,  this keyboard will not be able
to have a 1-to-1 mapping  from symbol to keyswitch. Luckily,
we  can  greatly  increase  the number  of  symbols  on  the
keyboard by hosting the missing symbols on different layers.
This means we have to implement a feature that allows one to
switch  between   different  layers.  For  example   we  may
implement a layer up and layer  down key, or allow to switch
directly between different  layers. In QMK is  worked out by
an `enum struct`.  Layers are stacked on top  of each other.
This has the  added feature of allowing  a “transparent” key
to access on a layer below. I wish to emulate this feature.&lt;/p&gt;
&lt;p&gt;I currently host my key layer  as a 2d vector. In finalizing
my build this  may change to a fixed array  size. As vectors
can be arbitrary sized, I need to add a check to the vectors
to not allow uses to  define oddly sized arrays (which would
lead to  seg faults).  This will be  added to  the finalized
checks.&lt;/p&gt;
&lt;p&gt;In  QMK layers  are `enum` type, which  means the  layers are
number  and tracked  through an  int. Here,  I will  have an
`active_layer`  which points  to the  `layer_t` hosting  the
current  active keys.  With transparent  keys I  can imagine
that this approach will not work.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org5c9dfaa&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-4&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement key layers
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; KC_TRANS accesses key below the current layer
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; This effect may  stack until a non-transparent key
is found&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Layer switch keys
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Up and down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Hold  layer switch key: similar  to modifier keys,
these  keys  temporarily   shift  the  key layer  while
holding down this key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;orgfe759ee&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;rotary-encoder&#34;&gt;Rotary encoder&lt;/h1&gt;
&lt;p&gt;The keyboard  has two rotary  encoder (one on  each halves).
The encoders  I added were mostly  as a gimmick, but  can be
used as slider controls for volume control and or scrolling.&lt;/p&gt;
&lt;p&gt;
&lt;figure  id=&#34;figure-left-schematic-rotary-encoder-the-a-and-b-pin-are-90-degrees-out-of-phase-and-produce-a-quadrature-signal-right-in-the-rest-state-both-a-and-b-pin-register-0-the-quadrature-encoding-for-the-a-and-b-pin-are-given-in-&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/encoder.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      (left) Schematic rotary encoder. The A and B pin are 90 degrees out of phase and produce a quadrature signal (right). In the rest state both A and B pin register 0. The quadrature encoding for the A and B pin are given in &amp;lt;encoder_scheme&amp;gt;.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The rotary encoder has two  pins that are shifted 90 degrees
out  of  phase  (see  figure  &lt;a href=&#34;fig:encoder&#34;&gt;fig:encoder&lt;/a&gt;).  Each  click
produces a  quadrature signal  that is fixed.  Unknowingly I
bought encoders that are  extremely noisy (KY-040). When the
encoder clicks,  contacts are  moved across a  terminal. The
signal  produced  are  ideally  two  square  offsets  by  90
degrees.  In  practice  however, the  signal  debounces  and
produces  more  signal. They  are  three  traditional ways  of
taming noisy signals&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hardware filtering&lt;/li&gt;
&lt;li&gt;Digital filtering&lt;/li&gt;
&lt;li&gt;Decoding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don’t know  much about the first method or  last method. I
initially tried  method 2, i.e. measuring  the pins, waiting
for  some  time and  measure  again.  This however  did  not
correctly measure the rotations.  I tried multiple libraries
that used interrupt  routines that did not  end up correctly
measuring the  clicks of the  encoder. Finally I  found &lt;a href=&#34;https://www.best-microcontroller-projects.com/rotary-encoder.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this
blog  post&lt;/a&gt; which  highlighted exactly  the problem  with the
KY-040. The  decoder method  worked like  a charm,  but took
some  time to  figure out.  Below is  the exploration  I had
trying to figure out how this code worked.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgccf6ee7&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;taming-the-ky-040-with-decoding&#34;&gt;Taming the KY-040 with decoding&lt;/h2&gt;
&lt;p&gt;The quadrature signal per click  produces a fixed output for
either clockwise or anti-clockwise rotation. The encoder can
be thought of  as a fixed state machine  that moves between
different states (&amp;lt;table_transition&amp;gt;).&lt;/p&gt;
&lt;table id=&#34;org02a9d44&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;Current state&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;&amp;#xa0;&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;New state&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;&amp;#xa0;&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Direction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;A pin&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;B pin&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;A pin&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;B pin&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In practice however, a noisy rotary encoder will also output
some state transitions that are not allowed, e.g. 11-&amp;gt;00. In
order to  correctly read which direction  the rotary encoder
was turned in, a digital filter can be used. A simple filter
would be something like&lt;/p&gt;
&lt;p&gt;$$ signal = (signal &amp;laquo; 1) | digitalRead(A_{pin}) | 0xF000$$&lt;/p&gt;
&lt;p&gt;A signal is  only read if the integer value  reaches the all
ones state, then resets and  waits again. Trying this method
did not end well for me.  I ended up using sequence decoder;
the pattern are listed in &amp;lt;encoder_scheme&amp;gt;.&lt;/p&gt;
&lt;p&gt;We can  group the  current state  and new state  as a  4 bit
number,  i.e. $\{a,  b, a&amp;rsquo;,  b&amp;rsquo;\}$  where $a$,  $b$ are  the
current state of the A and B  pin and $a&amp;rsquo;$, $b&amp;rsquo;$ are the new
state of the A  and B pin. This implies that  2^4 = 16 state
transitions are possible and we only allow for 8 of these to
occur (see table &amp;lt;table_transition&amp;gt;).&lt;/p&gt;
&lt;table id=&#34;org754597b&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;state (bit mask)&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Allowed&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Direction&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;State&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0000&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0001&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0010&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0011&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0100&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0101&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0110&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;0111&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1000&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1001&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1010&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1011&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1100&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1101&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1110&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;True&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-right&#34;&gt;1111&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;False&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table id=&#34;orgd83144a&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-right&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Bitmask&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-right&#34;&gt;Hex&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Direction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;0001 0111&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0x17&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;0010 1011&lt;/td&gt;
&lt;td class=&#34;org-right&#34;&gt;0x2b&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;anti-clockwise&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a id=&#34;org30de569&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-5&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add rotary encoder to keyboard class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;orgff0649f&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;led-driver-fastled&#34;&gt;LED driver: FastLED&lt;/h1&gt;
&lt;p&gt;I generally don’t care  for LED under keyboard. However, as  this was a “bigger”
project, I  decided to play  around with LED  support. Different LEDs  types are
possible, I  ended up  going with  the SK6812  which offer  RGB support  and are
generally easier  to hand  solder than the  popular WS2812(B).  After purchasing
however, I turned out that finding a LED  driver posed to be a bit cumbersome. I
tried a few different code bases and they  ended up not working out the box. Not
sure  why.  After  some  searching,  I stumbled  on  the  library  FastLED.  The
documentation  does not  explicitly  support  the SK6812.  The  git issue  page,
however, showed  that there  is some support  for it. In  addition, some  of the
example code had mentions of it. Anyhoozle, after some tweaking around (and some
ugly soldering) I achieved:&lt;/p&gt;
 &lt;video width=&#34;320&#34; height=&#34;240&#34; controls&gt;
  &lt;source src=&#34;./figures/leds_cycle.mp4&#34; type=&#34;video/mp4&#34;&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Happy days! The  LED driver was one of  the last parts of the  list, which means
that the end is  in sight! The coming week I will integrate  the driver with the
keyboard class and check the box below.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org894745e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-6&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; LED driver
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Initialize LED driver&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make LED wrapper in keyboard class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org19921c7&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;oled-display&#34;&gt;OLED Display&lt;/h1&gt;
&lt;p&gt;&lt;a id=&#34;orgf9d2835&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-7&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Start creating interface for display management&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Find interesting functions to put on the screen
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; WiFi notifications?&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Keyboard status info
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Keyboard layer info&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Battery level info&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org1b1a44a&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;deep-sleep&#34;&gt;Deep sleep&lt;/h1&gt;
&lt;p&gt;When not  in use I  aim to put  the keyboard in  deep sleep.
Some pins  on the esp32 can  be used to wakeup  the keyboard
from deep  sleep. The  RTC_GPIO pins and  Touch pins  can be
used for waking the device from deep sleep. The RTC pins are&lt;/p&gt;
&lt;table id=&#34;orge469a35&#34; border=&#34;2&#34; cellspacing=&#34;0&#34; cellpadding=&#34;6&#34; rules=&#34;groups&#34; frame=&#34;hsides&#34;&gt;
&lt;colgroup&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;col  class=&#34;org-left&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;RTC Pin&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;GPIO&lt;/th&gt;
&lt;th scope=&#34;col&#34; class=&#34;org-left&#34;&gt;Comment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO02&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;had issues with encoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO10&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO04&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;OLED SDA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO15&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO12&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO14&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO13&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO16&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO14&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO13&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO15&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;OLED SLK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO09&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO32&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO08&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO33&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO04&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO34&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO05&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO35&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO00&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO36&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO03&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO39&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;input only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO06&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO25&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO07&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO26&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO17&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO27&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;org-left&#34;&gt;RTC GPIO11&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;GPIO00&lt;/td&gt;
&lt;td class=&#34;org-left&#34;&gt;button pin(?)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The set  GPIO12/13/14/25/26/27 could form a  set for which
all the columns or rows will  have a key that is connected
to  deep sleep;  this would  mean either  the rows  or the
columns are connected to a pin that is reachable from deep
sleep. I will  have to run some experiments  if that could
allow the keyboard to wake up from deep sleep, i.e. if the
the  column or  row  is not  active I  wonder  if the  the
current will  be low, i.e. if  the pins are in  deep sleep
and  a small  current is  tested on  the active  pins (set
above),   does  the   current   go  from   HIGH  to   LOW?
Alternatively,  I could  connect the  pins to  the set  3x
range only for deep sleep mode.&lt;/p&gt;
&lt;p&gt;There are two sleep modes; light sleep and deep sleep. For
light sleep the internal state of the system is preserved,
which is not the case for deep sleep. This would mean that
for deep sleep the keyboard effectively reboots.&lt;/p&gt;
&lt;p&gt;There are 4 ways to wake up from deep sleep:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;External current
&lt;ol&gt;
&lt;li&gt;Either through ext0 or ext1 wake up&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Touch pins&lt;/li&gt;
&lt;li&gt;Timer&lt;/li&gt;
&lt;li&gt;ULP co-processor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I aim  to be able to  wake up the keyboard  from any regular
key presses. That is, after some time-out, the user need not
press a  button. Instead, a  control signal will  monitor if
some current  changed and then  reboot the device.  Method 1
would  be suitable  if the  pins are  directly connected  to
ground. With  the matrix  scan setup,  there are  not enough
pins to measure  a current difference if one of  the keys in
the matrix would  be pressed. Method 3 is  also not suitable
as the input to the keyboard does not happen at a fixed time
interval. Method 4 requires coding for the ULP co-processor.
This requires knowledge  of assembly which I do  not have. I
think it is  possible that this would reduce  the deep sleep
current even more. However, in the end it still utilizes the
RTC pins.&lt;/p&gt;
&lt;p&gt;Luckily, my  keyboard will  only require  5 +  6 =  11 pins.
There are  in total 10  touch pins  which would make  this a
possible target if  they work. Initial testing  shows that a
touch wake up would work with  a touch threshold of 45. This
would require either the columns or the rows to be hooked up
to the  touch sensors. By  monitoring any current  change of
the rows  or columns would  result in  the board to  wake up
from sleep (which is ideal).&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org28fc435&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-8&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement deep sleep
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; added deep sleep time-out to config&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Touch pins will be either rows or columns&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test matrix  scan diodes  with deep  sleep feature,
i.e.  does  deep  sleep   current  still  register  with
row2column or reverse connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org6d70429&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;battery-control&#34;&gt;Battery control&lt;/h1&gt;
&lt;p&gt;The ESP32 oled  has an internal charging circuit.  It is not
known to  me that this circuit  can be read to  retrieve the
battery  capacity. What  can  be  done is  use  a analog  to
digital  converter pin  (ADC) to  readout the  state of  the
battery. In order  to readout the battery  capacity, we need
to change  the voltage  potential in  a working  range. Each
ADC pin can  read at most 3.3V. The battery  has a potential
of 3.7V. By using a voltage  divider, we can readout the pin
in a  save range. This  works by stepping down  the voltage,
and  sensing  the state  of  the  battery capacity.  As  the
battery is used, the voltage capacity changes accordingly.&lt;/p&gt;
&lt;p&gt;I  am  currently using  2x  100  kOhm resistors  which  will
produce a  voltage difference of  3.7/2 = 1.85 volts  with a
leak current &amp;lt;20 micro A.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org1314ffd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-9&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement battery control&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Add power button to PCB design&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org899ac2c&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pangodream.es/esp32-getting-battery-charging-level&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.pangodream.es/esp32-getting-battery-charging-level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;orgbc724cc&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;pcb-layout-design&#34;&gt;PCB layout design&lt;/h1&gt;
&lt;p&gt;I used  kicad for PCB  design. The  layout of the  keys were
determined by tracing out my  hand and determining the shift
in the  columns by  the mount of  “natural bend”  my fingers
have. I traced  my hand and made a horizontal  line from the
pinky; this served as my zero line. Columns 1, 2, and 6 were
determined to lie on this zero line. The remaining 3 columns
were shifted. upwards sequentially.&lt;/p&gt;
&lt;p&gt;The bottom  row (id 5) contains  merely 3 keys and  they are
rotated from left to right as  5, 10, 15 degrees. These were
determined based on  “angle” of my thumb. It  was judge sort
of by eye (and a ruler).&lt;/p&gt;
&lt;p&gt;Below is  some code I  wrote to determined the  outline. The
end result is:&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/pcb3d.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgf94a89d&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;making-the-layout&#34;&gt;Making the layout&lt;/h2&gt;
&lt;p&gt;The code below are some scripts I wrote to determined the relative position between keys. It is (very) uggly code but worked for this simple purpose. Future me may want to make it look prettier for the outside world.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org5365539&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;edge-cut-pcb&#34;&gt;Edge cut pcb&lt;/h2&gt;
&lt;p&gt;Kicad prefers to make edge cuts relatively simple, i.e. straight lines. I attempted to round most corners, but the odd layouts of the bottom keys (K54, K55, K56) made it a bit hard given the odd angle. I put some effort in making it somewhat curved.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org7b992ab&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;case-design&#34;&gt;Case design&lt;/h1&gt;
&lt;p&gt;The  case is  going to  be a  sandwich style  case. It  will
consist at minimum of 3 layers: the bottom plate, the middle
plate and  the top plate.  The top  plate will host  the key
switches, reliefs ar cut such that the key top can be opened
while the  key is  mounted. A  plate in  this design  is not
necessary but  preferred as  the key  sockets are  not super
rigid, i.e. you could theoretically  have a lose switch over
time. A plate fixes the keys in place.&lt;/p&gt;
&lt;p&gt;The  edge cut  layers,  court yards  and  user drawings  are
combined and exported  from kicad to svg format.  I used the
keyboard layout editor together  with the codeblock below to
determine where the  cuts would have to be made  for the top
plate.&lt;/p&gt;
&lt;p&gt;For the keyswitch  cutouts, I took a shortcut.  By using the
&lt;a href=&#34;https://keyboard-layout-editor.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keyboard layout  editor&lt;/a&gt; in conjunction with  &lt;a href=&#34;https://builder.swillkb.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;case builder&lt;/a&gt;, I
was  able  to export  the  keyboard  layout and  obtain  the
correct keyswitch footprint for  the plate. The case builder
website takes  json as  input which  is compatible  with the
keyboard  layout  editor. The  output  of  the case  builder
software allows for automatic screw hole and plate clearance
for  simple pcb  designs (i.e.  rectangular). Unfortunately,
this design is not well suited  for this. As such I exported
the drawings  to svg and  overlayed it with the  export from
kicad.&lt;/p&gt;
&lt;p&gt;The  top  plate is  nearly  done.  I  am currently  in  the
progress  of  making the  curves  a  bit smoother  for  the
outside. I  will work on  the middle and bottom  plate from
this top plate design.&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./figures/elanor_top.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For case &lt;a href=&#34;http://builder.swillkb.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://builder.swillkb.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For layout &lt;a href=&#34;http://www.keyboard-layout-editor.com/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.keyboard-layout-editor.com/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;changes-10&#34;&gt;Changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[-] construct plate layer
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4x 5mm screw holes&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1x diameter (5mm) clearance outside&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; add key switch mounting holes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; construct top layer&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; construct middle layer&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; construct bottom layer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org37935b8&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;specialized-keys&#34;&gt;Specialized keys&lt;/h1&gt;
&lt;p&gt;&lt;a id=&#34;orgc6993cf&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;layer-taps&#34;&gt;Layer taps&lt;/h2&gt;
&lt;p&gt;The keyboard  will have (27  + 1)  * 2 keys  (in principle).
This is not  enough to emulate a real keyboard.  For this we
need  to utilize  more “layers”  to create  more degrees  of
freedom.  In  QMK  there  are  various  different  modes  of
activating  a different  keycode depending  on how  long you
press a keycode. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// L-ayer, T-ap - 256 keycode max, 16 layer max
#define LT(layer, kc) (kc | QK_LAYER_TAP | ((layer &amp;amp; 0xF) &amp;lt;&amp;lt; 8))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All ascii codes can be encoded  in 255 characters. In QMK 16
bits are used to encode the symbol. The remaining 8 bits are
divided  in  two: 4  bits  are  given  to encode  the  layer
information, 4 bits are given for a “special” range of keys.&lt;/p&gt;
&lt;p&gt;Layer  tap give  you the  ability to  switch to  a different
layer  by holding  on  to a  key for  a  longer time,  while
sending  a keycode  when holding  for a  shorter time.  This
allows for  sacrificing one key  for quickly switching  to a
layer momentarily while holding  down the designated key. In
my  opinion this  works better  than a  layer switch  up and
down. For single  keypresses. In the future I  may look into
single tap modifier  keys similar to the  leader key concept
in vim/emacs.&lt;/p&gt;
&lt;h3 id=&#34;changes-11&#34;&gt;Changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add layer tap keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org9fe2de3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;one-shot-modifier-keys&#34;&gt;One shot modifier keys&lt;/h2&gt;
&lt;p&gt;A one  shot key allows for  chaining a pair of  keys together
without holding  both keys  at the  same time.  For example,
pressing CTLR + V can be  performed by tapping CTLR and then
tapping V.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orge641ca8&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;leader-key&#34;&gt;Leader key&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; TODO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id=&#34;org204445e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;replacing-esp_now&#34;&gt;Replacing esp_now&lt;/h1&gt;
&lt;p&gt;ESP now  is a simple service  that uses the WiFi  antenna to
setup a wireless bridge between two devices. It is simple to
setup and can  be used for small  form communication between
devices.  The  fast  development   and  setup  yields  major
advantages. Adding  the WiFi requirements, however,  has one
major drawback; it increases  the current draw, rendering it
problematic  in  use  for   low  energy  devices.  Different
techniques may  be used to  mitigate the current  draw. For
example, a power saving scheme  may be applied to reduce the
current  draw  by  the  antenna.  As  keys  can  be  pressed
asynchronous and at any time while the board is active, this
technique is not preferred for  the keyboard. This is mainly
due to  the fact that  from light  sleep until the  board is
operational (stable bluetooth connection) takes around 130ms
from conducted tests.&lt;/p&gt;
&lt;p&gt;Another solution would be to  replace the esp now connection
and harassing  the already existing bluetooth  connection to
multiplex the signal. This is  the goal for Splitboard as it
could reduce the battery consumption by circa 50 percent.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org79d4be3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ble-in-a-nutshell&#34;&gt;BLE in a nutshell&lt;/h2&gt;
&lt;p&gt;Bluetooth  low energy  communication  consists of  services.
These  services represent  the type  that other  devices can
expect. They may be pre-defined according to some spec, e.g.
a  HID device  such as  a  keyboard or  mouse, or  something
entirely different  such as a  heartbeat sensor or  a custom
service. Each  service may  hold 0 or  more characteristics.
These  characteristics  may  be   though  of  as  “bluetooth
variables”.   In  addition   to   a   possible  value,   the
characteristic holds a descriptor of the value.&lt;/p&gt;
&lt;p&gt;For a given low energy bluetooth device, the device can host
(and  possible advertise)  one server,  and make  up to  $n$
possible connections. The server  hosts the services and can
advertise the services. A client  connects to the server and
interacts  with  one  of the  characteristics.  For  example
device  $A$ may  advertise service  BAG which  holds several
characteristics  such as  MONEY,  CANDY  (etc). A  different
device  $B$ may  connect  with device  $A$  looking for  the
service BAG and take one CANDY.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org0ad4064&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;integration-with-ble-keyboard&#34;&gt;Integration with BLE keyboard&lt;/h2&gt;
&lt;p&gt;One of the major challenges  of replacing esp-now is that it
requires integration  of the proposed bluetooth  bridge with
the existing bluetooth interface for the keyboard. As little
to  no documentation  was available  (other than  the source
code), quiet  some time was  spent piecing together  how BLE
communication operates and how the required bluetooth bridge
can be added  and integrated with existing  packages used in
the project.&lt;/p&gt;
&lt;p&gt;First, there are different  bluetooth stacks available, e.g.
bluestack,  NimBLE, arduino-esp32-BLE  and so  on. Recently,
the BleKeyboard package allowed for  NimBLE to be used which
improves  upon  the  existing  stack  for  arduino-esp32  by
reducing its  memory footprint. The interface  was made such
that  it retains  its  compatibility with  the existing  BLE
implementation canonically used in arduino-esp32. The NimBLE
stack  was  targeted in  this  framework.  This narrows  the
development for  esp32 controllers only. In  the future, the
conversion to  blue kitchen’s bluestack may  be preferred as
it targets a wider controller set.&lt;/p&gt;
&lt;p&gt;As a target a bluetooth mesh will need to be implemented. In
this mesh, there exists one server  that acts as a HID. This
server itself is a client  that connects to other clients in
the  mesh which  hosts  their internal  matrix state.  These
servers   will   have   general   service   that   hosts   a
characteristic  which  holds a  vector  of  key events.  The
client is  notified by a  change in the actively  held keys,
and converts through the keymap in HID inputs.&lt;/p&gt;
&lt;p&gt;The BleKeyboard  is a server in  itself. Each characteristic
has its  own separate callback  that can be set.  The server
itself, however, can only  hold one callback. Luckily, these
don’t  need  to be  set.  Consequently,  the mesh  can  live
independently from  the BleKeyboard. Care needs  to be taken
with  antenna  (BLEDevice)  as wrongfully  initializing  may
cause some unexpected runtime errors. Luckily, this is setup
only once.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orga8c659e&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;changes-12&#34;&gt;Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Replaced esp-now with ble mesh&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Expanding the farm</title>
      <link>https://cvanelteren.github.io/post/nim_chicken/</link>
      <pubDate>Fri, 25 Jun 2021 19:47:55 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/nim_chicken/</guid>
      <description>&lt;p&gt;In a previous post, I created the fastest chicken alive! I implemented a chicken in cpp and provided bindings in cython and python. However, our chicken Carl needs some friends. Today, I will implement a friend for Carl, in another morer niche language called &lt;code&gt;nim&lt;/code&gt;; and I will show how nim can produce similarly fast chickens that can be called from python.&lt;/p&gt;
&lt;h1 id=&#34;what-is-nim&#34;&gt;What is Nim?&lt;/h1&gt;
&lt;p&gt;From their website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nim is a statically typed compiled systems programming language. It combines succesful concepts from mature languages like Python, Ada and Modula&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am not familiar with the latter two, but I am quite familiar with python and it  can be used to solve one of python&amp;rsquo;s weaknesses: python can be terribly slow for numerical problems.&lt;/p&gt;
&lt;p&gt;Writing nim is similar to other modern languages like rust: it prefers inheritance over composition. However, it does not shy away from using &amp;ldquo;more&amp;rdquo; traditional methods. For example, in nim &amp;ldquo;classes&amp;rdquo; are called types and types can be composed (preferred) but can also inheret from oneanother. Which allows more ancient programmers like me to be able to use my toolset while also exploring composition more.&lt;/p&gt;
&lt;p&gt;Writing nim looks very similar to python. Variables defined with the &lt;code&gt;var&lt;/code&gt; keyword, functions are &lt;code&gt;proc&lt;/code&gt; (process), printing is performed with &lt;code&gt;echo&lt;/code&gt;, classes / structs are &lt;code&gt;types&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;Variables are typed, however the compiler is often very good at inferring the type you are assigning. This effectively means that defining a variable as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is the same, and &lt;code&gt;var&lt;/code&gt; can be seen as implicitly using the &lt;code&gt;auto&lt;/code&gt; keyword from cpp. For more details on nim see  their excellent tutorial on the website; let&amp;rsquo;s start making our chicken friend!&lt;/p&gt;
&lt;h1 id=&#34;nim-chickens&#34;&gt;Nim chickens&lt;/h1&gt;
&lt;p&gt;Classes are called &lt;code&gt;types&lt;/code&gt;. As want to bind to python, we make use of the &lt;code&gt;nimpy&lt;/code&gt; library from nim. Fellow pythonistas should feel right at home&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# import a package as per usual of python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nimpy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# types are &amp;#34;classes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# they are similar to structs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyNimObjectExperimental&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have  defined our  chicken &lt;code&gt;type&lt;/code&gt;,  the ref  object makes
sure that  our types &lt;em&gt;inherents&lt;/em&gt;  from the root  object that
makes sure our  chicken can be imported from  python. As can
be  seen  from  the  name, this  features  is  experimental.
Functions are  readily exportable to python,  but types have
only recently been added in. Not to worry, it will hopefully
improve over time.&lt;/p&gt;
&lt;h1 id=&#34;nim-implementation&#34;&gt;Nim implementation&lt;/h1&gt;
&lt;p&gt;Similar, to our previous chicken Carl, we want our chicken to &lt;em&gt;do&lt;/em&gt; something&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# on the structs we can define methods&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;set_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exportpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exportpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exportpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Peck peck!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a lot going on in this piece, so let&amp;rsquo;s step through it. The &lt;code&gt;proc&lt;/code&gt; keyword is similar to &lt;code&gt;def&lt;/code&gt; in python: it defines our function. Similar to type hinting our return type is given after the &lt;code&gt;:&lt;/code&gt;. Nim, similar to other languages like matlab, implictly defines a &lt;code&gt;result&lt;/code&gt; variable; return keywords are not necessary and last lines without assignment are automatically put into result. For example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;some_test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;some_test_other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;some_test_another&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;are equivalent. The curly brackets indicate compiler directives; &lt;code&gt;{.exportpy.}&lt;/code&gt; tells the compiler to make these functions available in our shared object.&lt;/p&gt;
&lt;h1 id=&#34;compilation&#34;&gt;Compilation&lt;/h1&gt;
&lt;p&gt;All that is left to do is to compile our chicken into a shared object and import it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nim cpp -d:release --threads:on --app:lib --out:chicken.so chicken.nim
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and, we are done! This is less boilerplate code than the cython approach. Compared to cython, nimpy is less mature. However, nim can readily interact with native c/cpp. It&amp;rsquo;s mainly immature in the type export, but I hope that will improve in the future. It does form a nice alternative to more &amp;ldquo;verbose&amp;rdquo; cpp; it writes quite similar to python. Just to finish of the end, let&amp;rsquo;s run our litle chicken&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#file: test_nim.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;chicken&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Betsy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My name is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;generates&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;My name is Betsy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Betsy and Carl can now life together in python world, but they can also interact together in nim or cpp world.&lt;/p&gt;
&lt;h1 id=&#34;the-nim-farm&#34;&gt;The nim-farm&lt;/h1&gt;
&lt;p&gt;So far we have been able to bind the nim type to python. Carl and Betsy can life happily ever after there. Nim is, however, also compiled. So we can also inhabit our little farm purely on the cpp side. This will look as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;../cython_classes/chicken.cpp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CChicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;../cython_classes/chicken.hpp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;importcpp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Chicken&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cstring&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CChicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;../cython_classes/chicken.hpp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;importcpp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;#.peck(@)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# var chick = CChicken()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cchick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CChicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Carl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nchick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Betsy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;We have two chickens now, introducing:&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nchick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cchick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nchick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cchick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now Betsy and Carl are the fastest two chickens across languages. Note that it is also possible to output nim to c/cpp, making it possible for Betsy and Carl to life across three worlds, but this is where I end the post for now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;We have two chickens now, introducing:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Betsy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Carl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I hope Betsy and Carl get to know each other better! Soon we need to prepare for additional expansions. I&amp;rsquo;m looking at you &lt;code&gt;pybind11&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;outlook&#34;&gt;Outlook&lt;/h1&gt;
&lt;p&gt;Nim offers readable syntax and fast performance. It is a rather strange language as it originally released in 2008 but hasn&amp;rsquo;t gotten much attention compared to more recent languages like rust.  I hope in the future I can apply this language more, for now I&amp;rsquo;m signing off. See you in the next post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating the fastest chicken alive!</title>
      <link>https://cvanelteren.github.io/post/cython_classes/</link>
      <pubDate>Wed, 23 Jun 2021 20:59:18 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/cython_classes/</guid>
      <description>&lt;p&gt;Python is my preferred language due to its ease of use, general application, interactivity, and availibility of libraries. There is however one big downside: python can be painfully slow for numerical applications. One possible solution is to write extensions in lower-level languages and provide bindings that one can use from python. This is often referred to as the two-language-problem as it requires a programmer to know two languages. In this post I will explore &lt;code&gt;cython&lt;/code&gt; which is &amp;ldquo;half&amp;rdquo; language that allows to write both native python and c/cpp in one file. In particular, I will focus on binding cpp classes to python to extend python libraries to python.&lt;/p&gt;
&lt;h1 id=&#34;cython&#34;&gt;Cython&lt;/h1&gt;
&lt;p&gt;In a nutshell, cython allows a programmer to write python-like code that is then compiled into c/cpp. This can be used to write high performant extensions. The goal of this post is not to provide a novice tutorial; for those interested cython&amp;rsquo;s documentation provides some great material for that. This post will focus mainly on providing bindings of cpp to python.&lt;/p&gt;
&lt;h2 id=&#34;cpp-class&#34;&gt;CPP class&lt;/h2&gt;
&lt;p&gt;Imagine we want to write an extremely fast chicken, and we have decided python is not suitable for this. We turn to cpp and write something like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// file: chicken.hpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef chicken_hpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define chicken_hpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Chicken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We start implementing straight away and end up with something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// file: chicken.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;chicken.hpp&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;HELP I HAVE NO NAME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Peck peck!&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our chicken is alive, but it is stuck in cpp world. We have to get it running in python. How do we start doing this? In order to order to create a python chicken class, we have to provide a wrapper. In cython, we achieve this in two steps. First, we need to tell cython what cpp object we are looking at. Second, we need to create a cython extenions that provides bindings for python.&lt;/p&gt;
&lt;h2 id=&#34;cython-header&#34;&gt;Cython header&lt;/h2&gt;
&lt;p&gt;Just like in cpp, cython has a header/implementation style system. The headers are kept in &lt;code&gt;pxd&lt;/code&gt; files and the implementation are in &lt;code&gt;pyx&lt;/code&gt; files. For our headers, we merely have to provide implementations on our cpp class methods. Cython offers three kinds; standard python &lt;code&gt;def&lt;/code&gt; implementations, &lt;code&gt;cpdef&lt;/code&gt;, and &lt;code&gt;cdef&lt;/code&gt; methods. The last two are special kinds; &lt;code&gt;cpdef&lt;/code&gt; methods allow for seamless interaction between &amp;ldquo;python-world&amp;rdquo; and &amp;ldquo;cpp-world&amp;rdquo;. In contrast, &lt;code&gt;cdef&lt;/code&gt; methods only allow for interaction with cpp objects. For this current tutorial, this distinction is not necessary, and we can go straight ahead with implementing our chicken.&lt;/p&gt;
&lt;p&gt;We need to tell cython what our cpp class looks like. We create a header file &lt;code&gt;cychicken.pxd&lt;/code&gt; with the following content&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#file cychicken.pxd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libcpp.string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cimport&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;chicken.hpp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cppclass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first line imports the cython implementation of string (which is merely a wrapper for &lt;code&gt;std::string&lt;/code&gt;), &lt;code&gt;cdef extern&lt;/code&gt; is similar to &lt;code&gt;extern&lt;/code&gt; in c/cpp: it tells cython that there is an external header. We then &amp;ldquo;color in&amp;rdquo; the header and tell cython what objects life in this header. In our case, we have a chicken! And importantly, this chicken has a &lt;code&gt;name&lt;/code&gt; and it can &lt;code&gt;peck&lt;/code&gt; (be careful!).&lt;/p&gt;
&lt;h2 id=&#34;cython-implementation&#34;&gt;Cython implementation&lt;/h2&gt;
&lt;p&gt;We now have  implemented our class in cpp and defined headers for the class in cpp and cython. At this point, we could &lt;code&gt;cimport&lt;/code&gt; the &lt;code&gt;Chicken&lt;/code&gt; class and within &lt;code&gt;cdef&lt;/code&gt; and &lt;code&gt;cpdef&lt;/code&gt; classes can interact with this cpp class. However, we cannot yet import our chicken class into python directly. In order to do this, we have to provide an implementation (wrapper) for the python side to interact with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#file: cychicken.pyx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cychicken&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cimport&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cdef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PyChicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# defines class property&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# can be put into pxd files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_chicken&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# normal class init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# need to convert string to binary&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# for cpp strings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_chicken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Chicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ensures that point is deleted when object is&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# destroyed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__dealloc__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_chicken&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# wrap the peck function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_chicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# wrap the name property&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpp_chicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our chicken can now freely be called  from python!&lt;/p&gt;
&lt;h2 id=&#34;compiling&#34;&gt;Compiling&lt;/h2&gt;
&lt;p&gt;Before we can test our chicken, we have to write some code to compile it into a shared object. Setting up a proper extension is some black magic in and of itself. I won&amp;rsquo;t bore you with the details today and for now you can merely create a setup file as such&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#file: setup.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;setuptools&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Cython.Build&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cythonize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;setuptools.extension&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;exts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;chicken&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;sources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cychicken.pyx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;chicken.cpp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;include_dirs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;c++&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ext_modules&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cythonize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running &lt;code&gt;python setup.py build_ext --inplace&lt;/code&gt; will compile and create a shared object file inplace with the name &lt;code&gt;chicken.cpython-39-x86_64-linux-gnu.so&lt;/code&gt;. We can now finally test our chicken:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# file: test_chicken.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;chicken&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyChicken&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;chicken&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyChicken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Carl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# cdef Chicken chicken = Chicken(string(&amp;#34;CARL&amp;#34;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My name is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;chicken&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;peck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which outputs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;My name is Carl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Peck peck!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Carl is now the fastest chicken that can be called from python.&lt;/p&gt;
&lt;h2 id=&#34;outlook&#34;&gt;Outlook&lt;/h2&gt;
&lt;p&gt;I hope you find this little tutorial helpful. I hope to continue some explorations in the future. Cython can produce highly performant code. However, providing the bindings requires a lot of boiler-plate code. In the future I will look at another great alternative to provide python wrappers. In particular, I will focus on &lt;code&gt;nimpy&lt;/code&gt; and &lt;code&gt;pybind11&lt;/code&gt;. See you in the next post!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Through the looking glass</title>
      <link>https://cvanelteren.github.io/talk/through-the-looking-glass/</link>
      <pubDate>Thu, 10 Jun 2021 11:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/talk/through-the-looking-glass/</guid>
      <description>&lt;p&gt;Understanding dynamical systems  is a fundamental problem for  the 21st century.
Despite the &lt;em&gt;prima facie&lt;/em&gt; differences  and purposes of many real-world networks,
previous research shows several universal characteristics in networks properties
such as the small-world phenomenon, fat-tail degree and feedback loops. This has
lead to  the common but  often implicit assumption  that the connectedness  of a
node in  the network is proportional  to its dynamic importance.  For example in
epidemic  research, high  degree nodes  or &amp;ldquo;super-spreaders&amp;rdquo;  are associated  to
dominant  epidemic  risk and  therefore  deserve  special attention.  Yet  prior
research shows  that the shared  universality in network characteristics  is not
shared in the dynamic or functional properties of many real-world systems.&lt;/p&gt;
&lt;p&gt;In  this  talk I  will  explore  the  relation  between local  interactions  and
macroscopic properties of  a system through the lens of  statistical physics and
information theory. In particular, I will  show novel methods on determining the
so-called driver node  in complex systems, and how tipping  point can be studied
from an information theoretical perspective.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>F-strings are awesome!</title>
      <link>https://cvanelteren.github.io/post/f-strings/</link>
      <pubDate>Wed, 09 Jun 2021 08:34:46 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/f-strings/</guid>
      <description>&lt;p&gt;If you know python, you are probably aware of its value. The language is easy to
develop in, which allows for quick proto-typing. It is used by many professional
companies either as glue to bind compiled languages together, or as a full-stack
for    their     apps.    With     the    advent     of    python     3.6    and
[[pep498][https://www.python.org/dev/peps/pep-0498/]]  f-strings   arrived.  Its
longer name  is formatted string  literals or f-strings  for short ;-).  This is
probably  one of  my  favorite python  feature  next to  dicts  being sorted  by
default.&lt;/p&gt;
&lt;h1 id=&#34;what-are-f-strings&#34;&gt;What are f-strings?&lt;/h1&gt;
&lt;p&gt;When you are either debugging or writing some logging library, strings (in my opinion) were always a hassle to deal with. In order to write the output of a variable one would either write&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;some_variable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Some variable = &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some_variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Some variable = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;some_variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The top choice is not that bad, but the bottom one gets complicated when formatting get more complex. With F-strings this procedure can be simplified by writing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;some_variable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Some variable = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;some_variable&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Merely by adding the formatting operator &amp;ldquo;f&amp;rdquo; in front of the string, the output becomes more readble. This has the advantage of literate programming; in plain langauge one can read this sentence and understand its output in normal plain language. Since the feature became available I quickly replaced the old formatting style with this newer better way: f-strings became the norm.&lt;/p&gt;
&lt;p&gt;In my normal debugging routine, I am not used to using full-featured debuggers that can step in and out of functions allowing to see local scopes: very fancy! I usually resort to print statements, and lots of coffee and pacing around my room. F-strings allowed for quicker and clearer debugging. This prompts me to write this post now, what else can F-strings do?&lt;/p&gt;
&lt;h1 id=&#34;capabilities-of-f-strings&#34;&gt;Capabilities of f-strings&lt;/h1&gt;
&lt;p&gt;F-strings can do a great number of things. One of the major advantages for me is making readable strings as was indicated above.&lt;/p&gt;
&lt;h2 id=&#34;formatting&#34;&gt;Formatting&lt;/h2&gt;
&lt;p&gt;F-strings allow for formatting opertors to be passed in. Say you have a float with 10 decimes but you only want to plot the rounded number. One option would be to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.23123512351234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This however, quickly makes the f-string &amp;ldquo;complicated&amp;rdquo;. Luckliy f-strings allow for format operators to be used&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.23123512351234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.2f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# prints up to 2 precision&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next to rouding formats, one can also apply alignment of text&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# right align&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;lt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# left align [default often]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; ^&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# center align &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many more possibilites, including aligning only if the text goes bigger than a certain predetermined number of digits or formatting numbers to hex, binary, leading space for positive numbers and so on. In fact there is a minilanguage that it uses that can be found on the python docs.&lt;/p&gt;
&lt;h2 id=&#34;lambda-functions&#34;&gt;Lambda functions&lt;/h2&gt;
&lt;p&gt;The colon is used for formatting indicator. This  prevents lambda functions from being used directly. However, by encapsupating the lambda function one is still able to insert lambda functions inside an f-string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;This is the output of two times 2 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;debugging&#34;&gt;Debugging&lt;/h3&gt;
&lt;p&gt;In debugging I often revert to writing the output to check the state of some object. This results in boilerplate statements that I wish to prevent. Luckily, f-strings can to this with &lt;code&gt;=&lt;/code&gt; formatting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;some_variables&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ERROR!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;some_variable&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will print out&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;some_variable = &amp;#34;ERROR&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty neat! This reduces the need to write out the variable statement completely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Growing pains</title>
      <link>https://cvanelteren.github.io/post/mu4e/</link>
      <pubDate>Fri, 23 Apr 2021 10:12:27 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/mu4e/</guid>
      <description>&lt;p&gt;A few months ago, my work email switched from outlook to office365 and with it came &lt;code&gt;OAUTH2&lt;/code&gt;. The transition was coupled with a lack of initial support for receiving email with this security protocol yielding some email clients useless. The goal of this post is to provide future users with some insights on setting up &lt;code&gt;OAUTH2&lt;/code&gt; in &lt;code&gt;mu4e&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;what-is-oauth2&#34;&gt;What is &lt;code&gt;OAUTH2&lt;/code&gt;?&lt;/h1&gt;
&lt;p&gt;In brief, &lt;code&gt;OAUTH2&lt;/code&gt; is an authorization framework that enables applications to obtain limited access to user accounts through an HTTP service; applications can request access to user accounts by setting up a host-client secret. In my mind it works similar to ssh, but then for email.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-oauth2-in-emacs&#34;&gt;Setting up &lt;code&gt;OAUTH2&lt;/code&gt; in &lt;code&gt;emacs&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;We need to achieve 3 functions; we need to acquire a secret, use this secret to receive the emails, use this secret to send the emails. As an important aside, it is highly recommended to set up some form of password management such that your passwords are not visible of left strangling in clipboard; setting this up is outside the scope of this post.&lt;/p&gt;
&lt;h2 id=&#34;acquiring-the-secret&#34;&gt;Acquiring the secret&lt;/h2&gt;
&lt;p&gt;Acquiring the  secret may  differ depending  on the service  you are  using. For
gmail                    for                     example                    look
&lt;a href=&#34;https://support.google.com/googleapi/answer/6158849?hl=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.   For  office
365 however, it proved a bit more difficult as I did not have access directly to
the api to setup  these keys through azure. In order to acquire  a secret I used
&lt;a href=&#34;https://gitlab.com/muttmua/mutt/-/blob/master/contrib/mutt_oauth2.py.README&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mutt_oauth2.py&lt;/a&gt;, and I used the publically available application id for thunderbird which can be found &lt;a href=&#34;https://hg.mozilla.org/comm-central/file/tip/mailnews/base/src/OAuth2Providers.jsm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. At the time of writing these are&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AppID = &amp;#34;08162f7c-0fd2-4200-a84a-f25a4db0b584&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ClientSecret = &amp;#34;TxRBilcHdC6WGBee]fs?QR:SJ8nI[g82&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Acquire &lt;code&gt;mutt_oauth2.py&lt;/code&gt; and edit the code with this info. Running the file will then give you a token after logging in with the through your SSO of your company. Now this token is put in a public file, anyone who has acces to this token could theoretically scoop your email. It is therefore crucial to setup a password manager to protect this secret.&lt;/p&gt;
&lt;h2 id=&#34;email-receiving&#34;&gt;Email receiving&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;mbsync&lt;/code&gt; for receiving emails and &lt;code&gt;mstmp&lt;/code&gt; for sending emails. I again defer to the respective tutorials for setting these up, but I will mention what is important for &lt;code&gt;XOAUTH2&lt;/code&gt;. A common setup for &lt;code&gt;mbsync&lt;/code&gt; could look something like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#file: ~/.mbsyncrc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# mbsyncrc based on
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ACCOUNT INFORMATION
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IMAPAccount office365
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Address to connect to
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host smtp.office365.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User &amp;lt;EMAIL_HERE&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PassCmd &amp;#34;gpg2 -q --for-your-eyes-only --no-tty -d ~/.emacs.d/mu4e/.mbsyncpass-&amp;lt;EMAIL_HERE&amp;gt;.gpg&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AuthMechs LOGIN
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SSLType IMAPS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SSLVersions TLSv1.3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CertificateFile /etc/ssl/certs/ca-certificates.crt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IMAPStore office365
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Account office365
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MaildirStore office365-local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SubFolders Verbatim
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# The trailing &amp;#34;/&amp;#34; is important
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Path ~/Mail/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Inbox ~/Mail/office365/inbox
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Channel office365
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Far :office365-remote:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Near :office365-local:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Exclude everything under the internal [Gmail] folder, except the interesting folders
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Patterns * ![office365]* &amp;#34;[office365]/Sent Mail&amp;#34; &amp;#34;[office365]/Starred&amp;#34; &amp;#34;[office365]/All Mail&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Or include everything
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#Patterns *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Automatically create missing mailboxes, both locally and on the server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Create Both
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Save the synchronization state files in the relevant directory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SyncState *
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PassCmd&lt;/code&gt; is used to obtain your client secret setup above and &lt;code&gt;Authmechs&lt;/code&gt; needs to be set to &lt;code&gt;XOAUTH2&lt;/code&gt; for office365 but oddly to &lt;code&gt;LOGIN&lt;/code&gt; for gmail. One could also fill in a bare string password to prevent the hassle of setting up password managers, or use &lt;code&gt;python mutt_oauth2.py TOKENFILE&lt;/code&gt; to acquire the secret but this is not recommended. We can check whether it works by running &lt;code&gt;mbsync -a&lt;/code&gt; from your favorite shell.&lt;/p&gt;
&lt;h1 id=&#34;email-sending&#34;&gt;Email sending&lt;/h1&gt;
&lt;p&gt;Similar to the setup of &lt;code&gt;mbsync&lt;/code&gt;, &lt;code&gt;msmtp&lt;/code&gt; can be setup to use a password command
to  insert the  token.  Note that  you  need  to have  a  version that  supports
&lt;code&gt;xoauth2&lt;/code&gt;, on AUR you can use &lt;code&gt;mstmp-oauth2&lt;/code&gt;. A typical setup looks like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#file : ~/.mstmprc 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Set default values for all following accounts.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;defaults
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;auth           on
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tls            on
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tls_trust_file /etc/ssl/certs/ca-certificates.crt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;logfile        ~/.msmtp.log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Outlook
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;account        outlook
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;host           smtp.office365.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;port           587
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;auth           xoauth2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;from           username@outlook.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# not necessary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# user           username
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# not recommended
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;password       plain-text-password
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# recommended
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;passwordeval   &amp;lt;Password retrieval command&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Set a default account (optional)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;account default : outlook
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now receive and send email. As coup de grâce we have to setup mu4e to start using email from emacs.&lt;/p&gt;
&lt;h1 id=&#34;mu4e&#34;&gt;Mu4e&lt;/h1&gt;
&lt;p&gt;At the time of writing I am using doom emacs which has some wrappers for common long commands; substitute for default emacs accordingly. &amp;ldquo;Modern&amp;rdquo; mu4e uses contexts to setup various emails addresses. I will highlight the relevant parts for mu4e setup to make our setup work. In short, we need to tell &lt;code&gt;mu&lt;/code&gt; use &lt;code&gt;mbsync&lt;/code&gt; to retrieve emails and &lt;code&gt;msmtp&lt;/code&gt; to send emails.&lt;/p&gt;
&lt;script src=&#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/languages/elisp.min.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mu4e&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;setq&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;;; set correct path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;sendmail-program&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/usr/sbin/msmtp&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;mu4e-root-maildir&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/Mail&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;mu4e-mu4e-mail-path&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/Mail&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;send-mail-function&lt;/span&gt;  &lt;span class=&#34;ss&#34;&gt;&amp;#39;smtpmail-send-it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;;; remove adding username --&amp;gt; msmtp takes care of this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;message-sendmail-f-is-evil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;;; read who is sending the email &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;message-sendmail-extra-arguments&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;--read-envelope-from&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-mu4e-context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;office365&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;ss&#34;&gt;:match-func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-prefix-p&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/office365&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-message-field&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:maildir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                      &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                     &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;ss&#34;&gt;:enter-func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-message&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Entering work contenxt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;c1&#34;&gt;;; relevant bits&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;ss&#34;&gt;:vars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-sent-folder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/office365/Sent Items&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-drafts-folder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/office365/Drafts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-inbox-folder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/office365/inbox&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;smtpmail-local-domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;office365&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;smtpmail-smtp-server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;smtp.office365.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;smtpmail-default-smtp-server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;smtp.office365.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;user-mail-address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;user email address&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;c1&#34;&gt;;; name setup in mbsync&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mu4e-get-mail-command&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mbsync office365&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a final step, we need to setup &lt;code&gt;mu&lt;/code&gt; itself. From your favorite shell write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mu init --maildir ~/Mail --my-address=&amp;lt;User address&amp;gt; &amp;amp;&amp;amp; mu index
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;and we are done! You can now use mu4e to send and receive emails from emacs, happy hacking 😉!&lt;/p&gt;
&lt;!-- # Setting up password manager --&gt;
&lt;!-- https://avaldes.co/2020/01/28/secret-service-keepassxc.html --&gt;
&lt;!-- # Using msmtp --&gt;
&lt;!-- https://tushartyagi.com/blog/configure-mu4e-and-msmtp/ --&gt;
&lt;!-- # Setting up different accounts  --&gt;
&lt;!-- https://www.djcbsoftware.nl/code/mu/mu4e/Contexts.html --&gt;
</description>
    </item>
    
    <item>
      <title>Covid dashboard</title>
      <link>https://cvanelteren.github.io/project/covid_dashboard/</link>
      <pubDate>Thu, 15 Apr 2021 19:38:11 +0200</pubDate>
      <guid>https://cvanelteren.github.io/project/covid_dashboard/</guid>
      <description>&lt;video playsinline autoplay controls mute loop&gt;
 &lt;source src = &#34;covid_anim.webm&#34; type = &#34;video/webm&#34;&gt;
 &lt;source src = &#34;test.mp4&#34; type = &#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;p&gt;Covid &amp;ldquo;dashboard&amp;rdquo; I made over the winter. Data is sourced from the &lt;a href=&#34;https://coronadashboard.rijksoverheid.nl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dutch national corona dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to reflect the spatio-temporal effects of corona, the data consists of three categories per municipality. Namely, it consists of total cases, number of people hospitalized, and the total number of deceased due to corona at per publication date. I designed a metric which I dubbed &amp;ldquo;relative severity&amp;rdquo; which had the goal to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reflect the relative contribution to the source vectors at each time point;&lt;/li&gt;
&lt;li&gt;Include a memory effect of the contribution over time;&lt;/li&gt;
&lt;li&gt;Take into account the number of people living in that municipality.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For municipality $j$ the  relative severity for source $s_i \in \{\textrm{total reported, hospitalized, deceased}\}$ at time $t$  was computed as&lt;/p&gt;
&lt;p&gt;$$ R_j(s_{ij}^t) = \frac{1}{Z_j \sum_k R_k(s_i^t)}\sum_{\tau =0}^t s_{ij}^{\tau},$$&lt;/p&gt;
&lt;p&gt;were $Z_j$ is the number of people living in municipality $j$, and $s_{ij}$ is one of the sources (total cases, hospitalized, deceased) in municipality $j$.
The percentile of $R_j(s_i^t)$ at each time $t$ is then computed and plotted above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rock-paper-scissor dynamics to study biodiversity</title>
      <link>https://cvanelteren.github.io/post/rps/</link>
      <pubDate>Mon, 05 Apr 2021 14:57:08 +0200</pubDate>
      <guid>https://cvanelteren.github.io/post/rps/</guid>
      <description>&lt;p&gt;Some  years ago  an  &lt;a href  url=&#34;https://www.nature.com/articles/nature06095&#34;&gt;
article  &lt;/a&gt;  was published  using  rock-paper-scissor  dynamics to  study  the
effects  on  biodiversity.  I  got  inspired by  the  excellent  website  of  &lt;a
href=&#34;https://www.complexity-explorables.org/explorables/cycledelic/&#34;&gt;Dirck
Brockmann  &lt;/a&gt;   and  decided   to  implement   it  myself   in  the   &lt;a  href
url=&#34;https://github.com/cvanelteren/Plexsim&#34;&gt; the computational  toolbox I wrote
&lt;/a&gt;. Below  I simulated  the rock-paper-scissor model  and created  a (possibly
novel)  agent-based  inspired  version  of  it.  The  model  produces  beautiful
fluid-like patterns  as can be  seen in the video  below simulated on  a 100x100
grid with Moore neighborhood.&lt;/p&gt;
&lt;figure&gt;    &lt;video    width=&#34;auto&#34;    height=&#34;auto&#34;    controls loop autoplay&gt;    &lt;source
src=&#34;rock_paper_scissor_dynamics.mp4&#34; type=&#34;video/mp4&#34;&gt;   &lt;/video&gt;  &lt;figcaption&gt;   Simulation  of
rock-paper-scissor dynamics on a 100x100 grid with Moore neighborhood. The model
starts with all  vertices having a random  value in $[0, 1]$. The  color of each
vertex is proportional to the density of the species (red, green or blue). White
would indicate low values of all  species whereas black indicates high values of
all species.  Over time  larger patches  of similar  states appear  and interact
according to rock-paper-scissor dynamics. &lt;/figure&gt;
&lt;h1 id=&#34;the-model&#34;&gt;The model&lt;/h1&gt;
&lt;p&gt;The model was designed to understand the co-existance of interacting species in a spatially extended ecosystem. Each vertex point represents the locus of three species.
The color (red, green, blue) are proportional to the density
of the three species at each pixel (vertex point).&lt;/p&gt;
&lt;p&gt;The  model produces  a wide  range of  different patterns  based on  three input
parameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Diffusion ($D$): mobility of species.&lt;/li&gt;
&lt;li&gt;Predation ($P$): competition between the tree different species.&lt;/li&gt;
&lt;li&gt;Competition ($C$): Competition among different specifies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each vertex in the system $\sigma_i  \in \sigma :=${ $\sigma_0, \dots, \sigma_n$
} contains a  vector with the density  of the three &amp;ldquo;species&amp;rdquo;,  i.e. rock ($r$),
paper ($g$), or scissor ($b$). The concentration of each specie at vertex $i$ is
updated according to&lt;/p&gt;
&lt;p&gt;$$
\frac{d \sigma_i}{dt} = \scriptstyle \begin{cases}
\frac{dr_i}{dt}&amp;amp; = ((\underbrace{P  (g_i - b_i)  + r_i}_{\textrm{predation}} - \underbrace{C  (g_i + b_i) - r_i^2}_{\textrm{Competition}})r_i - \underbrace{D(\sum_{&amp;lt;i,j&amp;gt;} r_j r_i)}_{\textrm{mobility}}) \delta t \\\
\frac{dg_i}{dt}&amp;amp; = ((P  (b_i - r_i)  + g_i - C  (r_i + b_i) - g_i^2)g_i - D(\sum_{&amp;lt;i,j&amp;gt;} g_j g_i)) \delta t \\\
\frac{db_i}{dt}&amp;amp; = ((P  (r_i - g_i)  + b_i - C  (r_i + g_i) - b_i^2)b_i - D(\sum_{&amp;lt;i,j&amp;gt;} b_j b_i)) \delta t, \end{cases}
$$&lt;/p&gt;
&lt;p&gt;where $&amp;lt;i,j&amp;gt;$ indicates the nearest neighbors of variable $i$.&lt;/p&gt;
&lt;p&gt;In order to see  the effect of the three parameters,  I simulated $T=1000$ steps
and visualized  the last system  state while varying predation,  competition and
diffusion while keeping the rest constant.  It is fascinating to see
how each parameter causes different spatially extended patterns. The simulations
over time exhibit  fluid-like behavior, and the observed  patterns are distinct
on the set of input parameters.  Most notably, the diffusion parameter can cause
large extended  patches similar to  what can  be observed in  Ising/Potts model.
Predation on  the other hand tends  to cause fragmentation of  species for lower
values, but  for higher values  create similar larger patterns.  The interaction
among the variables shows a non-linear  effect with each other. This can readily
be seen in the competition parameters.  That is, the competition parameter shows
larger patches  only for  a small range  (1.89 - 2.17)  while keeping  all other
values constant.&lt;/p&gt;
&lt;img src=&#34;diffusion.png&#34; alt =&#34;effect of mobility&#34;&gt;
&lt;img src=&#34;predation.png&#34; alt =&#34;effect of predation&#34;&gt;
&lt;img src=&#34;competition.png&#34; alt =&#34;effect of competition&#34;&gt;
&lt;h1 id=&#34;agent-based-implementation&#34;&gt;Agent-based implementation&lt;/h1&gt;
&lt;p&gt;In the original paper, the authors apply a so-called Gillspie algorithm to efficiently sample the reaction between the different density. I was interested whether one can get away with &amp;ldquo;tradtiional&amp;rdquo; Monte-Carlo methods and implemented and agent-based approach to the model above.&lt;/p&gt;
&lt;p&gt;Each agent updates stochastically with parameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mobility $M \in [0, 1]$&lt;/li&gt;
&lt;li&gt;Reproduction $R \in [0, 1]$&lt;/li&gt;
&lt;li&gt;Selection $S \in [0, 1]$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An agent can only reproduce if an adjacent vertex is dead. The other moves are updated sequentially with the probabilities indicated above. In short, each agent can assume one of 4 states:&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;Dead state&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Rock&amp;rdquo; state&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Paper&amp;rdquo; state&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Scissor&amp;rdquo; state&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each update step an agent interacts  with a random neighbor and randomly chooses
an interaction strategy random. That is, if the adjacent neighbor is empty, it could reproduce with probability $R$, otherwise it may attempt kill the neighbor with probability $S$. Lastly, it could inhabit the neighboring site with probability $M$. Note that the total set is a pair of (mobility, selection or reproduction).&lt;/p&gt;
&lt;p&gt;We then yield the following for $(M, R, S) \rightarrow 2.5:1.5:.05 = 1.3:1:0.03 \rightarrow (.5, .66, 0.016)$:&lt;/p&gt;
&lt;figure&gt;
&lt;video  width=&#34;auto&#34; height=&#34;auto&#34; controls autoplay loop&gt;  &lt;source src=&#34;rock_paper_scissor_dynamics_abm.mp4&#34;&gt; &lt;/video&gt;
&lt;figcaption&gt; Agent-based implementation of the model above. Black indicates dead or uninhabited vertices, red, yellow, green represent rock, paper, scissor state respectively. The dynamics are simulated on a 100x100 lattice with Moore neighborhood.
&lt;/figure&gt;
&lt;p&gt;This maintains the circular behavior found in the original paper, however this does not employ the Gillspie algorithm. This will be the topic of some future post.&lt;/p&gt;
&lt;!-- &lt;video id=&#34;video&#34; controls autplay loop&gt; --&gt;
&lt;!-- &lt;source src=&#34;test.webm&#34;&gt;  --&gt;
&lt;!-- &lt;/video&gt; --&gt;
&lt;!-- here --&gt;
</description>
    </item>
    
    <item>
      <title>Rock-paper-scissor dynamics to study biodiversity</title>
      <link>https://cvanelteren.github.io/project/roshambo/</link>
      <pubDate>Mon, 05 Apr 2021 14:57:08 +0200</pubDate>
      <guid>https://cvanelteren.github.io/project/roshambo/</guid>
      <description>&lt;p&gt;Some  years ago  an  &lt;a href  url=&#34;https://www.nature.com/articles/nature06095&#34;&gt;
article  &lt;/a&gt;  was published  using  rock-paper-scissor  dynamics to  study  the
effects  on  biodiversity.  I  got  inspired by  the  excellent  website  of  &lt;a
href=&#34;https://www.complexity-explorables.org/explorables/cycledelic/&#34;&gt;Dirck
Brockmann  &lt;/a&gt;   and  decided   to  implement   it  myself   in  the   &lt;a  href
url=&#34;https://github.com/cvanelteren/Plexsim&#34;&gt; the computational  toolbox I wrote
&lt;/a&gt;. Below  I simulated  the rock-paper-scissor model  and created  a (possibly
novel)  agent-based  inspired  version  of  it.  The  model  produces  beautiful
fluid-like patterns  as can be  seen in the video  below simulated on  a 100x100
grid with Moore neighborhood.&lt;/p&gt;
&lt;figure&gt;    &lt;video    width=&#34;auto&#34;    height=&#34;auto&#34;    controls loop autoplay&gt;    &lt;source
src=&#34;rock_paper_scissor_dynamics.mp4&#34; type=&#34;video/mp4&#34;&gt;   &lt;/video&gt;  &lt;figcaption&gt;   Simulation  of
rock-paper-scissor dynamics on a 100x100 grid with Moore neighborhood. The model
starts with all  vertices having a random  value in $[0, 1]$. The  color of each
vertex is proportional to the density of the species (red, green or blue). White
would indicate low values of all  species whereas black indicates high values of
all species.  Over time  larger patches  of similar  states appear  and interact
according to rock-paper-scissor dynamics. &lt;/figure&gt;
&lt;h1 id=&#34;the-model&#34;&gt;The model&lt;/h1&gt;
&lt;p&gt;The model was designed to understand the co-existance of interacting species in a spatially extended ecosystem. Each vertex point represents the locus of three species.
The color (red, green, blue) are proportional to the density
of the three species at each pixel (vertex point).&lt;/p&gt;
&lt;p&gt;The  model produces  a wide  range of  different patterns  based on  three input
parameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Diffusion ($D$): mobility of species.&lt;/li&gt;
&lt;li&gt;Predation ($P$): competition between the tree different species.&lt;/li&gt;
&lt;li&gt;Competition ($C$): Competition among different specifies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each vertex in the system $\sigma_i  \in \sigma :=${ $\sigma_0, \dots, \sigma_n$
} contains a  vector with the density  of the three &amp;ldquo;species&amp;rdquo;,  i.e. rock ($r$),
paper ($g$), or scissor ($b$). The concentration of each specie at vertex $i$ is
updated according to&lt;/p&gt;
&lt;p&gt;$$
\frac{d \sigma_i}{dt} = \scriptstyle \begin{cases}
\frac{dr_i}{dt}&amp;amp; = ((\underbrace{P  (g_i - b_i)  + r_i}_{\textrm{predation}} - \underbrace{C  (g_i + b_i) - r_i^2}_{\textrm{Competition}})r_i - \underbrace{D(\sum_{&amp;lt;i,j&amp;gt;} r_j r_i)}_{\textrm{mobility}}) \delta t \\\
\frac{dg_i}{dt}&amp;amp; = ((P  (b_i - r_i)  + g_i - C  (r_i + b_i) - g_i^2)g_i - D(\sum_{&amp;lt;i,j&amp;gt;} g_j g_i)) \delta t \\\
\frac{db_i}{dt}&amp;amp; = ((P  (r_i - g_i)  + b_i - C  (r_i + g_i) - b_i^2)b_i - D(\sum_{&amp;lt;i,j&amp;gt;} b_j b_i)) \delta t, \end{cases}
$$&lt;/p&gt;
&lt;p&gt;where $&amp;lt;i,j&amp;gt;$ indicates the nearest neighbors of variable $i$.&lt;/p&gt;
&lt;p&gt;In order to see  the effect of the three parameters,  I simulated $T=1000$ steps
and visualized  the last system  state while varying predation,  competition and
diffusion while keeping the rest constant.  It is fascinating to see
how each parameter causes different spatially extended patterns. The simulations
over time exhibit  fluid-like behavior, and the observed  patterns are distinct
on the set of input parameters.  Most notably, the diffusion parameter can cause
large extended  patches similar to  what can  be observed in  Ising/Potts model.
Predation on  the other hand tends  to cause fragmentation of  species for lower
values, but  for higher values  create similar larger patterns.  The interaction
among the variables shows a non-linear  effect with each other. This can readily
be seen in the competition parameters.  That is, the competition parameter shows
larger patches  only for  a small range  (1.89 - 2.17)  while keeping  all other
values constant.&lt;/p&gt;
&lt;img src=&#34;diffusion.png&#34; alt =&#34;effect of mobility&#34;&gt;
&lt;img src=&#34;predation.png&#34; alt =&#34;effect of predation&#34;&gt;
&lt;img src=&#34;competition.png&#34; alt =&#34;effect of competition&#34;&gt;
&lt;h1 id=&#34;agent-based-implementation&#34;&gt;Agent-based implementation&lt;/h1&gt;
&lt;p&gt;In the original paper, the authors apply a so-called Gillspie algorithm to efficiently sample the reaction between the different density. I was interested whether one can get away with &amp;ldquo;tradtiional&amp;rdquo; Monte-Carlo methods and implemented and agent-based approach to the model above.&lt;/p&gt;
&lt;p&gt;Each agent updates stochastically with parameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mobility $M \in [0, 1]$&lt;/li&gt;
&lt;li&gt;Reproduction $R \in [0, 1]$&lt;/li&gt;
&lt;li&gt;Selection $S \in [0, 1]$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An agent can only reproduce if an adjacent vertex is dead. The other moves are updated sequentially with the probabilities indicated above. In short, each agent can assume one of 4 states:&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;Dead state&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Rock&amp;rdquo; state&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Paper&amp;rdquo; state&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Scissor&amp;rdquo; state&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each update step an agent interacts  with a random neighbor and randomly chooses
an interaction strategy random. That is, if the adjacent neighbor is empty, it could reproduce with probability $R$, otherwise it may attempt kill the neighbor with probability $S$. Lastly, it could inhabit the neighboring site with probability $M$. Note that the total set is a pair of (mobility, selection or reproduction).&lt;/p&gt;
&lt;p&gt;We then yield the following for $(M, R, S) \rightarrow 2.5:1.5:.05 = 1.3:1:0.03 \rightarrow (.5, .66, 0.016)$:&lt;/p&gt;
&lt;figure&gt;
&lt;video  width=&#34;auto&#34; height=&#34;auto&#34; controls autoplay loop&gt;  &lt;source src=&#34;rock_paper_scissor_dynamics_abm.mp4&#34;&gt; &lt;/video&gt;
&lt;figcaption&gt; Agent-based implementation of the model above. Black indicates dead or uninhabited vertices, red, yellow, green represent rock, paper, scissor state respectively. The dynamics are simulated on a 100x100 lattice with Moore neighborhood.
&lt;/figure&gt;
&lt;p&gt;This maintains the circular behavior found in the original paper, however this does not employ the Gillspie algorithm. This will be the topic of some future post.&lt;/p&gt;
&lt;!-- &lt;video id=&#34;video&#34; controls autplay loop&gt; --&gt;
&lt;!-- &lt;source src=&#34;test.webm&#34;&gt;  --&gt;
&lt;!-- &lt;/video&gt; --&gt;
&lt;!-- here --&gt;
</description>
    </item>
    
    <item>
      <title>Are bubbles power law distributed?</title>
      <link>https://cvanelteren.github.io/post/coffee/</link>
      <pubDate>Mon, 22 Mar 2021 23:19:35 +0100</pubDate>
      <guid>https://cvanelteren.github.io/post/coffee/</guid>
      <description>&lt;p&gt;Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cvanelteren.github.io/post/coffee/coffee.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt;
Unforutnately, the process is not perfect. It was fun making this regardless.
</description>
    </item>
    
    <item>
      <title>Are bubbles power law distributed?</title>
      <link>https://cvanelteren.github.io/project/coffee/</link>
      <pubDate>Mon, 22 Mar 2021 23:19:35 +0100</pubDate>
      <guid>https://cvanelteren.github.io/project/coffee/</guid>
      <description>&lt;p&gt;Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cvanelteren.github.io/post/coffee/coffee.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt;
Unforutnately, the process is not perfect. It was fun making this regardless.
</description>
    </item>
    
    <item>
      <title>Are bubbles power law distributed?</title>
      <link>https://cvanelteren.github.io/projects/</link>
      <pubDate>Mon, 22 Mar 2021 23:19:35 +0100</pubDate>
      <guid>https://cvanelteren.github.io/projects/</guid>
      <description>&lt;p&gt;Power laws are everywhere, even in your coffee! One lazy sunday morning I wondered whether the bubbles in the milk of my coffee was power law distributed; a little bit of coding and a few moments later we had an answer!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://cvanelteren.github.io/post/coffee/coffee.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt;
Unforutnately, the process is not perfect. It was fun making this regardless.
</description>
    </item>
    
    <item>
      <title>Simulation based science lecture talks</title>
      <link>https://cvanelteren.github.io/talk/simulation-based-science-lecture-talks/</link>
      <pubDate>Fri, 12 Mar 2021 16:00:00 +0100</pubDate>
      <guid>https://cvanelteren.github.io/talk/simulation-based-science-lecture-talks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fix your matplotlib colorbars</title>
      <link>https://cvanelteren.github.io/post/matplotlib_colorbar/matplotlib_colorbar_fix/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/post/matplotlib_colorbar/matplotlib_colorbar_fix/</guid>
      <description>&lt;h1 id=&#34;fix-your-matplotlib-animations&#34;&gt;Fix your matplotlib animations!&lt;/h1&gt;
&lt;p&gt;Some time ago I saw a post on fixing &lt;a href=&#34;https://joseph-long.com/writing/colorbars/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;matplotlib colorbars&lt;/a&gt; by Joseph Lang. One of the major problems with matplotlib is that it works quite well out of the box, until it doesn&amp;rsquo;t. Making figures for publication just right can become tedious as shown by Joseph Lang as it requires one deep into the docs and figuring something simple like aligning colorbars to axes.&lt;/p&gt;
&lt;p&gt;After browsing stackoverflow I was triggered by a post that seemed to achieve something somewhat trivial but the proposed solution seemed too difficult. The problem posted by &lt;a href=&#34;https://stackoverflow.com/questions/60641147/matplotlib-plot-matrix-in-a-loop-while-updating-colorbar-value-range/60651223#60651223&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original poster&lt;/a&gt; described how the goal was to update the colorbar in animations of a heatmap. Animating in matplotlib can be super slow, if some tricks are not known to the end-user. Examples include blitting, preventing large object reconstruction, setting data structures manually, drawing canvas etc.&lt;/p&gt;
&lt;p&gt;After digging through the docs I figured out that in order to prevent manually updating the colorbar, one needs to force update of the map afterwhich the colorbar will be updated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subplots&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib.animation&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FuncAnimation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;matplotlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mpl_toolkits.axes_grid1&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_axes_locatable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;IPython.display&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HTML&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;rc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;animation&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;threading&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# define data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# setup figure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subplots&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;figsize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;divider&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make_axes_locatable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;divider&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append_axes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                              &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;5%&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             &lt;span class=&#34;n&#34;&gt;pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# J. Lang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# create mappable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# create colorbar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colorbar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# generate new data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# rescale data for cb trigger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;norm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;autoscale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# update mappable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colorbar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colorbar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mappable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# flush events update time &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ax&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;t = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flush_events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#     fig.subplots_adjust(wspace = 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tight_layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h_pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;anim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FuncAnimation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;frames&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;html_vid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_html5_video&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;embed_limit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_visible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# prevent double &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;HTML&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html_vid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;video width=&#34;288&#34; height=&#34;288&#34; controls autoplay loop&gt;
  &lt;source type=&#34;video/mp4&#34; src=&#34;data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAD5em1kYXQAAAKuBgX//6rcRem9
5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTU5IHIyOTkxIDE3NzFiNTUgLSBILjI2NC9NUEVHLTQg
QVZDIGNvZGVjIC0gQ29weWxlZnQgMjAwMy0yMDE5IC0gaHR0cDovL3d3dy52aWRlb2xhbi5vcmcv
eDI2NC5odG1sIC0gb3B0aW9uczogY2FiYWM9MSByZWY9MyBkZWJsb2NrPTE6MDowIGFuYWx5c2U9
MHgzOjB4MTEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVm
PTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6
b25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9OSBsb29r
YWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFj
ZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJh
bWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdl
aWdodHA9MiBrZXlpbnQ9MjUwIGtleWludF9taW49MTAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVz
aD0wIHJjX2xvb2thaGVhZD00MCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIzLjAgcWNvbXA9MC42MCBx
cG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IGlwX3JhdGlvPTEuNDAgYXE9MToxLjAwAIAAABINZYiE
ABD//veBvzLLXyK6yXH5530srM885DxyXYmuuNDdJ6HT9n2vxydf8xRgoPmio5c/hEzLIPXR/low
3kufhBRDBxNP1x26HDw7UAXwHlbZJFrkHiZb0/+MY5cVqdn6/iOzFKEZk+gKdE5HVPVMJikNbNIG
w2fR7o5JF2XMOHH5Ksw3+g4hM8Rc4u4/0zNHRBDQzThfZcXxiwC+I83l/xLo+ycjyH6BIi7xmLMj
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
HWRhdGEAAAABAAAAAExhdmY1OC4yOS4xMDA=
&#34;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;!-- ![png](./matplotlib_colorbar_fix_1_1.png) --&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Wowchemy, the website builder for Hugo</title>
      <link>https://cvanelteren.github.io/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/post/getting-started/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site&lt;/li&gt;
&lt;li&gt;The template can be modified and customised to suit your needs. It&amp;rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a &lt;strong&gt;no-code solution (write in Markdown and customize with YAML parameters)&lt;/strong&gt; and having &lt;strong&gt;flexibility to later add even deeper personalization with HTML and CSS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/wowchemy/wowchemy-hugo-modules/main/starters/academic/preview.png&#34; alt=&#34;The template is mobile first with a responsive design to ensure that your site looks stunning on every device.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;👉 &lt;a href=&#34;https://wowchemy.com/templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📚 &lt;a href=&#34;https://wowchemy.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Personalize your site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💬 &lt;a href=&#34;https://discord.gg/z8wNYzb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chat with the &lt;strong&gt;Wowchemy community&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Hugo community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href=&#34;https://twitter.com/wowchemy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wowchemy&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeorgeCushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GeorgeCushen&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23MadeWithWowchemy&amp;amp;src=typed_query&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#MadeWithWowchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💡 &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-themes/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt; for &lt;em&gt;Wowchemy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⬆️ &lt;strong&gt;Updating Wowchemy?&lt;/strong&gt; View the &lt;a href=&#34;https://wowchemy.com/docs/hugo-tutorials/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Tutorial&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/updates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;crowd-funded-open-source-software&#34;&gt;Crowd-funded open-source software&lt;/h2&gt;
&lt;p&gt;To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.&lt;/p&gt;
&lt;h3 id=&#34;-click-here-to-become-a-sponsor-and-help-support-wowchemys-future-httpswowchemycomsponsor&#34;&gt;&lt;a href=&#34;https://wowchemy.com/sponsor/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;❤️ Click here to become a sponsor and help support Wowchemy&amp;rsquo;s future ❤️&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a token of appreciation for sponsoring, you can &lt;strong&gt;unlock &lt;a href=&#34;https://wowchemy.com/sponsor/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;these&lt;/a&gt; awesome rewards and extra features 🦄✨&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/wowchemy/hugo-academic-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Academic CLI&lt;/a&gt;:&lt;/strong&gt; Automatically import publications from BibTeX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href=&#34;https://wowchemy.com/user-stories/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://wowchemy.com/docs/page-builder/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://wowchemy.com/docs/import/jupyter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://wowchemy.com/docs/install-locally/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://wowchemy.com/docs/customization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 34+ language packs including English, 中文, and Português&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;p&gt;Wowchemy and its templates come with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the &lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Demo&lt;/a&gt; to see it in action! Day/night mode can also be disabled by the site admin in &lt;code&gt;params.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/customization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully customizable.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-themes/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How many iPhones can I buy?</title>
      <link>https://cvanelteren.github.io/project/iphones/</link>
      <pubDate>Mon, 12 Oct 2020 11:18:00 +0100</pubDate>
      <guid>https://cvanelteren.github.io/project/iphones/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PlexSim</title>
      <link>https://cvanelteren.github.io/project/plexsim/</link>
      <pubDate>Sat, 30 Nov 2019 01:52:49 +0100</pubDate>
      <guid>https://cvanelteren.github.io/project/plexsim/</guid>
      <description>&lt;p&gt;Fast, general computational framework for complex adaptive systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing technical content in Markdown</title>
      <link>https://cvanelteren.github.io/post/writing-technical-content/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/post/writing-technical-content/</guid>
      <description>&lt;p&gt;Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Wowchemy.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the &lt;code&gt;syntax_highlighter&lt;/code&gt; option in your &lt;code&gt;config/_default/params.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pandas&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;data.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mindmaps&#34;&gt;Mindmaps&lt;/h3&gt;
&lt;p&gt;Wowchemy supports a Markdown extension for mindmaps.&lt;/p&gt;
&lt;p&gt;Simply insert a Markdown &lt;code&gt;markmap&lt;/code&gt; code block and optionally set the height of the mindmap as shown in the example below.&lt;/p&gt;
&lt;p&gt;A simple mindmap defined as a Markdown list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;
&lt;code&gt;
```markmap {height=&#34;200px&#34;}
- Hugo Modules
  - wowchemy
  - wowchemy-plugins-netlify
  - wowchemy-plugins-netlify-cms
  - wowchemy-plugins-reveal
```
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;markmap&#34; style=&#34;height: 200px;&#34;&gt;

&lt;pre&gt;- Hugo Modules
  - wowchemy
  - wowchemy-plugins-netlify
  - wowchemy-plugins-netlify-cms
  - wowchemy-plugins-reveal&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A more advanced mindmap with formatting, code blocks, and math:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;
&lt;code&gt;
```markmap
- Mindmaps
  - Links
    - [Wowchemy Docs](https://wowchemy.com/docs/)
    - [Discord Community](https://discord.gg/z8wNYzb)
    - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes)
  - Features
    - Markdown formatting
    - **inline** ~~text~~ *styles*
    - multiline
      text
    - `inline code`
    -
      ```js
      console.log(&#39;hello&#39;);
      console.log(&#39;code block&#39;);
      ```
    - Math: $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$
```
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;markmap&#34; style=&#34;height: 500px;&#34;&gt;

&lt;pre&gt;- Mindmaps
  - Links
    - [Wowchemy Docs](https://wowchemy.com/docs/)
    - [Discord Community](https://discord.gg/z8wNYzb)
    - [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes)
  - Features
    - Markdown formatting
    - **inline** ~~text~~ *styles*
    - multiline
      text
    - `inline code`
    -
      ```js
      console.log(&#39;hello&#39;);
      console.log(&#39;code block&#39;);
      ```
    - Math: $x = {-b \pm \sqrt{b^2-4ac} \over 2a}$&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&#34;charts&#34;&gt;Charts&lt;/h3&gt;
&lt;p&gt;Wowchemy supports the popular &lt;a href=&#34;https://plot.ly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plotly&lt;/a&gt; format for interactive charts.&lt;/p&gt;
&lt;p&gt;Save your Plotly JSON in your page folder, for example &lt;code&gt;line-chart.json&lt;/code&gt;, and then add the &lt;code&gt;{{&amp;lt; chart data=&amp;quot;line-chart&amp;quot; &amp;gt;}}&lt;/code&gt; shortcode where you would like the chart to appear.&lt;/p&gt;
&lt;p&gt;Demo:&lt;/p&gt;




&lt;div id=&#34;chart-298415376&#34; class=&#34;chart&#34;&gt;&lt;/div&gt;
&lt;script&gt;
  (function() {
    let a = setInterval( function() {
      if ( typeof window.Plotly === &#39;undefined&#39; ) {
        return;
      }
      clearInterval( a );

      Plotly.d3.json(&#34;./line-chart.json&#34;, function(chart) {
        Plotly.plot(&#39;chart-298415376&#39;, chart.data, chart.layout, {responsive: true});
      });
    }, 500 );
  })();
&lt;/script&gt;

&lt;p&gt;You might also find the &lt;a href=&#34;http://plotly-json-editor.getforge.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plotly JSON Editor&lt;/a&gt; useful.&lt;/p&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Wowchemy supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;{{&amp;lt; math &amp;gt;}}$...${{&amp;lt; /math &amp;gt;}}&lt;/code&gt; or &lt;code&gt;{{&amp;lt; math &amp;gt;}}$$...$${{&amp;lt; /math &amp;gt;}}&lt;/code&gt;, respectively. (We wrap the LaTeX math in the Wowchemy &lt;em&gt;math&lt;/em&gt; shortcode to prevent Hugo rendering our math as Markdown. The &lt;em&gt;math&lt;/em&gt; shortcode is new in v5.5-dev.)&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;{{&lt;/span&gt;&amp;lt; math &amp;gt;&lt;span class=&#34;nb&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\gamma&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;_{n} &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\frac&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{ &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; | &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n} &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;^T &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; x_{n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; |}{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\left&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\|\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{x}_{n}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\nabla&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\mathbf&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{x}_{n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\right&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\|&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;{{&lt;/span&gt;&amp;lt; /math &amp;gt;&lt;span class=&#34;nb&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;



$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$

&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;{{&amp;lt; math &amp;gt;}}$\nabla F(\mathbf{x}_{n})${{&amp;lt; /math &amp;gt;}}&lt;/code&gt; renders as 

$\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the math linebreak (&lt;code&gt;\\&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;{{&lt;/span&gt;&amp;lt; math &amp;gt;&lt;span class=&#34;nb&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sb&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;k;p_{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}^{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\begin&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{cases}p_{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}^{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} &amp;amp; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\text&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{if }k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;p_{&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;}^{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;} &amp;amp; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\text&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{if }k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;\end&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{cases}&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;{{&lt;/span&gt;&amp;lt; /math &amp;gt;&lt;span class=&#34;nb&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;




$$
f(k;p_{0}^{*}) = \begin{cases}p_{0}^{*} &amp; \text{if }k=1, \\
1-p_{0}^{*} &amp; \text{if }k=0.\end{cases}
$$


&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
A[Hard] --&gt;|Text| B(Round)
B --&gt; C{Decision}
C --&gt;|One| D[Result 1]
C --&gt;|Two| E[Result 2]
&lt;/div&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;sequenceDiagram
Alice-&gt;&gt;John: Hello John, how are you?
loop Healthcheck
    John-&gt;&gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&gt;&gt;Alice: Great!
John-&gt;&gt;Bob: How about you?
Bob--&gt;&gt;John: Jolly good!
&lt;/div&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/div&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 &amp;lt;--&amp;gt; C2: Cool label
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;classDiagram
Class01 &lt;|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --&gt; C2 : Where am i?
Class09 --* C3
Class09 --|&gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 &lt;--&gt; C2: Cool label
&lt;/div&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;stateDiagram
[*] --&gt; Still
Still --&gt; [*]
Still --&gt; Moving
Moving --&gt; Still
Moving --&gt; Crash
Crash --&gt; [*]
&lt;/div&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Markdown too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;- [x]&lt;/span&gt; Write math example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;- [x]&lt;/span&gt; Write diagram example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;- [ ]&lt;/span&gt; Do something else
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Save your spreadsheet as a CSV file in your page&amp;rsquo;s folder and then render it by adding the &lt;em&gt;Table&lt;/em&gt; shortcode to your page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;results.csv&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;caption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Table 1: My results&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;













  



&lt;table class=&#34;table&#34;&gt;
  
    
    
    &lt;tr&gt;  &lt;th&gt;customer_id&lt;/th&gt;  &lt;th&gt;score&lt;/th&gt;  &lt;/tr&gt;
  
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;number&#34;&gt;1&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;number&#34;&gt;0&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;number&#34;&gt;2&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;text&#34;&gt;0.5&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
    &lt;tr&gt;
      
        
          &lt;td data-table-dtype=&#34;number&#34;&gt;3&lt;/td&gt;
        
      
        
          &lt;td data-table-dtype=&#34;number&#34;&gt;1&lt;/td&gt;
        
      
    &lt;/tr&gt;
  
  
    &lt;caption&gt;Table 1: My results&lt;/caption&gt;
  
&lt;/table&gt;

&lt;h3 id=&#34;callouts&#34;&gt;Callouts&lt;/h3&gt;
&lt;p&gt;Academic supports a &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/#callouts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcode for callouts&lt;/a&gt;, also referred to as &lt;em&gt;asides&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% callout note %}} ... {{% /callout %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% callout note %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% /callout %}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;spoilers&#34;&gt;Spoilers&lt;/h3&gt;
&lt;p&gt;Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;spoiler&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Click to view the spoiler&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;You found me!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spoiler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-6&#34;&gt;
  &lt;summary&gt;Click to view the spoiler&lt;/summary&gt;
  &lt;p&gt;You found me!&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;icons&#34;&gt;Icons&lt;/h3&gt;
&lt;p&gt;Academic enables you to use a wide range of &lt;a href=&#34;https://wowchemy.com/docs/getting-started/page-builder/#icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons from &lt;em&gt;Font Awesome&lt;/em&gt; and &lt;em&gt;Academicons&lt;/em&gt;&lt;/a&gt; in addition to &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/#emojis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples using the &lt;code&gt;icon&lt;/code&gt; shortcode to render icons:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;icon&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;terminal&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;pack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fas&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}} Terminal  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;icon&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;pack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fab&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}} Python  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;icon&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;r-project&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;pack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fab&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}} R
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-terminal  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Terminal&lt;br&gt;

  &lt;i class=&#34;fab fa-python  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Python&lt;br&gt;

  &lt;i class=&#34;fab fa-r-project  pr-1 fa-fw&#34;&gt;&lt;/i&gt; R&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>The dynamic importance of nodes is poorly predicted by static topological features</title>
      <link>https://cvanelteren.github.io/publication/dynamic_importance2019/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/publication/dynamic_importance2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What node is most important?</title>
      <link>https://cvanelteren.github.io/talk/what-node-is-most-important/</link>
      <pubDate>Tue, 02 Apr 2019 16:45:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/talk/what-node-is-most-important/</guid>
      <description>&lt;p&gt;I was a guest speaker as part of the course Modeling and Data Analysis in Complex Networks.
Additionally, the same slides were shown at the simulation based science group at the institute
for advanced studies (IAS) at the university of Amsterdam.
The talk concerned my research on the identification of driver-nodes in complex dynamical systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Woningnet</title>
      <link>https://cvanelteren.github.io/project/woningnet/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/project/woningnet/</guid>
      <description>&lt;p&gt;I got tired of clicking on woningnet so I made this viewer that puts the houses
on a map! It offers a nice interface which allows you to reduce time spent on woningnet.
See gif for small example.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;test&#34;
           src=&#34;https://cvanelteren.github.io/project/woningnet/featured.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://cvanelteren.github.io/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/post/jupyter/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;IPython.core.display&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Welcome to Academic!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;
&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;
&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jupyter lab index.ipynb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;
&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;
&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title: My post&amp;#39;s title
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: 2019-09-01
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Put any other Academic metadata here...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edit the metadata of your post, using the &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;
&lt;p&gt;To set a &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;
&lt;p&gt;For other tips, such as using math, see the guide on &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://cvanelteren.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://wowchemy.com/docs/content/slides/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://revealjs.com/pdf-export/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blueberry&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;porridge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blueberry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Eating...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% fragment %}} One {{% /fragment %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% fragment %}} **Two** {{% /fragment %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% fragment %}} Three {{% /fragment %}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
  One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
  Three
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{% speaker_note %}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Only the speaker can read these notes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Press &lt;span class=&#34;sb&#34;&gt;`S`&lt;/span&gt; key to view
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  {{% /speaker_note %}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;background-image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/media/boards.jpg&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;background-color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#0000FF&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{{&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;slide&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;my-style&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;navy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://discord.gg/z8wNYzb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/content/slides/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Information impact</title>
      <link>https://cvanelteren.github.io/project/information_impact/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/project/information_impact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Apple tss-saver daemon</title>
      <link>https://cvanelteren.github.io/project/tssclient/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/project/tssclient/</guid>
      <description>&lt;p&gt;I built an automatic daemon around tss-saver by 1Conan. It automatically grabs
the latest shsh2 blobs from apple servers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FishViewer</title>
      <link>https://cvanelteren.github.io/project/fishviewer/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/project/fishviewer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Statistical machine learning</title>
      <link>https://cvanelteren.github.io/project/statistical_machinelearning/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/project/statistical_machinelearning/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Toy dynamical systems</title>
      <link>https://cvanelteren.github.io/project/toymodels/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/project/toymodels/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://cvanelteren.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://cvanelteren.github.io/post/test3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/post/test3/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Text&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about me</title>
      <link>https://cvanelteren.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Curiculum Vitae</title>
      <link>https://cvanelteren.github.io/cv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://cvanelteren.github.io/cv/</guid>
      <description>&lt;p&gt;CV available upon request!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
