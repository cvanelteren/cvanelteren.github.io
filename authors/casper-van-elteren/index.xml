<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Casper van Elteren</title>
    <link>https://thefriendlyghost.nl/authors/casper-van-elteren/</link>
      <atom:link href="https://thefriendlyghost.nl/authors/casper-van-elteren/index.xml" rel="self" type="application/rss+xml" />
    <description>Casper van Elteren</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 04 Sep 2024 20:28:04 +0200</lastBuildDate>
    <item>
      <title>Releasing the GIL</title>
      <link>https://thefriendlyghost.nl/post/release_gil/</link>
      <pubDate>Wed, 04 Sep 2024 20:28:04 +0200</pubDate>
      <guid>https://thefriendlyghost.nl/post/release_gil/</guid>
      <description>&lt;p&gt;Programming in python is quick &amp;ndash; in a few hours you can set up things such as a website, implement an agent-based model or run some analysis. Python provides a rich ecosystems of libraries and modules that can extend the reach of your code. However, python is not the fastest language out there. For computational heavy tasks, such as running simulations, python can be slow, very slow in fact. One of the limitations of python is that it inherently a single threaded language. This means that only one thread can run at a time. This is a problem sinds it limits one of the major development of recent years &amp;ndash; the emergence of many (many) cores. In this post, I will show you how to release the Global Interpreter Lock (GIL) and call python code from another language. In this way you can make use of the full power of a compiled language while still harnessing the availability of the rich ecosystem of python libraries &amp;ndash; while taking a minor pefromance hit.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-gil-and-why-is-it-a-problem&#34;&gt;What is the GIL? And why is it a problem?&lt;/h1&gt;
&lt;p&gt;Every programming language has its own quirks and python is no exception. One of the most important quirks of python is the Global Interpreter Lock (GIL). The GIL is a mutually exlclusive (mutex) flag that protects access to python objects, preventing multiple threads from executing python bytecodes at once. This means that only one thread can run at a time. Inititally, the GIL was meant to solve a memory management issue of python. You see, python&amp;rsquo;s memory system uses a form called reference counting. Every object that is created or destroyed will increase or respectively decrease this reference count. In a multi-threaded setting, this can lead to issues as different threads create or destroy objects. For example say the reference count is 0 and two threads try to increase the reference count at the same time. Then the reference count will be 1 instead of 2. This can lead to memory leaks or worse, memory corruption. The GIL was introduced to prevent this from happening. However, the GIL has a major downside &amp;ndash; it makes python single threaded. This is a problem sinds the number of cores in a computer has been increasing over the years. This means that python is not able to take advantage of the full power of a computer.&lt;/p&gt;
&lt;h2 id=&#34;reference-counting-in-action&#34;&gt;Reference counting in action&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getrefcount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;releasing-the-gil&#34;&gt;Releasing the GIL&lt;/h1&gt;
&lt;p&gt;To release the GIL we need to interface with the c-api directly. Python at its roots in written in C. This means that we can call python code from C and vice versa. By releasing the GIL we allow other threads than the main thread to run python code while not messing up our reference counting and thus not creating any memory leaks.&lt;/p&gt;
&lt;p&gt;Relelasing the GIL consists of three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inititalize python in the main thread&lt;/li&gt;
&lt;li&gt;Release the GIL&lt;/li&gt;
&lt;li&gt;Acquire the GIL from a thread
&lt;ul&gt;
&lt;li&gt;And releasing it when you are done&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;initializing-python-in-the-main-thread&#34;&gt;Initializing python in the main thread&lt;/h2&gt;
&lt;p&gt;My language of choice is Nim, but the steps are similar in other languages. In Nim we can make use of the package Nimpy that provides a wrapper around the python c-api. To initialize python in the main thread we can use the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nim&#34; data-lang=&#34;nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nimpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nimpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py_lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;py_types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;initPyLibIfNeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;py_lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pyLib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the file &lt;code&gt;nimpy/py_lib&lt;/code&gt; an object can be found called &lt;code&gt;pyLib&lt;/code&gt;. This object is a pointer to the loaded pymodule. There are different ways to load the pymodule and we could in principle run multiple different python interpreters in different threads. However, for now we will stick to one python interpreter.&lt;/p&gt;
&lt;p&gt;Now that we have the python module loaded we need to tell Nim which function of the c-api to call.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Nim&#34; data-lang=&#34;Nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dynlib&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# exposes symaddr`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Load necessary Python C API functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;PyGILState_Ensure&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyGILState_STATE&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cdecl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;PyGILState_Ensure&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;PyGILState_Release&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyGILState_STATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cdecl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;PyGILState_Release&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The functions &lt;code&gt;PyGilState_Ensure&lt;/code&gt; and &lt;code&gt;PyGILState_Release&lt;/code&gt; are part of the c-api that python provides. The first function ensures that the GIL is acquired and the second function releases the GIL. Note that the GIL is relative to the thread we are running python on indicated by &lt;code&gt;py&lt;/code&gt; in the code above. The &lt;code&gt;symAddr&lt;/code&gt; function is part of Nim&amp;rsquo;s dynlib package and returns the address of the function in the c-api.&lt;/p&gt;
&lt;p&gt;The functions contain a &lt;code&gt;gcsafe&lt;/code&gt; pragma. This pragma tells the garbage collector that the function is safe to call. This is important sinds the garbage collector can move objects around in memory. If the garbage collector moves an object while a function is running that is not safe to call, the program will crash. The &lt;code&gt;gcsafe&lt;/code&gt; pragma tells the garbage collector that the function is safe to call and that it should not move objects around in memory.&lt;/p&gt;
&lt;p&gt;Now that we have the functions we can release the GIL. We can wrap interfacing with the GIL in a nice wrapper that will hold and release the GIL when we are done.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Nim&#34; data-lang=&#34;Nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withPyGIL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;untyped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyGILState_Ensure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Caught: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;PyGILState_Release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code provides as template such that we can readily write python code and it is clear to the programmer that we are holding the GIL. The code starts by calling &lt;code&gt;PyGILState_Ensure&lt;/code&gt; and storing the state in a variable. Then the code is executed. If an exception is raised the exception is caught and printed to the console. Finally, the GIL is released by calling &lt;code&gt;PyGILState_Release&lt;/code&gt;. The final step is extremely important as it will prevent the GIL from being locked indefinitely if or when an error occurs within one of the thread. That is, if an error is raised inside the thread, the thread will exit while still holding the GIL, which creates a deadlock &amp;ndash; a condition in which all the threads are waiting for some event to occur that allows them to continue, but this event will never happen.&lt;/p&gt;
&lt;p&gt;This template can then be called as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Nim&#34; data-lang=&#34;Nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;withPyGil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;# code to run that needs the GIL to be active such as creating or destroying objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;example-of-releasing-the-gil&#34;&gt;Example of Releasing the GIL&lt;/h1&gt;
&lt;p&gt;In my use case I wanted to create a graph on a thread that will be passed to my simulation function that runs on a different thread. The actually code is too complex to show here, but I will show you a simplified version of the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Nim&#34; data-lang=&#34;Nim&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nimpy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nimpy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py_lib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dynlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;PyGILState_STATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;distinct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;PyThreadState&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;initPyLibIfNeeded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;py_lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pyLib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;nx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pyImport&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;networkx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Load necessary Python C API functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;PyGILState_Ensure&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyGILState_STATE&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cdecl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;PyGILState_Ensure&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;PyGILState_Release&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;proc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyGILState_STATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cdecl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;PyGILState_Release&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withPyGIL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;untyped&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyGILState_Ensure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;PyGILState_Release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Example usage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;proc &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;pyThreadSafeFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gcsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;withPyGIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c&#34;&gt;# create objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path_graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# note uses globally available nx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c&#34;&gt;# modify objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;example_trait&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;example_value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malebolgia&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# for multi-threading&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isMainModule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createMaster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# create pool of threads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;awaitAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c&#34;&gt;# create many threads&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spawn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pyThreadSafeFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code above shows how to create a graph on a thread that will be passed to a simulation function that runs on a different thread. The code starts by importing the necessary modules and loading the python module. Then the necessary functions are loaded from the c-api. The &lt;code&gt;withPyGIL&lt;/code&gt; template is defined that will hold and release the GIL when we are done. The &lt;code&gt;pyThreadSafeFunction&lt;/code&gt; is defined that will create a graph on a thread. The function is marked as &lt;code&gt;gcsafe&lt;/code&gt; to tell the garbage collector that it is safe to call. The function is then called in a loop to create many threads that will create a graph. The &lt;code&gt;createMaster&lt;/code&gt; function is called to create a pool of threads. The &lt;code&gt;awaitAll&lt;/code&gt; function is called to wait for all threads to finish. The &lt;code&gt;spawn&lt;/code&gt; function is called to create a thread that will call the &lt;code&gt;pyThreadSafeFunction&lt;/code&gt; function.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope this post shines some light on the GIL and potentially help somebody else venture into the c-api of python.Python programmers are not often exposed to the memory related issues that C and C++ programmers face. The GIL is one of the most important issues that programmers face when interfacing with python from another language. Luckily python provides a very well documented c-api. Working in-between languages often yields issues where you are not really sure where to turn as the inbetween is not well documented or is expected knowledge when coming from a different language. For me the post above is many frustrated hours of knowing what I wanted to achieved, but not entirely sure how to achieved it. I hope this post helps somebody else in the same situation.&lt;/p&gt;
&lt;p&gt;With python 3.13 on the horizon, you will be able to unlock the GIL from python. I am exited to see if this results in any performance gains.&lt;/p&gt;
&lt;p&gt;The GIL is a complex topic and I have only scratched the surface. I hope to write more about the GIL in the future. If you have any questions or comments, please let me know. I am always happy to help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Complexity science: a Decomposition of Form and Function</title>
      <link>https://thefriendlyghost.nl/publication/three_myths_in_complexity_science/</link>
      <pubDate>Tue, 02 Jul 2024 09:43:57 +0200</pubDate>
      <guid>https://thefriendlyghost.nl/publication/three_myths_in_complexity_science/</guid>
      <description>&lt;p&gt;From  bird  flocking  to neural  dynamics,  complex  systems
generate  fascinating  structures and  correlations.  Often,
seemingly  simple   dynamics  lead  to   intricate  emergent
properties. Despite their  visceral appeal, defining complex
systems  lacks universal  agreement. In  this paper,  I will
debunk three prevalent myths  in complex systems and propose
resolutions.   This   work   contributes   by   offering   a
contemporary interpretation  of complex  systems, presenting
essential definitions that benefit complexity scientists.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Criminal organizations exhibit hysteresis, resilience, and robustness by balancing security and efficiency</title>
      <link>https://thefriendlyghost.nl/publication/crime_theory/</link>
      <pubDate>Wed, 15 Nov 2023 13:27:21 +0100</pubDate>
      <guid>https://thefriendlyghost.nl/publication/crime_theory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Speeding up python code with cython pure</title>
      <link>https://thefriendlyghost.nl/post/cython_pure/</link>
      <pubDate>Tue, 15 Mar 2022 15:27:46 +0100</pubDate>
      <guid>https://thefriendlyghost.nl/post/cython_pure/</guid>
      <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#org47f4632&#34;&gt;What are header files?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgb06f8c3&#34;&gt;Cython pure mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgbcf09bc&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org9f605fb&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In  coding there  is  a trade-off  between writing  abstract
code,  and high  performant  code. This  trade-off is  often
embodied  in different  languages.  For  example, python  is
considered  to  be an  abstract  language  whereas C++/C  is
considered a  low level language. Abstract  languages allows
for rapid  prototyping while hiding away  the implementation
details in packages or modules.  A key strategy for abstract
languages is  providing high level interfaces  for low-level
implementations  allowing  for  a   “best  of  both  worlds”
scenario,   improving  the   performance  of   the  abstract
language. However, there are cases in which the code written
is within  the ecosystem of  the abstract language,  yet the
performance needs to increase. For  python there are ways to
improve  the performance  of python  code. For  example, one
could use  Numba to utilize the  Just-In-Time-Compiler (JIT)
or  use a  specialized compiled  version of  python such  as
pyston. Cython  offers yet another way  by compiling special
“pyx” files into a shared object that can then be interfaced
with from  python, creating a hybrid  language between C/C++
and          python          (see          my          prior
&lt;a href=&#34;https://cvanelteren.github.io/post/cython_templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post
on
cython templates&lt;/a&gt;). Cython has the advantage of leveraging the
existing  python stack,  and  enhancing it  with faster  run
time. It works specifically well if the original python code
contains a  lot of for  loops that cannot be  optimized away
by other  means. Although the cython  ecosystem has matured
quite  a lot  in recent  years, it  requires knowledge  from
other  languages to  implement algorithms  efficiently. This
creates a  gap for python  developers wanting to have  a bit
more performance.&lt;/p&gt;
&lt;p&gt;A more recent development  is compiling existing python code
in “pure” mode in cython. In pure mode, the original code is
left  untouched (i.e.  the &lt;code&gt;.py&lt;/code&gt;  file) and  the performance
enhancing code is written in a special header file (&lt;code&gt;.pxd&lt;/code&gt;).
This  has the  advantage for  increasing the  performance of
existing python code while  retaining the compatibility with
non-cython  users. I  &lt;a href=&#34;https://github.com/cvanelteren/networkx/commit/7f7f3b8ff923917f42a6101f7e27e5b7396d2828&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recently&lt;/a&gt;  implemented the  forceatlas2
layout in cython’s pure mode  to gain a 400 percent increase
over the traditional python code.&lt;/p&gt;
&lt;p&gt;In this  post, I  wish to introduce  the reader  to cython’s
pure mode and  test some simple benchmarks to  see what kind
of performance boosts we can have.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org47f4632&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-are-header-files&#34;&gt;What are header files?&lt;/h1&gt;
&lt;p&gt;In traditional  compiled languages such as  C/C++ the source
code  is split  into  the implementation  and header  files.
Header  files can  be  thought of  as the  index  of a  book,
whereas  the  source files  can  be  thought of  the  actual
content of a  book’s chapter. The header  file instructs the
compiler  (and the  programmer) on  what is  present in  the
implementation and  how external code can  interface with it.
In python,  the concept of  source and header file  does not
exist. The closest thing I can think of is showing what kind
of class properties a class has. Something similar to,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Chicken:
    mass = 0
    height = 0
    def __init__(self, name):
        self.name = name
&lt;p&gt;Karl = Chicken(&amp;quot;Karl&amp;quot;)
print(f&amp;quot;My name is {Karl.name} and I weight {Karl.mass} kg&amp;quot;)&lt;/p&gt;
&lt;p&gt;My name is Karl and I weight 0 kg
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Here, the  variables &lt;code&gt;mass&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;  are defined before
the class is inititalized. It  tells the programmer that the
class  &lt;code&gt;Chicken&lt;/code&gt;   has  two  class  properties   &lt;code&gt;mass&lt;/code&gt;  and
&lt;code&gt;height&lt;/code&gt;. A  python programmer would put  these variables in
the class  constructor as  these are individual  traits. The
use of init function is general  is not the same as this use
case. For the init function  may transform the values passed
to the  object, whereas here  &lt;code&gt;mass&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;  are clear
class traits.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgb06f8c3&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;cython-pure-mode&#34;&gt;Cython pure mode&lt;/h1&gt;
&lt;p&gt;Cython’s  pure  mode  takes  an  existing  python  file  and
augments it  by an header  file. Often this header  file has
the  same name  as the  original  python file  but with  the
extension &lt;code&gt;.pxd&lt;/code&gt; (or definition file). Let’s take an example
function. Assume we want to  implement a matrix dot product.
A naive implementation will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#file: dot.py
import numpy as np
def dot(A: np.ndarray, B: np.ndarray) -&amp;gt;  np.ndarray:
    m, n = A.shape
    k = B.shape[1]
    assert n == B.shape[0], &amp;quot;matrices A and B are not alligned&amp;quot;
    output = np.zeros((m, k))
    for idx in range(m):
        for jdx in range(n):
            for kdx in range(k):
                output[idx, kdx] += A[idx, jdx] * B[jdx, kdx]
    return output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Testing  the code  for speed  we can  confirm that  this dot
product is quite slow.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
A = np.eye(10)
B = np.eye(10)
%timeit -n10 -r10 dot(A, B)
&lt;p&gt;595 µs ± 301 µs per loop (mean ± std. dev. of 10 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In comparison the numpy implementation
is about 200 times faster&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
%timeit -n10 -r10 np.dot(A, B)
&lt;p&gt;The slowest run took 26.21 times longer than the fastest. This could mean that an intermediate result is being cached.
7.48 µs ± 16 µs per loop (mean ± std. dev. of 10 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Let’s say we really like our dot implementation, but we wish
the python code  was a bit faster. For cython  pure mode, we
would need to augment the py  file with pxd file. The header
file would need to contain&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The functions name&lt;/li&gt;
&lt;li&gt;The functions return type&lt;/li&gt;
&lt;li&gt;The functions input arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We create the file &lt;code&gt;dot.pxd&lt;/code&gt; and fill in the header as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# file: dot.pxd
# distutils: language = c++
# or c if you want c
import cython
@cython.locals(m = size_t, n = size_t, k = size_t,
               idx = size_t, jdx = size_t, kdx = size_t,
               output = double[:, ::1])
cpdef double[:, ::1] dot(double[:, ::1] A, double[:, ::1] B)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What exactly  happened here?  The `cython.locals`  tells the
compiled  which  variables  are   declared  inside  the  dot
function in the py file. It tells the compile what the types
are. The function description is exposed through cython with
the &lt;code&gt;cpdef&lt;/code&gt;  statement. This  exposes the function  to calls
from  python in  the &lt;code&gt;.so&lt;/code&gt;  file.  Next the  return type  is
given. Here a memoryview is used. These are raw buffers that
can  be  directly converted  from  numpy.  They have  faster
access  than normal  the normal  numpy arrays.  Using memory
views has the disadvantages that  the numpy methods that are
defined on  the array  are disable.  For example  one cannot
call &lt;code&gt;A.sum&lt;/code&gt;  or &lt;code&gt;A.mean&lt;/code&gt; or &lt;code&gt;A.reshape&lt;/code&gt;  anymore when using
memory  views. An alternative  would be  to use  `np.ndarray`
however these are still considered  to be python objects and
therefore  do  not  have  increased speed  compared  to  the
memoryviews.&lt;/p&gt;
&lt;p&gt;We then compile the source code either from a setup file(not
covered  but  preferred in  modules)  or  directly from  the
commandline with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cythonize build_ext --inplace dot.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which produces an .so file. Let’s test the speed!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from dot import dot as cydot
%timeit -n10 -r10 cydot(A, B)
&lt;p&gt;4.11 µs ± 557 ns per loop (mean ± std. dev. of 10 runs, 10 loops each)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Which   is  a   nearly  200   percent  increase   in  speed!
Importantly,  it   is  nearly   on  par  with   the  numpy’s
implementation!&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgbcf09bc&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;benchmarks&#34;&gt;Benchmarks&lt;/h1&gt;
&lt;p&gt;Let’s  benchmark  the  results  to  see  how  the  different
implementations scale with matrix size.&lt;/p&gt;
&lt;p&gt;
&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./pure_performance.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org9f605fb&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Cython can  be used  to speed up  existing python  code. The
preferred way  is to  use cython pyx  files with  pxd header
files. An alternative is to use cython pure mode to speed up
existing  python   code.  Pure  mode  allows   for  smoother
collaboration with numerical experts and python developers.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    
  </channel>
</rss>
